#***************************************#
#author:fengming
#date:Thu 22 Dec 2022 11:22:52 AM CST
#***************************************#
fengming_dir=/etc/fengming.d
HELP_FUNC=fm-help_example

z_dir=$(find /opt ~/ -maxdepth 2 -type d -name z)
if [ -f ${z_dir}/z.sh ]
then
	. ${z_dir}/z.sh
fi

alias ll='ls -hl --color=auto'
alias lll='ls -hla --color=auto'
alias llll='ls -hla --color=auto'
alias la='ls -aF --color=auto'
alias lf='ls -AF --color=auto'
alias l='ls -CF --color=auto'
alias vi='vim'
alias bd=". bd -si"
alias treee='tree'
alias treeee='tree'
alias cman='man -M  /usr/share/man/zh_CN'
alias bipcgrep='grep --exclude=*.map  --exclude=*.o  --exclude=*.a  --exclude=*.bin  --exclude=*.bak  --exclude=*.out'
alias svnls='svn st | grep -v ^?'
alias mywifi='wifi_qr_code fjk myap 12345678'
alias clr='clear'
function clrall
{
	clear
	history -c
	echo "" > /${HOME}/.bash_history
	echo "All bash data has deleted!!"
	return 0
}
function fm-mybashrc_install
{
	local home_bashrc=${HOME}/.bashrc
	if [ ! -f ${home_bashrc} ]
	then
		echo "${home_bashrc} not exist"
		return 1
	fi
	cat >> ${home_bashrc} << EOF
if [ -f ${fengming_dir}/mybashrc ];then
	. ${fengming_dir}/mybashrc
fi
EOF
	tail -3 ${home_bashrc}
	return 0
}

function fm-mybashrc_update
{
	local file=${fengming_dir}/mybashrc
	local tmp_file=/var/tmp/mybashrc
	local new_date=$(date)

	if [ ! -f $file    ]
	then
		echo "$file not exist"
		return 1
	fi
	local user_type=$(whoami)
	if [ "$user_type" != root  ]
	then
		echo "user:$user_type no permission to change file $file"
		echo "please switch to root user"
		return 2
	fi

	cp $file ${file}.bak

	cat $file | sed  "/^#date:/c #date:${new_date}" > $tmp_file
	if [ -f $tmp_file  ]
	then
		cp $tmp_file  $file
	fi

	return 0
}

function fm-help_example
{
	local help_file_path=${fengming_dir}/help_files
	if [ ! -d ${help_file_path} ];then echo "";return 1;fi
	if [ $# -lt 1 ];then ls -lh ${help_file_path};return 0;fi
	if [ $1 = "-h" ] || [ $1 = "--help" ]
	then
		echo "${FUNCNAME}  cmd"
		echo "example:"
		echo "${FUNCNAME}  ip"
	fi
	local cmd=$1
	local help_file=$(find ${help_file_path} -type f -iname "${cmd}*")
	if [ "x${help_file}" = x ];then echo "no found ${cmd} help file";return 2;fi
	for file in ${help_file}
	do
		cat ${help_file}
	done
	return 0
}

function fm-base_software_list
{
	local app_list=${fengming_dir}/base_software_list

	if [ ! -f ${app_list} ];then echo "${app_list} not exist.";return 1;fi

	cat ${app_list}

	return 0
}


function fm-add_fjk_device_qr_code
{
	local flag=NO
	local default_passwd=admin
	local id_head="ID:"
	local user=
	local passwd_head="password:"
	local passwd=

	if [ $# -eq 1  ]
	then 
		tmp=$(echo $1 | grep "^1jfieg" )
		echo $tmp
		if [  x${tmp} = x  ]
		then
			${HELP_FUNC}  add_device_qr_code
			return 1
		else
			echo "tmp=$tmp"
			user=$1
			passwd=${default_passwd}
			flag=OK
		fi
	elif [ $# -eq 2  ]
	then
		tmp=$(echo $1 | grep "^1jfieg" )
		if [ x$tmp = x  ]
		then
			tmp=$(echo $2 | grep "^1jfieg" )
			if [ x$tmp = x  ]
			then
				${HELP_FUNC}  add_device_qr_code
				return 1
			else
				user=$2
				passwd=$1
				flag=OK
			fi
		else
			user=$1
			passwd=$2
			flag=OK
		fi

	else
		${HELP_FUNC}  add_device_qr_code
		return 1
	fi

	if [ -z $(which qrencode) ]
	then
		echo "please install qrencode first"
		echo "apt install qrencode"
		return 1
	fi		
	if [ $flag == "OK"  ]
	then
		qrencode -o  - -t UTF8 ${id_head}${user}${passwd_head}${passwd}
		echo "ID=${user}"
		echo "pass=${passwd}"
	fi
	return 0
}

function fm-wifi_qr_code
{
	if [ $# -lt 2 ]
	then
		${HELP_FUNC} wifi_qr_code
		return 1
	fi
	local mode=$1
	local user=$2
	local passwd="none"
	if [ $# -eq 3 ]
	then
		passwd=$3
	fi

	if [ $mode = fjk ]
	then
		if [ "$passwd" = "none" ]
		then
			#fujikam open auto mode
			qrcode_string="{\"s\":\"${user}\",\"p\":\"\",\"l\":\"zh\"}"
			echo "==${qrcode_string}"
		else	
			qrcode_string="{\"s\":\"${user}\",\"p\":\"${passwd}\",\"l\":\"zh\"}"
			echo "==${qrcode_string}"
		fi
	elif [ $mode = phone ]
	then
		if [ "$passwd" = "none" ]
		then
			#mobile phone open auto mode
			qrcode_string="WIFI:T:nopass;S:$user;P:;;"
			echo "==${qrcode_string}"
		else
			qrcode_string="WIFI:T:WPA;S:$user;P:$passwd;;"
			echo "==${qrcode_string}"
		fi
	else
		${HELP_FUNC} wifi_qr_code
		return 2
	fi
	
	qrencode -o  - -t UTF8 -m 2 ${qrcode_string}
	if [ ! $? -eq 0 ]
	then 
		echo "exec qrencode wrong."
	fi
	echo "ID=${user}"
	echo "pass=${passwd}"
	return 0
}


function fm-fjk_sign_tool
{
	local sig_tool_path=/root/XBox/XBox
	local curr_pwd=$PWD
	local source_file=$curr_pwd/$1
	local source_dir=$(dirname $curr_pwd/$1)
	local source_name=$(basename $source_file)
	local target_name=$(echo "pack.sig.$source_name")
	echo "source_file=$source_file"
	echo "soucre_dir=$source_dir"
	echo "source_name=$source_name"
	echo "target_name=$target_name"
	if [ -e $1  ]
	then
		pushd $sig_tool_path
		./bin/node  generate_sign.js $source_file

		if [ -e $source_dir/$target_name  ]
		then
			echo "generate sign success"
			echo "--->$source_name"
			echo "--->$target_name"
		fi
		popd
	else
		echo "file is not exist:$source_file"
	fi
	echo "done ......."
	return 0
}

function fm-svn_revert_all
{

	if ! which svn > /dev/null
	then
		return 1
	fi

	local change_file_list=$(svn st | grep ^[MCAD\!] | awk '{print $2}' | tac)
	local no_record_file_list=$(svn st | grep ^? | awk '{print $2}')

	for file in $change_file_list
	do 
		svn revert $file
	done

	for file in $no_record_file_list
	do
		if [ -d $file  ]
		then
			rm -rv $file
		else
			rm -v $file
		fi
	done

	echo "svn revert all files done"

	return 0
}


function fm-grep_object_files
{
	local ARM_NM=arm-fullhanv2-eabi-nm
	local NMFLAG="-a" #"--defined-only"

	local current_dir=$PWD
	#echo $current_dir

	if [ $# -lt 1  ] || [ $1 = "-h" ] || [ $1 = "--help" ]
	then
		echo "ERROR:parameter missing"
		echo "example:"
		echo "$FUNCNAME    [-h or --help]"
		echo "$FUNCNAME  function_name  #it will find all *.o file under current dir"
		echo "$FUNCNAME  function_name  a.o b.o c.o"
		echo "$FUNCNAME  --show"
		return 1 
	fi
	if [ $1 = "--show" ]
	then
		help_example nm_symbol_type_help
		return 0
	fi	
	which $ARM_NM > /dev/null
	if [ $? -ne 0  ]
	then
		echo "NM=$ARM_NM not found"
		return 2
	fi

	local func_name=$1
	local obj_file_list=
	if [ $# -ge 2  ]
	then
		shift
		obj_file_list=$*
	else
		obj_file_list=$(find $current_dir -type f -name "*.o")
	fi

	#echo "function_name=$func_name"
	#echo "obj_file_list=$obj_file_list"

	if [ x"$obj_file_list" = "x"  ]
	then
		echo "no found object file"
		return 3
	fi

	local total_file_counts=
	local found_in_file_counts=
	let total_file_counts=0
	let found_in_file_counts=0
	
	local file_type=
	local tmp=
	for file in $obj_file_list
	do
		if [ ! -f $file  ]
		then
			echo "file:$file not exist"
			continue
		fi

		total_file_counts=$(($total_file_counts + 1))

		file_type=$(file $file | grep -i arm )
		if [ x"$file_type" = "x"  ]
		then
			which nm > /dev/null
			if [ $? -ne 0  ]
			then
				continue
			fi
			tmp=$(nm $NMFLAG  $file | grep -wi $func_name)
		else
			tmp=$($ARM_NM $NMFLAG  $file | grep -wi $func_name)
		fi

		if [ x"$tmp"  != "x"  ] 
		then
			echo "$file --->>>"
			echo "$tmp"
			found_in_file_counts=$(($found_in_file_counts + 1))
		fi
	done

	echo "-------------------------------------------------------------"
	echo "            total check $total_file_counts object files"
	echo "     found function interface in  $found_in_file_counts files"
	echo "--------------------- done ----------------------------------"

	return 0
}


function fm-grep_asm_or_dis_files
{
	local current_dir=$PWD
	#echo $current_dir
	if [ $# -lt 1  ] || [ $1 = "-h" ] || [ $1 = "--help" ]
	then
		echo "ERROR:parameter missing"
		echo "example:"
		echo "$FUNCNAME    [-h or --help]"
		echo "$FUNCNAME  function_name  #it will find all *.o file under current dir"
		echo "$FUNCNAME [-w i n] function_name"
		return 1 
	fi

	local opt=
	local func_name=
	if [ $# -eq 1 ]
	then
		func_name=$1
	elif [ $# -eq 2 ]
	then
		opt=$1
		func_name=$2
	else
		echo "ERROR:format wrong"
		return 1
	fi
	
	local obj_file_list=$(find $current_dir -type f -name "*.dis" -o -name "*.asm")
	if [ x"$obj_file_list" = "x"  ]
	then
		echo "no found object file"
		return 3
	fi
	
	local total_file_counts=
	local found_in_file_counts=
	let total_file_counts=0
	let found_in_file_counts=0
	
	local tmp=
	for file in $obj_file_list
	do
		if [ ! -f $file  ]
		then
			echo "file:$file not exist"
			continue
		fi

		total_file_counts=$(($total_file_counts + 1))

		tmp=$(cat  $file | grep $opt $func_name)
		if [ x"$tmp"  != "x"  ] 
		then
			echo "$file --->>>"
			echo "$tmp"
			found_in_file_counts=$(($found_in_file_counts + 1))
		fi
	done

	echo "-------------------------------------------------------------"
	echo "            total check $total_file_counts object files"
	echo "     found function interface in  $found_in_file_counts files"
	echo "--------------------- done ----------------------------------"

	return 0
}

function fm-grep_static_library
{
	

	return 0
}

function fm-ls_app_dependent_library
{
	if [ $# -lt 1  ] || [ $1 = "-h" ] || [ $1 = "--help" ]
	then 
		echo "ERROR:parameter missing"
		echo "example:"
		echo "$FUNCNAME    [-h or --help]"
		echo "$FUNCNAME    exec_file"
		return 1
	fi
		
	local ldd_tools=ldd
	which ${ldd_tools} > /dev/null
	if [ $? -eq 0  ]
	then 
		echo "------------------------------------"
		echo "${ldd_tools} $@"
		${ldd_tools} $@
		echo "------------------------------------"
	else
		echo "${ldd_tools} not found!"
		return 1
	fi

	local objdump_tools=objdump
	which ${objdump_tools} > /dev/null
	if [ $? -eq 0  ]
	then 
		echo "------------------------------------"
		echo "${objdump_tools} -p $@ | grep NEEDED"
		${objdump_tools} -p $@ | grep NEEDED
		echo "------------------------------------"
	else
		echo "${objdump_tools} not found!"
		return 2
	fi

	local readelf_tools=readelf
	which ${readelf_tools} > /dev/null
	if [ $? -eq 0  ]
	then 
		echo "------------------------------------"
		echo "${readelf_tools} -p $@ | grep NEEDED"
		${readelf_tools} -a $@ | grep NEEDED
		echo "------------------------------------"
	else
		echo "${readelf_tools} not found!"
		return 3
	fi

	return 0
}

function fm-ls_library_obj_files
{
	if [ $# -lt 1  ] || [ $1 = "-h" ] || [ $1 = "--help" ]
	then 
		echo "ERROR:parameter missing"
		echo "example:"
		echo "$FUNCNAME    [-h or --help]"
		echo "$FUNCNAME    xxx.a or *.a"
		echo "$FUNCNAME    xxx.so or *.so"
		return 1
	fi
	file_list="$@"
	if [ $# -eq 1 ]
	then
		if [ ! -f $1 ]
		then
			local base_name=$(echo $1 | xargs -n1 basename)
			file_list=$(find ./ -type f -name "${base_name}*")
		fi
	fi
	
	#check 
	local ar_toos=ar
	which ${ar_toos} > /dev/null
	if [ $? -ne 0   ];then echo "${ar_toos} not found!";return 2;fi
	
	local nm_toos=nm
	which ${nm_toos} > /dev/null
	if [ $? -ne 0   ];then echo "${nm_toos} not found!";return 3;fi

	for file in $file_list
	do
		if [ "${file##*.}" = "a"  ]
		then
			echo "------------------------------------"
			echo "${ar_toos} -t ${file}"
			${ar_toos} -t ${file}
			echo "------------------------------------"
		elif [ "${file##*.}" = "so"  ]
		then
			echo "------------------------------------"
			echo "${nm_toos} -D ${file}"
			${nm_toos} -D ${file}
			echo "------------------------------------"
		else
			echo "ERROR:unknow library  type"
			return 4
		fi
	done

	return 0
}

function fm-ls_library_func_list
{
	if [ $# -lt 1  ] || [ $1 = "-h" ] || [ $1 = "--help" ]
	then 
		echo "ERROR:parameter missing"
		echo "example:"
		echo "$FUNCNAME    [-h or --help]"
		echo "$FUNCNAME    xxx.a or *.a"
		echo "$FUNCNAME    xxx.so or *.so"
		return 1
	fi
	file_list="$@"
	if [ $# -eq 1 ]
	then
		if [ ! -f $1 ]
		then
			local base_name=$(echo $1 | xargs -n1 basename)
			file_list=$(find ./ -type f -name "${base_name}*")
		fi
	fi
	
	#check 
	local readelf_tools=readelf
	which ${readelf_tools} > /dev/null
	if [ $? -ne 0   ];then echo "${readelf_tools} not found!";return 2;fi
	
	for file in $file_list
	do
		if [ "${file##*.}" = "a"  ]
		then
			echo "------------------------------------"
			echo "${readelf_tools} -c ${file}"
			${readelf_tools} -c ${file}
			echo "------------------------------------"
		elif [ "${file##*.}" = "so"  ]
		then
			echo "------------------------------------"
			echo "${readelf_tools} -A ${file}"
			${readelf_tools} -A ${file}
			echo "------------------------------------"
		else
			echo "ERROR:unknow library  type"
			return 4
		fi
	done

	return 0
}

function fm-ls_library_func_list2
{
	if [ $# -lt 1  ] || [ $1 = "-h" ] || [ $1 = "--help" ]
	then 
		echo "ERROR:parameter missing"
		echo "example:"
		echo "$FUNCNAME    [-h or --help]  [--show]"
		echo "$FUNCNAME    xxx.a or *.a"
		echo "$FUNCNAME    xxx.so or *.so"
		return 1
	fi
	if [ $1 = "--show" ]
	then
		help_example nm_symbol_type_help	
		return 0
	fi	
	file_list="$@"
	if [ $# -eq 1 ]
	then
		if [ ! -f $1 ]
		then
			local base_name=$(echo $1 | xargs -n1 basename)
			file_list=$(find ./ -type f -name "${base_name}*")
		fi
	fi

	#check 
	local nm_tools=nm
	which ${nm_tools} > /dev/null
	if [ $? -ne 0   ];then echo "${nm_tools} not found!";return 2;fi
	
	for file in $file_list
	do
		if [ "${file##*.}" = "a"  ]
		then
			echo "------------------------------------"
			echo "${nm_tools} -o ${file}"
			${nm_tools} -o ${file}
			echo "------------------------------------"
		elif [ "${file##*.}" = "so"  ]
		then
			echo "------------------------------------"
			echo "${nm_tools} -o ${file}"
			${nm_tools} -o ${file}
			echo "------------------------------------"
		else
			echo "ERROR:unknow library  type"
			return 4
		fi
	done

	return 0
}


function fm-convert_linux_windows_path
{
	if [ $# -ne 1  ]
	then
		echo "ERROR:parameter wrong!!"
		echo "e.p:"
		echo "$0  /root/test.txt    --> \\root\\test.txt"
		echo "$0 'D:\\root\\test.txt' --> /root/test.txt"
		return 1
	fi

	local org_path=$1
	local tmp=$(echo $org_path  | grep / )
	local islinux_path=
	if [ "x$tmp" = x  ]
	then
		islinux_path=no
	else
		islinux_path=yes
	fi
	
	local new_path=
	if [ $islinux_path = yes  ]
	then
		new_path=$(echo $org_path | sed 's#/#\\#g')
	else
		new_path=$(echo $1 | sed -e 's#^[A-Z]:##' -e 's#\\#/#g')
	fi

	echo $new_path
	return 0
}

function fm-pwd
{
	local linux_pwd=${PWD}
	local win_pwd=$(echo ${linux_pwd} | sed 's#/#\\#g')

	echo "linux   --- ${linux_pwd}"
	echo "windows --- ${win_pwd}"
	return 0
}

function fm-realpath
{
	if [ $# -lt 1  ];then echo "ERROR:parmeter missing",echo "$FUNCNAME file/dir";return 1;fi
	local tool=realpath
	which ${tool} > /dev/null
	if [ $? -ne 0  ];then echo "ERROR:${tool} no found!!";return 2;fi
	for path in $@
	do
		local linux_path=$(${tool} ${path})
		if [ x"${linux_path}" != "x"  ]
		then
			echo "linux   --- ${linux_path}"
		fi
	done
	for path in $@
	do
		local linux_path=$(${tool} ${path})
		if [ x"${linux_path}" != "x"  ]
		then
			local win_path=$(echo ${linux_path} | sed 's#/#\\#g')
			echo "windows --- ${win_path}" 
		fi
	done
	return 0
}

function fm-find
{

	return 0

}

function fm-time_zone_update
{
	which ntpdate > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:ntpdate not found"
		echo "please install ntpdate"
		echo "sudo apt install ntpdate"
		return 1
	fi

	ntpdate -u  ntp.api.bz
	local zonefile=/usr/share/zoneinfo/Asia/Shanghai
	if [ ! -f $zoneinfo ]
	then
		echo "ERROR:$zoneinfo not exist!"
		return 2
	fi

	cp -v $zoneinfo /etc/localtime

	return 0;
}

function fm-pdf_viewer
{
	local app=evince
	local app_flag=
	which $app > /dev/null
	if [ $? -ne 0 ] ; then echo ¨$app not exist!¨;return 1;fi;
	
	$app $app_flag $*

	return 0
}

function fm-picture_viewer
{
	local app=gpicview
	local app_flag=
	which $app
	if [ $? -ne 0 ];then echo ¨$app not exist!¨;return 1;fi;

	$app $app_flag $*
	return 0
}

function fm-movie_viewer
{
	local app=mpv
	#local app_flag=¨--player-operation-mode=pseudo-gui¨
	local app_flag=
	
	which $app > /dev/null
	if [ $? -ne 0 ];then echo ¨$app not exist!¨;return 1;fi;

	$app $app_flag $*
	return 0
}

function fm-download_whole_website
{
	local tool=wget
	which ${tool} > /dev/null
	if [ $? != 0 ];then echo "ERROR:${tool} not found!!";return 1;fi
	
	if [ $# -lt 1 ];then echo "ERROR:paramter missing!!";echo "$FUNCNAME URL";return 2;fi
	
	echo "${tool} -r -p -np -k $@"
	${tool} -r -p -np -k $@

	return 0
}

