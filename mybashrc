#***************************************#
#author:fengming
#date:Thu 22 Dec 2022 11:22:52 AM CST
#***************************************#
fengming_top_dir=/etc/fengming.d
fengming_tools_dir=/etc/fengming.d/sorftware_toolket
fengming_func_lib_dir=/etc/fengming.d/bash_function_lib
fengming_documents_dir=/etc/fengming.d/documents

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	
	alias l='ls -CF --color=auto'
	alias ll='ls -hl --color=auto'
	alias lll='ls -hl --color=auto'
	alias llll='ls -hla --color=auto'
	alias la='ls -aF --color=auto'
	alias lf='ls -AF --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'

	alias treee='tree -C'
	alias treeee='tree -C'
else
	alias l='ls -CF'
	alias ll='ls -hl'
	alias lll='ls -hl'
	alias llll='ls -hla'
	alias la='ls -aF'
	alias lf='ls -AF'
	
	alias treee='tree'
	alias treeee='tree'
fi

alias bd=". bd -si"
alias cman='man -M  /usr/share/man/zh_CN'
alias clr='clear'

#source other files
#incude first
source ${fengming_func_lib_dir}/env_variable
except_do_source_list=("env_variable")
for file in $(ls ${fengming_func_lib_dir})
do
	for except in "${except_do_source_list[@]}"
	do
		if [ ${file} = ${except} ];then  continue 1;fi
	done
	source ${fengming_func_lib_dir}/${file}
done

alias svnls='svn st | grep -v ^?'
alias svnst='svn st | grep -v ^?'
alias mywifi='fm-wifi_qr_code fjk myap 12345678'
alias gitst='fm-gitst'
alias gitls='fm-gitls'
alias gitdiff='fm-gitdiff_work-cache'
alias gitshow='fm-gitshow'
alias gitlog='fm-gitlog'
alias gitinfo='fm-gitinfo'

if [ -f /opt/z/z.sh ];then
	source /opt/z/z.sh
fi

function clrall
{
	clear
	history -c
	echo "" > /${HOME}/.bash_history
	echo "All bash data has deleted!!"
	return 0
}

function auto_sudo
{
	#check param
	if [ $# -lt 3 ]
	then 
		echo "parameter wrong!"
		echo "$FUNCNAME -c/--cmd  command  [-a/--arg \'arg_list\'] -s/--src  srcfile  -d/--des desfile" 
		echo "e.g. $FUNCNAME  --cmd cp --arg \'-v\' --src srcfile --dec  desfile"
		return 1
	fi
	local cmd=""
	local arg=""
	local src=""
	local des=""
	#opt
    while [[ $# -gt 0 ]]
    do
        case "$1" in
            -c|--cmd)
                cmd="$2"
                shift 2
                ;;
            -a|--arg)
                arg="$2"
                shift 2
                ;;
            -s|--src)
                src="$2"
                shift 2
                ;;
            -d|--des)
                des="$2"
                shift 2
                ;;
            *)
				echo "unknow opt"
				return 2
                ;;
        esac
    done
	which ${cmd} > /dev/null
	if [ $? -ne 0 ];then echo "${cmd} not found!!";return 3;fi

	local target_dir=$(dirname ${des})
	if [ -w ${target_dir} ]
	then
		echo "cp ${arg} ${src} ${des}"
		cp ${arg} ${src} ${des}
	else
		echo "sudo cp ${arg} ${src} ${des}"
		sudo cp ${arg} ${src} ${des}
	fi
	return 0
}

function fm-mybuild_image_version_show
{
	local version_file=/boot/mybuild-image-version
	if [ -f ${version_file} ]
	then	
		cat ${version_file}
	fi
	return 0
}
function fm-git_show_mygitinfo
{
	local mygit_site="https://github.com/fengming1201/fengming.d.git"
	local fengming_dir=("${fengming_top_dir}" "${fengming_top_dir}.bak" "${fengming_top_dir}.backup")

	for dir in ${fengming_dir[*]}
	do
		if [ -d ${dir} ]
		then
			echo ${mygit_site}
			git -C ${dir}  log  -1
		fi
	done

	return 0;
}

function fm-git_mytoken_manage
{   
    local git_token_list=("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" "end")
	
	echo "token:"
	echo "${git_token_list[*]}"
	echo "===================================="
    echo "format:"
    echo "git remote set-url origin  https://<your_token>@github.com/<USERNAME>/<REPO>.git"
    echo "<your_token>：包括<>在内的全部字符替换成你的token"
    echo "<USERNAME>：包括<>在内的全部字符替换成你的username"
    echo "<REPO>：包括<>在内的全部字符替换成你要访问的仓库名称"
	echo "e.g.:"
    echo "git remote set-url origin  https://<your token>/fengming1201/fengming.d.git"
	echo "or"
	echo "git push origin main"
	echo "username:"
	echo "password:<your token>"

    return 0
}

function  fm-search_all_by_keyword
{
	if [ $# -lt 1 ] || [ $1 = "-h" ] || [ $1 = "--help" ]
	then
        echo "DESCRIPTION:在目录:${fengming_top_dir}中搜索内容或文件"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  keyword"
		echo ""
		return 1
	fi
	local key_word=$*
	#search key
	grep -rn "${key_word}"  ${fengming_top_dir}

	#search file
	find ${fengming_top_dir} -type f -iname "*${key_word}*" -o  -type l -iname "*${key_word}*"

	return 0
}

function fm-cmd_help
{
	local help_file_path=${fengming_top_dir}/cmd_help

    #check paramter
	if [ $# -lt 1 ]
	then 
		ls  ${help_file_path}
		echo "----------------------------------"
		echo "path=${help_file_path}"
		echo ""
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  prefix //命令或命令前缀"
		return 1
	fi
    #check paramter
	if [ $1 = "-h" ] || [ $1 = "--help" ]
    then
        echo "DESCRIPTION:命令的帮助文档和实例"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  prefix //命令或命令前缀"
        return 1
    fi
	
	local parameter=$@
	local help_file="none"
	for file_list in ${parameter}
	do
		help_file=$(find ${help_file_path} -type f -iname "${file_list}*" -o -type l -iname "${file_list}*")
		if [ "x${help_file}" = x ]
		then 
			echo "no found help file with prefix ${file_list}"
			
			local maybe_file=$(find ${help_file_path} -type f -iname "*${file_list}*" -o -type l -iname "*${file_list}*")
			if [ "x${maybe_file}" != x ]
			then
				echo "maybe you looking for: "
				echo "${maybe_file}"
			fi
			return 2
		fi
		for file_each in ${help_file}
		do
			echo ""
			cat ${file_each}
			echo ""
			echo "file:${file_each}"
			echo "====================================================="
		done
	done
	return 0
}

function fm-shell_help
{
	local doc_file_path=${fengming_documents_dir}
	local sub_doc_path=${doc_file_path}/sub_doc_shell
	
	#check paramter
	if [ $# -lt 1 ]
	then 
		echo "----------------------------------"
		ls  ${sub_doc_path}
		echo "path=${sub_doc_path}"
		echo ""
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  suffix  //功能或模块后缀"
		return 1
	fi
    if [ $1 = "-h" ] || [ $1 = "--help" ]
    then
        echo "DESCRIPTION:shell语法和功能模块用法帮助文档"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  suffix  //功能或模块后缀"
		echo "         ${FUNCNAME}  show    //显示所有shell相关文件"
        return 1
    fi
	
	local parameter=$@
	local doc_file="none"
	for file_list in ${parameter}
	do
		doc_file=$(find ${sub_doc_path} -type f -iname "*${file_list}")
		if [ "x${doc_file}" = x ]
		then 
			echo "no found help file with prefix ${file_list}"
			
			local maybe_file=$(find ${sub_doc_path} -type f -iname "*${file_list}*")
			if [ "x${maybe_file}" != x ]
			then
				echo "maybe you looking for: "
				echo "${maybe_file}"
			fi
			return 2
		fi
		for file_each in ${doc_file}
		do
			echo ""
			cat ${file_each}
			echo ""
			echo "file:${file_each}"
			echo "====================================================="
		done
	done	
	return 0
}

function fm-document_cat
{
	local doc_file_path=${fengming_documents_dir}
	
	if [ $# -lt 1 ];then tree -L 1 ${doc_file_path};return 0;fi
	if [ $1 = "-a" ] || [ $1 = "--all" ]
	then
		tree -sh ${doc_file_path}
		return 0
	elif [ $1 = "-h" ] || [ $1 = "--help" ]
	then
		echo "SYNOPSIS:"
		echo "         ${FUNCNAME}  file_prefix / sub_dir_name_suffix"
		echo "example:"
		echo "        ${FUNCNAME}  docker"
		echo "        ${FUNCNAME}  image_build"
		return 1
	fi
	#point to sub dir 
	if [ -d ${doc_file_path}/${1} ] && [ $# -eq 2 ]
	then
		#check text file
		txt_file=$(find ${doc_file_path}/${1} -type f -iname "*${2}*" -o -type l -iname "*${2}*")
		if [ "x${txt_file}" != x ]
		then
			for file_each in ${txt_file}
			do
				echo "start >>>"
				cat ${file_each}
				echo "end <<<"
				echo "file:${file_each}"
			done
		fi
		return 0
	fi

	local parameter=$@
	local txt_file="none"
	local dir_file="none"
	for file in ${parameter}
	do
		#check dir first
		dir_file=$(find ${doc_file_path} -type d -iname "*${file}*")
		if [ "x${dir_file}" != x ]
		then
			for dir in ${dir_file}
			do
				tree -sh ${dir}
			done
			continue
		fi
		#check text file
		txt_file=$(find ${doc_file_path} -type f -iname "*${file}*" -o -type l -iname "*${file}*")
		if [ "x${txt_file}" != x ]
		then
			for file_each in ${txt_file}
			do
				echo "start >>>"
				cat ${file_each}
				echo "end <<<"
				echo "file:${file_each}"
			done
		fi
	done
	return 0
}

function fm-document_grep
{
	local doc_file_path=${fengming_documents_dir}
	
	#check para
	if [ $# -lt 1 ]
	then
		echo "e.g $FUNCNAME  keyword"
		return 1
	fi
	echo "grep -rn $* ${doc_file_path}"
	grep -rn "$*" ${doc_file_path}

	return 0
}
function fm-docker_cmd_help
{
	local docker_path=${fengming_documents_dir}/sub_doc_docker
	if [ $# -lt 1 ];then tree ${docker_path};return 0;fi
	if [ $1 = "-h" ] || [ $1 = "--help" ]
	then
		echo "SYNOPSIS:"
		echo "         ${FUNCNAME}  cmd_prefix / sub_dir_name_suffix"
		echo "example:"
		echo "        ${FUNCNAME}  images"
		echo "        ${FUNCNAME}  volume"
		return 1
	fi
	local parameter=$@
	local txt_file="none"
	local dir_file="none"
	for file in ${parameter}
	do
		#check dir first
		dir_file=$(find ${docker_path} -type d -iname "*${file}*")
		if [ "x${dir_file}" != x ]
		then
			for dir in ${dir_file}
			do
				tree -sh ${dir}
			done
			continue
		fi
		#check text file
		txt_file=$(find ${docker_path} -type f -iname "*${file}*" -o -type l -iname "*${file}*")
		if [ "x${txt_file}" != x ]
		then
			for file_each in ${txt_file}
			do
				echo "start >>>"
				cat ${file_each}
				echo "end <<<"
				echo "file:${file_each}"
			done
		fi
	done
	return 0
}
function fm-libcmd_help
{
	local lib_top_path=${fengming_documents_dir}/sub_doc_c_library
	if [ $# -lt 1 ];then tree ${lib_top_path};return 0;fi
	if [ $1 = "-h" ] || [ $1 = "--help" ]
	then
		echo "SYNOPSIS:"
		echo "         ${FUNCNAME}  cmd_suffix"
		echo "example:"
		echo "        ${FUNCNAME}  nm"
		return 1
	fi
	local parameter=$@
	local txt_file="none"
	for file in ${parameter}
	do
		if [ -f ${lib_top_path}/${file} ]
		then
				echo "start >>>"
				cat ${lib_top_path}/${file}
				echo "end <<<"
				echo "file:${lib_top_path}/${file}"
				return 0
		fi
		#check text file
		txt_file=$(find ${lib_top_path} -type f -iname "clibrary_${file}*" -o -type l -iname "clibrary_${file}*")
		if [ "x${txt_file}" != x ]
		then
			for file_each in ${txt_file}
			do
				echo "start >>>"
				cat ${file_each}
				echo "end <<<"
				echo "file:${file_each}"
			done
		fi
	done
	return 0
}
function fm-software_list
{
	local sorftware_tutorial_dir=${fengming_top_dir}/sorftware_toolket
	local target_file=base_software_list.json
	if [ ! -f ${sorftware_tutorial_dir}/${target_file} ];then echo "${target_file} not exist.";return 1;fi

	cat ${sorftware_tutorial_dir}/${target_file}

	return 0
}


function fm-software_install_tutorial
{
	local sorftware_tutorial_dir=${fengming_top_dir}/sorftware_toolket
	
	#check paramter
	if [ $# -lt 1 ];then tree  ${sorftware_tutorial_dir};return 1;fi
    if [ $1 = "-h" ] || [ $1 = "--help" ]
    then
        echo "DESCRIPTION:软件的安装教程"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  [name / keyword]  //关键字或软件名称"
        return 0
    fi

	local parameter=$@
	local tutor_file="none"
	for file in ${parameter}
	do
		if [ -d ${sorftware_tutorial_dir}/${file} ]
		then
			tree ${sorftware_tutorial_dir}/${file}
			continue
		fi
		tutor_file=$(find ${sorftware_tutorial_dir} -type f -iname "*${file}*" -o  -type l -iname "*${file}*")
		if [ "x${tutor_file}" = x ];then echo "ERROR:no found ${file} toturial file";return 2;fi
		for file_each in ${tutor_file}
		do
			echo "start >>>"
			cat ${file_each}
			echo "end <<<"
			echo "file:${file_each}"
		done
	done
	return 0
}

function fm-install_script_exec
{
	local sorftware_install_dir=${fengming_top_dir}/sorftware_install
	local install_script_dir=${sorftware_install_dir}/install_script

	#check paramter
	if [ $# -lt 1 ]
	then 
		echo "----------------------------------"
		tree  ${install_script_dir}
		echo "path=${install_script_dir}"
		echo ""
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  [tool_name]  //软件名称"
		return 1
	fi
    if [ $1 = "-h" ] || [ $1 = "--help" ]
    then
        echo "DESCRIPTION:install tools by script"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  [tool_name]  //软件名称"
        return 1
    fi

	local parameter=$@
	local script_file="none"
	for file in ${parameter}
	do
		script_file=$(find ${install_script_dir} -type f -iname "*${file}*.sh")
		if [ "x${script_file}" = x ];then echo "ERROR:no found ${file} script file";return 2;fi
		for file_each in ${script_file}
		do
			echo "exec:${file_each}"
			if [ -x ${file_each} ] 
			then
				${file_each}
			else
				echo "ERROR:${file_each} can not exec"
				ls -lh ${file_each}
			fi
			
		done
	done
	return 0
}

function fm-convert_linux_windows_path
{
	if [ $# -ne 1  ]
	then
		echo "ERROR:parameter wrong!!"
		echo "e.p:"
		echo "$0  /root/test.txt    --> \\root\\test.txt"
		echo "$0 'D:\\root\\test.txt' --> /root/test.txt"
		return 1
	fi

	local org_path=$1
	local tmp=$(echo $org_path  | grep / )
	local islinux_path=
	if [ "x$tmp" = x  ]
	then
		islinux_path=no
	else
		islinux_path=yes
	fi
	
	local new_path=
	if [ $islinux_path = yes  ]
	then
		new_path=$(echo $org_path | sed 's#/#\\#g')
	else
		new_path=$(echo $1 | sed -e 's#^[A-Z]:##' -e 's#\\#/#g')
	fi

	echo $new_path
	return 0
}

function fm-pwd
{
	local linux_pwd=${PWD}
	local win_pwd=$(echo ${linux_pwd} | sed 's#/#\\#g')

	echo "linux   --- ${linux_pwd}"
	echo "windows --- ${win_pwd}"
	return 0
}

function fm-realpath
{
	if [ $# -lt 1  ];then echo "ERROR:parmeter missing",echo "$FUNCNAME file/dir";return 1;fi
	local tool=realpath
	which ${tool} > /dev/null
	if [ $? -ne 0  ];then echo "ERROR:${tool} no found!!";return 2;fi
	for path in $*
	do
		local linux_path=$(${tool} ${path})
		if [ x"${linux_path}" != "x"  ]
		then
			if [ -e ${linux_path} ]
			then
				echo "linux   --- ${linux_path}"
			fi
		fi
	done
	for path in $*
	do
		local linux_path=$(${tool} ${path})
		if [ x"${linux_path}" != "x"  ]
		then
			if [ -e ${linux_path} ]
			then
				local win_path=$(echo ${linux_path} | sed 's#/#\\#g')
				echo "windows --- ${win_path}" 
			fi				
		fi
	done
	return 0
}

function fm-find
{

	return 0

}

function fm-time_zone_update
{
	local app=ntpdate
	local zonefile=/usr/share/zoneinfo/Asia/Shanghai
	local target_file=/etc/localtime 

	which ${app} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${FUNCNAME},${app} not found"
		echo "please install ${app}"
		echo "sudo apt install ${app}"
		return 1
	fi
	#copy zonefile
	if [ ! -f ${zonefile} ];then echo "ERROR:${FUNCNAME},${zonefile} not exist!";return 2;fi

	cp -vf ${zonefile} ${target_file}

	#update time from servers
	local time_server_array=("ntp.ntsc.ac.cn" "ntp1.aliyun.com" "ntp.fudan.edu.cn")
	for server in $(echo ${time_server_array[*]})
	do
		echo "try to connecting time server:${server}"
		ntpdate -u  ${server}
		if [ $? -eq 0 ]
		then
			break
		fi
	done
	
	return 0
}

function fm-download_whole_website
{
	local tool=wget
	which ${tool} > /dev/null
	if [ $? != 0 ];then echo "ERROR:${tool} not found!!";return 1;fi
	
	if [ $# -lt 1 ];then echo "ERROR:paramter missing!!";echo "$FUNCNAME URL";return 2;fi
	
	echo "${tool} -r -p -np -k $*"
	${tool} -r -p -np -k $*

	return 0
}

function fm-mount_iso
{
	if [ $# -lt 2 ] || [ $1 = "-h" ] || [ $1 = "--help" ]
	then
		echo "parameter wrong!"
		echo "$FUNCNAME  iso_file/iso_dev  mount_dir"
		echo "e.g. $FUNCNAME  file.iso  /media/cdrom0"
		return 1
	fi

	local iso="$1"
	local mount_dir="$2"
	if [ ! -f ${iso} ];then echo "file:${iso} not found";return 2;fi
	if [ ! -d ${mount_dir} ];then echo "mount dir not exit";return 2;fi

	if [ $(id -u) -eq 0 ]
	then
		echo "mount -o loop -t iso9660 ${iso} ${mount_dir}"
		mount -o loop -t iso9660 ${iso} ${mount_dir}
	else
		echo "sudo mount -o loop -t iso9660 ${iso} ${mount_dir}"
		sudo mount -o loop -t iso9660 ${iso} ${mount_dir}
	fi
	return 0
}

function fm-mount_nfs
{
	if [ $# -lt 3 ] || [ $1 = "-h" ] || [ $1 = "--help" ]
	then
		echo "parameter wrong!"
		echo "$FUNCNAME  ip  src_dir  mount_dir"
		echo "e.g. $FUNCNAME  192.168.254.3 /srv/nfs  /mnt/nfs"
		return 1
	fi

	local ip="$1"
	local src_dir="$2"
	local mount_dir="$3"
	if [ ! -d ${mount_dir} ];then echo "mount point not exit";return 1;fi

	if [ $(id -u) -eq 0 ]
	then
		echo "mount -t nfs -o nolock ${ip}:${src_dir} ${mount_dir}"
		mount -t nfs -o nolock ${ip}:${src_dir} ${mount_dir}
	else
		echo "sudo mount -t nfs -o nolock ${ip}:${src_dir} ${mount_dir}"
		sudo mount -t nfs -o nolock ${ip}:${src_dir} ${mount_dir}
	fi
	return 0
}
function fm-mount_samba
{
	if [ $# -lt 2 ] || [ $1 = "-h" ] || [ $1 = "--help" ]
	then
		echo "parameter wrong!"
		echo "$FUNCNAME  src_dir  mount_dir"
		echo "e.g. $FUNCNAME  media_dir  samba1"
		return 1
	fi

	local src_dir="$1"
	local mount_dir="$2"

	local ip="none"
	local username="none"
	local password="none"
	read -p "smb server IP:"  ip
	if [ "x${ip}" = x ];then echo "SMB server IP cannot be empty!";return 1;fi

	read -p "username:[root]" username
	if [ "x${username}" = x ];then username=root;fi

	read -s -p "password:[samba]" password
	if [ "x${password}" = x ];then password=samba;fi
	echo " "
	if [ ! -d ${mount_dir} ];then echo "mount point not exist";return 2;fi

	if [ $(id -u) -eq 0 ]
	then
		echo "mount -t cifs -o username=${username},password=********,vers=2.0 //${ip}/${src_dir}  ${mount_dir}"
		mount -t cifs -o username=${username},password=${password},vers=2.0 //${ip}/${src_dir}  ${mount_dir}
	else
		echo "sudo mount -t cifs -o username=${username},password=********,vers=2.0 //${ip}/${src_dir}  ${mount_dir}"
		sudo mount -t cifs -o username=${username},password=${password},vers=2.0 //${ip}/${src_dir}  ${mount_dir}
	fi
	return 0
}

echo "*******************************************"
echo "****  fengming.d  environment  loaded  ****"
echo "*******************************************"
