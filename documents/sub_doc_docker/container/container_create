
docker container create
Description	Create a new container
Usage	docker container create [OPTIONS] IMAGE [COMMAND] [ARG...]
Aliases docker create

Description

The docker container create (or shorthand: docker create) command creates a new container from the specified image, without starting it.

When creating a container, the Docker daemon creates a writeable container layer over the specified image and prepares it for running the specified command. The container ID is then printed to STDOUT. This is similar to docker run -d except the container is never started. You can then use the docker container start (or shorthand: docker start) command to start the container at any point.

This is useful when you want to set up a container configuration ahead of time so that it's ready to start when you need it. The initial status of the new container is created.

The docker create command shares most of its options with the docker run command (which performs a docker create before starting it). Refer to the docker run CLI reference for details on the available flags and options.
Options
Option	Default	Description
--add-host		Add a custom host-to-IP mapping (host:ip)
--annotation		API 1.43+ Add an annotation to the container (passed through to the OCI runtime)
-a, --attach		Attach to STDIN, STDOUT or STDERR
--blkio-weight		Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)
--blkio-weight-device		Block IO weight (relative device weight)
--cap-add		Add Linux capabilities
--cap-drop		Drop Linux capabilities
--cgroup-parent		Optional parent cgroup for the container
--cgroupns		API 1.41+ Cgroup namespace to use (host|private)
'host': Run the container in the Docker host's cgroup namespace
'private': Run the container in its own private cgroup namespace
'': Use the cgroup namespace as configured by the
default-cgroupns-mode option on the daemon (default)
--cidfile		Write the container ID to the file
--cpu-count		CPU count (Windows only)
--cpu-percent		CPU percent (Windows only)
--cpu-period		Limit CPU CFS (Completely Fair Scheduler) period
--cpu-quota		Limit CPU CFS (Completely Fair Scheduler) quota
--cpu-rt-period		API 1.25+ Limit CPU real-time period in microseconds
--cpu-rt-runtime		API 1.25+ Limit CPU real-time runtime in microseconds
-c, --cpu-shares		CPU shares (relative weight)
--cpus		API 1.25+ Number of CPUs
--cpuset-cpus		CPUs in which to allow execution (0-3, 0,1)
--cpuset-mems		MEMs in which to allow execution (0-3, 0,1)
--device		Add a host device to the container
--device-cgroup-rule		Add a rule to the cgroup allowed devices list
--device-read-bps		Limit read rate (bytes per second) from a device
--device-read-iops		Limit read rate (IO per second) from a device
--device-write-bps		Limit write rate (bytes per second) to a device
--device-write-iops		Limit write rate (IO per second) to a device
--disable-content-trust	true	Skip image verification
--dns		Set custom DNS servers
--dns-option		Set DNS options
--dns-search		Set custom DNS search domains
--domainname		Container NIS domain name
--entrypoint		Overwrite the default ENTRYPOINT of the image
-e, --env		Set environment variables
--env-file		Read in a file of environment variables
--expose		Expose a port or a range of ports
--gpus		API 1.40+ GPU devices to add to the container ('all' to pass all GPUs)
--group-add		Add additional groups to join
--health-cmd		Command to run to check health
--health-interval		Time between running the check (ms|s|m|h) (default 0s)
--health-retries		Consecutive failures needed to report unhealthy
--health-start-interval		API 1.44+ Time between running the check during the start period (ms|s|m|h) (default 0s)
--health-start-period		API 1.29+ Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)
--health-timeout		Maximum time to allow one check to run (ms|s|m|h) (default 0s)
--help		Print usage
-h, --hostname		Container host name
--init		API 1.25+ Run an init inside the container that forwards signals and reaps processes
-i, --interactive		Keep STDIN open even if not attached
--io-maxbandwidth		Maximum IO bandwidth limit for the system drive (Windows only)
--io-maxiops		Maximum IOps limit for the system drive (Windows only)
--ip		IPv4 address (e.g., 172.30.100.104)
--ip6		IPv6 address (e.g., 2001:db8::33)
--ipc		IPC mode to use
--isolation		Container isolation technology
--kernel-memory		Kernel memory limit
-l, --label		Set meta data on a container
--label-file		Read in a line delimited file of labels
--link		Add link to another container
--link-local-ip		Container IPv4/IPv6 link-local addresses
--log-driver		Logging driver for the container
--log-opt		Log driver options
--mac-address		Container MAC address (e.g., 92:d0:c6:0a:29:33)
-m, --memory		Memory limit
--memory-reservation		Memory soft limit
--memory-swap		Swap limit equal to memory plus swap: '-1' to enable unlimited swap
--memory-swappiness	-1	Tune container memory swappiness (0 to 100)
--mount		Attach a filesystem mount to the container
--name		Assign a name to the container
--network		Connect a container to a network
--network-alias		Add network-scoped alias for the container
--no-healthcheck		Disable any container-specified HEALTHCHECK
--oom-kill-disable		Disable OOM Killer
--oom-score-adj		Tune host's OOM preferences (-1000 to 1000)
--pid		PID namespace to use
--pids-limit		Tune container pids limit (set -1 for unlimited)
--platform		API 1.32+ Set platform if server is multi-platform capable
--privileged		Give extended privileges to this container
-p, --publish		Publish a container's port(s) to the host
-P, --publish-all		Publish all exposed ports to random ports
--pull	missing	Pull image before creating (always, |missing, never)
-q, --quiet		Suppress the pull output
--read-only		Mount the container's root filesystem as read only
--restart	no	Restart policy to apply when a container exits
--rm		Automatically remove the container and its associated anonymous volumes when it exits
--runtime		Runtime to use for this container
--security-opt		Security Options
--shm-size		Size of /dev/shm
--stop-signal		Signal to stop the container
--stop-timeout		API 1.25+ Timeout (in seconds) to stop a container
--storage-opt		Storage driver options for the container
--sysctl		Sysctl options
--tmpfs		Mount a tmpfs directory
-t, --tty		Allocate a pseudo-TTY
--ulimit		Ulimit options
-u, --user		Username or UID (format: <name|uid>[:<group|gid>])
--userns		User namespace to use
--uts		UTS namespace to use
-v, --volume		Bind mount a volume
--volume-driver		Optional volume driver for the container
--volumes-from		Mount volumes from the specified container(s)
-w, --workdir		Working directory inside the container
Examples
Create and start a container

The following example creates an interactive container with a pseudo-TTY attached, then starts the container and attaches to it:

 docker container create -i -t --name mycontainer alpine
6d8af538ec541dd581ebc2a24153a28329acb5268abe5ef868c1f1a261221752

 docker container start --attach -i mycontainer
/ # echo hello world
hello world

The above is the equivalent of a docker run:

 docker run -it --name mycontainer2 alpine
/ # echo hello world
hello world

Initialize volumes

Container volumes are initialized during the docker create phase (i.e., docker run too). For example, this allows you to create the data volume container, and then use it from another container:

 docker create -v /data --name data ubuntu

240633dfbb98128fa77473d3d9018f6123b99c454b3251427ae190a7d951ad57

 docker run --rm --volumes-from data ubuntu ls -la /data

total 8
drwxr-xr-x  2 root root 4096 Dec  5 04:10 .
drwxr-xr-x 48 root root 4096 Dec  5 04:11 ..

Similarly, create a host directory bind mounted volume container, which can then be used from the subsequent container:

 docker create -v /home/docker:/docker --name docker ubuntu

9aa88c08f319cd1e4515c3c46b0de7cc9aa75e878357b1e96f91e2c773029f03

 docker run --rm --volumes-from docker ubuntu ls -la /docker

total 20
drwxr-sr-x  5 1000 staff  180 Dec  5 04:00 .
drwxr-xr-x 48 root root  4096 Dec  5 04:13 ..
-rw-rw-r--  1 1000 staff 3833 Dec  5 04:01 .ash_history
-rw-r--r--  1 1000 staff  446 Nov 28 11:51 .ashrc
-rw-r--r--  1 1000 staff   25 Dec  5 04:00 .gitconfig
drwxr-sr-x  3 1000 staff   60 Dec  1 03:28 .local
-rw-r--r--  1 1000 staff  920 Nov 28 11:51 .profile
drwx--S---  2 1000 staff  460 Dec  5 00:51 .ssh
drwxr-xr-x 32 1000 staff 1140 Dec  5 04:01 docker
==========================================================================
创建新容器

别名：
  docker container create, docker create

选项：
      --add-host list                  添加自定义主机到 IP 的映射 (host:ip)
  -a, --attach list                    连接到 STDIN、STDOUT 或 STDERR
      --blkio-weight uint16            块 IO（相对权重），介于 10 和 1000 之间，或 0 表示禁用（默认值 0)
      --blkio-weight-device list       块 IO 权重（相对设备权重）（默认值 [])
      --cap-add list                   添加 Linux 功能
      --cap-drop list                  删除 Linux 功能
      --cgroup-parent string           容器的可选父 cgroup
      --cgroupns string                要使用的 Cgroup 命名空间 (host|private)
                                       'host':    在 Docker 主机的 cgroup 命名空间中运行容器
                                       'private': 在容器自己的私有 cgroup 命名空间中运行容器
                                       '':        使用由守护程序上的默认 cgroupns-mode 选项（默认）
      --cidfile string                 将容器 ID 写入文件
      --cpu-period int                 限制 CPU CFS（完全公平调度程序）周期
      --cpu-quota int                  限制 CPU CFS（完全公平调度程序）配额
      --cpu-rt-period int              限制 CPU 实时周期（以微秒为单位）
      --cpu-rt-runtime int             限制 CPU 实时运行时间（以微秒为单位）
  -c, --cpu-shares int                 CPU 份额（相对权重）
      --cpus decimal                   处理器数量
      --cpuset-cpus string             允许执行的 CPU (0-3, 0,1)
      --cpuset-mems string             允许执行的 MEM (0-3, 0,1)
      --device list                    将主机设备添加到容器
      --device-cgroup-rule list        将规则添加到 cgroup 允许的设备列表
      --device-read-bps list           限制设备的读取速率（每秒字节数）（默认值 []）
      --device-read-iops list          限制设备的读取速率（每秒 IO）（默认值 []）
      --device-write-bps list          限制设备的写入速率（每秒字节数）（默认值 []）
      --device-write-iops list         限制设备的写入速率（每秒 IO）（默认值 []）
      --disable-content-trust          跳过图像验证（默认为 true）
      --dns list                       设置自定义 DNS 服务器
      --dns-option list                设置 DNS 选项
      --dns-search list                设置自定义 DNS 搜索域
      --domainname string              容器 NIS 域名
      --entrypoint string              覆盖映像的默认入口点
  -e, --env list                       设置环境变量
      --env-file list                  读入环境变量文件
      --expose list                    公开一个或多个端口范围
      --gpus gpu-request               GPU devices to add to the container ('all' to pass all GPUs)
      --group-add list                 添加要加入的其他组
      --health-cmd string              要运行以检查运行状况的命令
      --health-interval duration       运行检查之间的时间 （ms|s|m|h） （默认为 0s）
      --health-retries int             报告不正常所需的连续失败
      --health-start-period duration   容器在开始运行状况重试倒计时之前初始化的开始周期 （ms|s|m|h）（默认值 0s）
      --health-timeout duration        允许运行一次检查的最长时间 （ms|s|m|h）（默认为 0s）
      --help                           打印使用情况
  -h, --hostname string                容器主机名
      --init                           在容器内运行一个 init，转发信号并收获进程
  -i, --interactive                    即使未连接，也保持 STDIN 打开
      --ip string                      IPv4 address (e.g., 172.30.100.104)
      --ip6 string                     IPv6 address (e.g., 2001:db8::33)
      --ipc string                     IPC mode to use
      --isolation string               容器隔离技术
      --kernel-memory bytes            内核内存限制
  -l, --label list                     在容器上设置元数据
      --label-file list                读取以行分隔的标签文件
      --link list                      添加指向另一个容器的链接
      --link-local-ip list             容器 IPv4/IPv6 链路本地地址
      --log-driver string              容器的日志记录驱动程序
      --log-opt list                   日志驱动程序选项
      --mac-address string             容器 MAC 地址 (e.g., 92:d0:c6:0a:29:33)
  -m, --memory bytes                   内存限制
      --memory-reservation bytes       内存软限制
      --memory-swap bytes              Swap limit equal to memory plus swap: '-1' to enable unlimited swap
      --memory-swappiness int          调整容器内存交换（0 到 100）（默认值 -1）
      --mount mount                    将文件系统挂载附加到容器
      --name string                    为容器指定名称
      --network network                将容器连接到网络
      --network-alias list             为容器添加网络范围的别名
      --no-healthcheck                 Disable any container-specified HEALTHCHECK
      --oom-kill-disable               Disable OOM Killer
      --oom-score-adj int              Tune host's OOM preferences (-1000 to 1000)
      --pid string                     要使用的 PID 命名空间
      --pids-limit int                 调整容器 pids 限制（设置为 -1 表示无限制）
      --platform string                如果服务器支持多平台，则设置平台
      --privileged                     向此容器授予扩展权限
  -p, --publish list                   将容器的端口发布到主机
  -P, --publish-all                    将所有公开的端口发布到随机端口
      --pull string                    创建前拉取镜像 ("always", "|missing", "never") (default "missing")
  -q, --quiet                          抑制拉取输出
      --read-only                      将容器的根文件系统挂载为只读
      --restart string                 重新启动要在容器退出时应用的策略（默认 "no")
      --rm                             容器退出时自动移除容器
      --runtime string                 用于此容器的运行时
      --security-opt list              安全选项
      --shm-size bytes                 大小 /dev/shm
      --stop-signal string             停止容器的信号
      --stop-timeout int               停止容器的超时（以秒为单位）
      --storage-opt list               容器的存储驱动程序选项
      --sysctl map                     系统选项（默认 map[])
      --tmpfs list                     挂载 tmpfs 目录
  -t, --tty                            分配伪 TTY
      --ulimit ulimit                  Ulimit 选项（默认 [])
  -u, --user string                    用户名或 UID（格式：<name|uid>[:<group|gid>])
      --userns string                  要使用的用户命名空间
      --uts string                     要使用的 UTS 命名空间
  -v, --volume list                    绑定装载卷
      --volume-driver string           容器的可选卷驱动程序
      --volumes-from list              从指定的容器装载卷
  -w, --workdir string                 容器内的工作目录
==========================================================================
关键字：
重要简述：
使用docker create新建的容器处于停止状态，可以使用dockers start命令来启动它。
docker run命令等价于先执行docker create命令，再执行docker start命令。

实例：