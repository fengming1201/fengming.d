介绍
Crosstool-NG旨在构建工具链。工具链是必不可少的 软件开发项目中的组件。它将编译，组装和 链接正在开发的代码。工具链的某些部分将 最终最终出现在生成的二进制文件中：静态库只是一个 例。

因此，工具链是一个非常敏感的软件，就像其中一个中的任何错误一样 组件或配置不当的组件可能会导致执行问题， 从性能不佳到应用程序意外结束，到 行为不端的软件（通常很难检测到），到硬件 损害，甚至是对人类风险的损害（这非常令人遗憾）。

工具链由不同的软件组成，每个软件都非常复杂 并且需要特制的选项才能无缝构建和工作。这是 通常不是那么容易，即使在原生工具链的不那么平凡的情况下也是如此。 当涉及到时，这项工作达到了更高的复杂性 交叉编译，在那里它可能成为一场噩梦......

互联网上存在一些跨工具链，可用于一般 开发，但它们有许多限制：

它们可以是通用的，因为它们被配置为 大多数：没有针对您的特定目标进行优化。

它们可以针对特定目标做好准备，因此并不容易 使用，或优化，甚至支持您的目标。

他们经常使用老化的组件（编译器、C 库等）。 不支持闪亮的新处理器的特殊功能。

另一方面，这些工具链提供了一些优势：

它们随时可用，并且非常易于安装和设置。

如果被广泛的社区使用，它们就会得到证明。

但是，一旦您想从特定硬件中获取所有汁液，您将 想要构建自己的工具链。这就是crosstool-NG发挥作用的地方。

还有许多工具可以为特定需求构建工具链， 这并不真正可扩展。例如：

buildroot，其主要目的是构建 根文件系统，因此得名。但是一旦你有了你的工具链 buildroot，其中一部分安装在未来的root中，所以如果你想 构建一个全新的根，您必须将现有根保存为 模板并稍后还原，或从头开始重新启动。这不是 方便。

PTXDIST，其 目的与 buildroot 非常相似。

其他项目（例如 openembedded.org）， 再次用于构建根文件系统。

crosstool-NG真正针对的是构建工具链，而且只是工具链。 然后由您决定以您想要的方式使用它。

历史
Crosstool最初是由Dan Kegel构思的，他将其提供给社区。 作为一组脚本、一个补丁存储库和一些预配置的常规 用于配置交叉工具的用途设置文件。这在 kegel.com/crosstool 和 Subversion 上可用 存储库托管在谷歌代码上。

Yann E. Morin曾经设法添加对基于uClibc的工具链的支持，但它 没有进入主线，主要是因为Yann没有时间移植 补丁转发到新版本，部分原因是它付出了巨大的努力 采取。

所以Yann决定清理原来的状态中的交叉工具，重新排序东西 到位，为他需要的东西添加适当的支持，即uClibc支持 以及菜单驱动的配置，命名为新的实现交叉工具-NG， （代表Crosstool Next Generation，就像许多其他社区项目一样， 并在电视剧《星际迷航：下一代》中眨眼;-）并制作 如果任何人感兴趣，社区可以使用它。

在2014年底，Yann开始忙于buildroot和其他项目，所以 Bryan Hundven选择成为crosstool-NG的新维护者。

指交叉工具-NG
该项目的长名称是crosstool-NG：

    没有前导大写（句子中的第一个单词除外），

    交叉工具和 NG 用连字符（破折号）分隔，

    大写的 NG。

Crosstool-NG也可以用它的简称CT-NG来指代：

    全部大写，

    CT 和 NG 用连字符（破折号）分隔。

长名称优先于短名称，邮件主题除外， 短名称更适合的地方。

当引用特定版本的交叉工具-NG时，附加 版本号为：

    crosstool-NG X.Y.Z（长名称、空格和版本字符串）

    crosstool-ng-X.Y.Z（长名称为小写，连字符（破折号）， 和版本字符串） – 用于命名发布压缩包

    crosstool-ng-X.Y.Z+git_id（小写的长名称，连字符， 版本字符串，以及由 返回的 Git ID。 – 这用于区分发布和快照ct-ng version

crosstool-NG的前端是命令：ct-ng

    全部为小写，

    CT 和 ng 用连字符（破折号）分隔。