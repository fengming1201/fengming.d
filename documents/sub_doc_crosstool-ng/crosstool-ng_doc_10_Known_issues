已知问题
此文件列出了在开发 crosstool-NG 时遇到的已知问题， 但这在发布之前无法解决。

该文件针对每个已知问题都有一个部分，每个部分包含四个 子部分：症状、说明、修复和解决方法。

每个部分与其他部分用至少 4 个破折号的行分隔。

下面的虚拟部分解释了这一切。

症状： 您将观察到的一行或两行内容。 通常，您会在构建日志中看到的错误消息。

解释： 尽可能深入地解释上下文，为什么 发生，到目前为止已经调查了什么，以及可能的方向 作为如何尝试解决这个问题（例如。网址、代码片段...

状态： 说明问题的状态：

未确认：缺少信息或无法复制，但存在 是共识，某处有问题...
当前 ：该问题适用。
已弃用：该问题曾经在某些情况下适用，但尚未 最近再次确认或报告。
已关闭：问题不再有效，并且已添加修复程序 作为此组件的补丁，和/或作为 脚本和/或配置中的解决方法。
修复： 如果可能的话，你必须做什么来修复它。 有一个修复程序，但这是一个已知问题的事实意味着 缺少将修复程序合并到 crosstool-NG 中的时间，或者计划用于 将来的版本。

解决方法： 如果可能的话，您可以采取哪些措施来暂时修复它。 解决方法不是真正的修复，因为它可能会破坏 crosstool-NG，但至少让你在你的特定情况下前进。

所以现在，关于真正的问题...

症状： 找不到 gcc，尽管我确实安装了 gcc。

解释： 这至少在RHEL系统上是一个问题，其中gcc是ccache的符号链接。 因为 crosstool-NG 为构建和主机环境创建了指向 gcc 的链接， 这些符号链接实际上指向ccache，然后它不知道如何 以运行编译器。

可能的修复可能会将环境变量CCACHE_CC设置为 实际使用的编译器。

状态： 当前

修复： 不得而知。

解决方法： 卸载缓存。

症状： 生成失败，并显示：unable to detect the exception model

解释： 在某些架构上，正确的堆栈展开 （C++） 需要 使用setjmp/longjmp （sjlj），而在其他架构上则不使用 需要 SJLJ。在某些架构上，gcc 无法确定是否 SJLJ是否需要。

状态： 当前

修复： 到目前为止还没有。

解决方法： 尝试将 sjlj 的使用设置为“Y”或“N”（而不是 默认“M”）在菜单配置中，选项标记为“使用 sjlj 表示异常”。CT_CC_GCC_SJLJ_EXCEPTIONS

症状： 在具有 86 位用户空间x64_32主机上，GMP 构建失败，并显示：

    configure: error: Oops, mp_limb_t is 32 bits, but the assembler code
    in this configuration expects 64 bits.
    You appear to have set $CFLAGS, perhaps you also need to tell GMP the
    intended ABI, see "ABI and ISA" in the manual.
说明：检测到x86_64但构建主机实际上是 x86。uname -m

状态： 当前

修复： 到目前为止还没有。请参阅上述问题。

解决方法： 使用“setarch i686 ct-ng 构建”