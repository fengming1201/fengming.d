有关特定工具链功能的说明
本节介绍特定于 交叉工具NG中的特殊功能。

GNU libc locales
GNU libc 不提供交叉编译目标系统语言环境数据的方法。 作为一种解决方法，crosstool-NG 为构建机器配置 glibc 和 在生成中生成区域设置，即使它们将在目标上使用。

这显然有警告：

生成计算机和目标计算机必须具有相同的字节序和相同的字节序 整数类型的大小。
这种方法不适用于 GNU libc 不支持的构建机器。 目前，GNU libc 语言环境在 macOS 和 Cygwin 上被禁用。
uClibc/uClibc-NG 配置
在 1.21.0 版之前，需要为 uClibc/uClibc-ng library.当前的交叉工具-NG版本可以生成此 基于菜单选择的配置文件。您仍然可以提供您的 自己的 uClibc 配置文件。

但请注意，在跨工具 NG 配置中所做的选择将是 应用于uClibc配置文件之上，以确保兼容性 的 uClibc 以及之后构建的目标组件。这也允许 
用户共享相同的uClibc基本配置文件并对其进行调整 对于使用交叉工具NG配置的不同目标。

uClibc 与较新的 GCC
uClibc（不是uClibc-ng）在使用GCC5编译时会产生无效的二进制文件 或更新（至少在 i686 架构上注意到）;应用 
针对生成的库运行时启动时出现段错误。 在编译基于 uClibc 的工具链时使用 GCC 4.9 或 4.8。

鉴于uClibc基本上是未维护的，这不太可能得到 曾经固定过。

多库注意事项
Crosstool-NG具有构建multilib工具链的实验性支持。 不过，有一些注意事项：

如果生成的库是 分散在单独的子目录中。例如，在 AArch64 上 GNU libc 将其动态链接器安装到 ，而其余的 
动态库安装在 中。Crosstool-NG提供了一个 将库合并为单个库的配置选项 目录;默认情况下，对于非多库构建，它处于打开状态。为
 multilib 构建，不建议打开它，除非你的 multilib 配置对所有变体使用单独的系统根。此时，只有 众所周知，SuperH架构可以做到这一点。/lib/lib64
从版本 2016.02 开始，Buildroot 拒绝工具链 存在于系统根中。此文件的生成是 在交叉工具NG中可选;但是，如果没有此文件，
则交叉LDD 帮助程序脚本将无法找到驻留的库依赖项 在默认值和目录之外。对此的修复 是计划之中的。/etc/ld.so.conf/lib/usr/lib
在x86上，当前的GNU libc版本在不同的 多库变体。较旧的 libc 版本具有冲突的标头，在 特定。如果您看到编译错误引用 
对于选定的 multilib 变体（例如，带有标志）的错误寄存器，所选版本的 GNU libc 太旧并且没有 支持多库。<ucontext.h>%rip-m32
某些架构在 GCC 中具有一组固定的多库。结果， 如果选定的 C 库（glibc、uclibc）不支持所有这些， 生成将失败。这不是交叉工具NG的问题。
使用 crosstool-NG 构建 Alpha 工具链
此示例生成与 C 运行时文件 （） 中的节相关的错误。工具链 编译正常，但生成的二进制文件可能存在问题。如果您使用 
此工具链和遇到任何问题，请告诉我们。alphaev67-unknown-linux-gnu.eh_frame_hdrcrt*.o

跨 GDB 中的 Python 脚本
Crosstool-NG提供了一个选项，可以在cross-GDB中启用Python脚本 对于主机。这需要主机的 Python 标头和库 可用。通常，这些来自或类似的 命名包。python-dev

对于加拿大（因此，对于跨原生）工具链，此配置 选项将导致生成失败，除非采取特殊步骤来 
将交叉编译的 Python 库和标头放置在编译器的位置 因为主机将能够找到它们。否则，生成将失败 也。

使用 crosstool-NG 构建 Xtensa 工具链
贡献者：Max Filippov

Xtensa 内核高度可配置：字节序、指令集、寄存器集 在处理器配置时选择内核。新寄存器和 设计人员可以添加指令，
使每个内核配置都独一无二。 工具链组件无法了解每个内核的功能，并且 需要配置以与特定架构兼容 变体。此配置包括：

定义汇编程序的指令格式、名称和属性， 反汇编器和调试器;
汇编器、反汇编器和 调试器;
选择预定义的特征，例如字节序、是否存在某些 编译器、调试器 C 库和操作系统的处理器选项或指令 内核;
带有指令序列的宏，用于保存和恢复特殊、用户或 操作系统内核的协处理器寄存器。
此配置以源文件的形式提供，必须替换 在 binutils、gcc、gdb 或 newlib 源代码树中或添加相应的文件 到操作系统内核源代码树。
这组文件通常作为存档分发 称为 Xtensa 配置覆盖。

Tensilica提供这样的覆盖作为处理器下载的一部分，但是， 它需要重新格式化以匹配所需的特定格式 交叉工具-NG。用于转换覆盖文件的脚本，以及其他 信息，请参阅此链接

当前版本的 crosstool-NG 要求覆盖文件名具有 格式 xtensa_.tar，其中CORE_NAME可以是任何用户选择的名称。 
要使交叉工具NG使用位于“/xtensa_.tar”的覆盖文件 选择XTENSA_CUSTOM，
将配置参数“CT_ARCH_XTENSA_CUSTOM_NAME”设置为 “CORE_NAME”和“CT_ARCH_XTENSA_CUSTOM_OVERLAY_LOCATION”到“路径”。

fsf 目标架构变体是工具链提供的配置 默认情况下的组件。它仅用于构建测试工具链 组件，绝不是特殊或通用的。