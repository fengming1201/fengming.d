工具链类型
您可能会遇到四种工具链。

首先，您必须了解以下内容：当涉及到编译器时 最多涉及四台计算机：

配置工具链组件的机器：配置机器
构建工具链组件的机器：构建机器
运行工具链的机器：主机
工具链为其生成代码的计算机：目标计算机
大多数时候我们可以假设配置机器和构建 机器是一样的。大多数时候，这将是真的。唯一的时间 如果您使用的是分布式编译（例如 Distcc），则不是。 为了简单起见，让我们忘记这一点。

所以我们只剩下三台机器：

建
主机
目标
任何工具链都将涉及这三台机器。你可以像你一样漂亮 确定这一点为“2 和 2 是 4”。以下是它们发挥作用的方式：

构建 == 主机 == 目标（“本机”)

这是一个普通的原生工具链，针对完全相同的机器 作为它构建的那个，并在此完全相同的基础上再次运行 机器。当你想使用 更新的组件，例如较新的 GCC。

构建 == 主机 ！= 目标（“交叉”)

这是一个经典的跨工具链，预计将在 编译它的同一台机器，并生成代码以在 第二台机器，目标。

构建 ！= 主机 == 目标（“跨本机”)

这样的工具链也是一个原生工具链，因为它针对相同的 机器运行时。但它是在另一台机器上构建的。你想要 这样的工具链在移植到新架构时，或者如果构建 机器比主机快得多。

构建 ！= 主机 ！= 目标（“加拿大”)

这个被称为“加拿大十字架”¹工具链，很棘手。 这三台机器是不同的。你可能想要这样的 工具链，如果你有一个快速构建的机器，但用户将使用 它在另一台机器上，并将生成在第三台机器上运行的代码 机器。

加拿大十字架一词的创造是因为当时这些 所有问题都在讨论中，加拿大有三个国家 政党（根据维基百科）。

crosstool-NG可以构建所有这些类型的工具链，或者正在瞄准它， 无论如何。不过，有一些注意事项。

在构建“原生”工具链的同时，crosstool-ng 目前仍将 为目标编译新版本的 libc。目前没有办法 使用系统 libc 和/或系统内核标头作为 工具链。如果您选择兼容版本（即 使用工具链编译的应用程序将加载系统 libc）。

“跨原生”工具链可以构建为“加拿大人”的微不足道的案例 工具链。它是次优的，因为它使crosstool-NG构建工具 以主机为目标两次（首先，作为单独的工具链 是所有加拿大建筑的先决条件;其次，作为临时的一部分 作为加拿大构建本身的一部分创建的工具链）。这可能会 将来会改进。

要构建“加拿大”工具链，您必须构建一个在构建上运行的工具链 并将主机作为先决条件（即简单的交叉）。然后，将此先决条件的目录添加到环境变量中，然后 配置加拿大语，指定先决条件工具链的目标 作为新工具链的主机。/bin$PATH

有一些加拿大工具链的样本随crosstool-NG一起提供。这 加拿大样本的名称由两个逗号分隔的部分组成，即 .他们需要样品作为前提。例如：HOST,TARGETHOST

ct-ng x86_64-w64-mingw32
ct-ng build
PATH=~/x-tools/x86_64-w64-mingw32/bin:$PATH
ct-ng x86_64-w64-mingw32,x86_64-pc-linux-gnu
ct-ng build
请注意，您将无法从加拿大工具链运行二进制文件 在您的构建机器上！您需要将它们传输到运行操作系统的计算机 配置为主机。