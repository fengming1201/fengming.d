
(1)git restore 和git checkout的区别
1. git restore：
git restore 是 Git 在 2.23 版本中引入的一个新命令，用于恢复文件的状态，目的是简化一些常见的操作，特别是与文件恢复相关的操作。它的作用更明确，分为两种常见用法
恢复工作区文件到上次提交的状态：
    git restore <file>
    这个命令会将指定的文件恢复到上次提交（HEAD）的版本，从而丢弃在工作区中的未暂存修改。

恢复暂存区的文件（即撤销 git add 操作）：
    git restore --staged <file>
    这个命令会将文件从暂存区撤回，但保留文件在工作区中的修改。
优势：
git restore 提供了更清晰、直观的命令来恢复文件。
相比 git checkout，它的作用更专注于工作区和暂存区的管理，避免了命令的多重用途导致的混乱。
可以清晰区分不同的恢复操作，减少了不小心更改分支或检查出的风险。

2. git checkout：
git checkout 是 Git 中一个历史悠久的命令，它用于：
切换分支：
    git checkout <branch>
    这会切换到指定的分支，工作区会更新为该分支的内容。

恢复文件的状态：
    git checkout <commit> -- <file>
    这个命令会将文件恢复到某次提交的状态，类似于 git restore，但用法相对不够直观。
优势：
git checkout 功能强大，支持更多高级操作（如切换分支、恢复文件到指定提交等）。
被广泛使用，很多老版本的 Git 用户习惯了这个命令。
3. 关键区别：
作用域：
git restore 仅专注于恢复文件的状态（工作区或暂存区），而 git checkout 功能多样，既能切换分支，也能恢复文件。
直观性：
git restore 在用法上更具可读性和简洁性，尤其在恢复文件时，可以清晰区分操作的范围（工作区、暂存区）。
git checkout 由于功能多样，可能导致误用，尤其是恢复文件的操作需要使用较为复杂的命令。
4. 何时使用：
使用 git restore：
恢复文件的状态或撤销暂存时。
当你不想切换分支，而只想恢复文件时。
如果你使用的是 Git 2.23 版本及以上，推荐使用 git restore，因为它更加直观。
使用 git checkout：
切换分支。
恢复文件到某次提交的状态，特别是恢复某个特定提交的文件时。


(2)git restore --staged <file>和git restore <file>的区别

1. git restore --staged <file>...
作用：将指定文件从 暂存区（staging area）恢复到 工作区（working directory）中，也就是说，它撤销 git add 操作，但不会影响工作区的文件内容。
适用场景：如果你已经用 git add 将文件添加到暂存区，但想要取消这一操作（即不再将这些文件提交到暂存区），可以使用该命令。
影响：文件内容不会变化，仅仅是取消暂存。

2. git restore <file>...
作用：将文件恢复到 上次提交（HEAD）的状态，也就是说，它将文件从工作区恢复到版本库的最后一次提交的状态，丢弃工作区的所有修改（不影响暂存区）。
适用场景：如果你对文件做了修改，但想放弃这些修改并恢复到最后一次提交的状态，可以使用此命令。
影响：文件内容会被重置到最后一次提交的内容，任何未暂存的更改将会丢失。

总结
git restore --staged <file>... 用来 取消暂存，不改变工作区文件。
git restore <file>...          用来 丢弃工作区修改，影响暂存区，恢复到最后一次提交的版本。