

(1)方式一：设置超时
timeout 命令来限制某个命令的执行时间。如果命令超过指定时间没有完成，timeout 会终止它

# 使用 timeout 限制 git clone 命令的执行时间为 30 秒
timeout 30s git clone URL

# 检查上一个命令的退出状态
if [ $? -eq 124 ]; then
    echo "git clone command timed out, moving on..."
else
    echo "git clone completed successfully."
fi


(2)方式二：捕捉信号
trap 命令可以用来捕获信号，并在接收到信号时执行特定的命令。

trap 'echo "Command timed out"; exit 1' SIGALRM
alarm 60
git clone URL
alarm 0

或
#!/bin/bash

url_list=("url1" "url2" "url3")

# 定义一个函数来处理超时
timeout_handler() {
    echo "Command timed out. Killing process..."
    kill -9 $pid 2>/dev/null
}

for new_url in "${url_list[@]}"; do
    echo "Cloning $new_url..."
    
    # 设置 trap 捕捉超时信号
    trap timeout_handler SIGALRM
    
    # 启动一个子 shell 来运行 git clone，并获取其 PID
    (
        trap '' SIGALRM
        git clone "$new_url" &
        pid=$!
        wait $pid
    ) &
    
    # 启动一个计时器，30 秒后发送 SIGALRM 信号
    (sleep 30 && kill -ALRM $$) & timer_pid=$!
    
    # 等待子 shell 完成
    wait $!
    
    # 取消计时器
    kill $timer_pid 2>/dev/null
    
    # 重置 trap
    trap - SIGALRM
    
    if [ $? -eq 0 ]; then
        echo "Successfully cloned $new_url."
    else
        echo "Failed to clone $new_url or it timed out."
    fi
done
============================================================
在 Shell 脚本中实现异步编程，可以通过以下几种方法：

### 1. 使用后台进程
你可以使用 `&` 将命令放入后台执行，这样可以异步运行多个任务。

```bash
#!/bin/bash

# 启动任务1
task1 &
# 启动任务2
task2 &
# 等待所有后台任务完成
wait
```

### 2. 使用子 Shell
子 Shell 可以在后台执行，并且可以通过 `()` 来创建。

```bash
#!/bin/bash

# 在子 Shell 中异步执行
(task1) &
(task2) &
wait
```

### 3. 使用 `nohup`
`nohup` 可以使进程在后台运行，且不受终端关闭影响。

```bash
#!/bin/bash

nohup task1 &
nohup task2 &
```

### 4. 使用 `disown`
在后台运行命令后，可以使用 `disown` 使其与当前 Shell 会话脱离。

```bash
#!/bin/bash

task1 &
disown
task2 &
disown
```

### 5. 使用 `xargs` 并行执行
`xargs` 可以与 `-P` 参数结合使用，实现并行执行。

```bash
#!/bin/bash

# 并行执行多个命令
echo -e "task1\ntask2\ntask3" | xargs -P 3 -I {} bash -c '{}'
```

### 6. 使用 `GNU Parallel`
`GNU Parallel` 是一个强大的工具，可以用于并行执行命令。

```bash
#!/bin/bash

# 使用 GNU Parallel
parallel ::: task1 task2 task3
```

### 注意事项
- 异步任务的输出可能会混杂在一起，可以使用重定向将输出分别保存到不同的文件中。
- 使用 `wait` 命令可以等待所有后台任务完成。
- 确保异步任务之间没有资源竞争或依赖关系。

这些方法可以帮助你在 Shell 脚本中实现异步编程，提高脚本的执行效率。