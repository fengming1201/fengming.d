Usage: rasm2 [-ACdDehHLBvw] [-a arch] [-b bits] [-s addr] [-S syntax]
   [-f file] [-o file] [-F fil:ter] [-i skip] [-l len] 'code'|hex|0101b|-
 -a [arch]    set architecture to assemble/disassemble (see -L)
 -A           show Analysis information from given hexpairs
 -b [bits]    set cpu register size (8, 16, 32, 64) (RASM2_BITS)
 -B           binary input/output (-l is mandatory for binary input)
 -c [cpu]     select specific CPU (depends on arch)
 -C           output in C format
 -d, -D       disassemble from hexpair bytes (-D show hexpairs)
 -e           use big endian instead of little endian
 -E           display ESIL expression (same input as in -d)
 -f [file]    read data from file
 -F [parser]  specify which parse filter use (see -LL)
 -h, -hh      show this help, -hh for long
 -H ([var])   display variable
 -i [len]     ignore/skip N bytes of the input buffer
 -j           output in json format
 -k [kernel]  select operating system (linux, windows, darwin, android, ios, ..)
 -l [len]     input/Output length
 -L ([name])  list RArch plugins: (a=asm, d=disasm, e=esil)
 -LL ([name]) list RAsm parse plugins
 -N           same as r2 -N (or R2_NOPLUGINS) (not load any plugin)
 -o [file]    output file name (rasm2 -Bf a.asm -o a)
 -p           run SPP over input for assembly
 -q           quiet mode
 -r           output in radare commands
 -s,-@ [addr] define initial start/seek address (default 0)
 -S [syntax]  select syntax (intel, att)
 -v           show version information
 -x           use hex dwords instead of hex pairs when assembling.
 -w           what's this instruction for? describe opcode
 If '-l' value is greater than output length, output is padded with nops
 If the last argument is '-' reads from stdin
Environment:
R2_NOPLUGINS	do not load shared plugins (speedup loading)
R2_LOG_LEVEL	change the log level
R2_DEBUG	if defined, show error messages and crash signal
R2_DEBUG_ASSERT	lldb -- r2 to get proper backtrace of the runtime assert
RASM2_ARCH	same as rasm2 -a
RASM2_BITS	same as rasm2 -b
