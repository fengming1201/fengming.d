
{
    将内容发送到另一个终端窗口显示

    程序员在他们的计算机上使用多个物理屏幕来同时进行多项开发活动。一些程序员在这些屏幕上打开多个终端窗口。
    同时，一些程序员通常在同一个物理屏幕上使用多个终端窗口。如果我们需要将特定命令的输出发送到另一个现有的终端窗口怎么办？
    原理：
    每个GUI终端程序实例都连接到一个称为伪终端文件的设备文件。这些伪终端文件帮助GUI终端从子进程发送和捕获I/O数据。
    打开终端窗口并输入以下命令以查看所有可用的伪终端设备：

    已经打开了8个终端，如下：
    # ls /dev/pts/
    0  1  2  3  4  5  6  7  ptmx

    当前终端使用/dev/pts/0文件处理进程的I/O数据——您可以使用tty命令来查看当前的伪终端号。
    # tty
    /dev/pts/7

    使用这个实验概念，现在您可以将命令输出直接发送到另一个现有终端窗口，反之亦然，如下所示。
    #echo "hello world"  > /dev/pts/0
    向0号终端发送“hello world” 
    结合tee命令，即可以在本地显示，又可以发送到其他终端。
},
{
    linux下神奇的script命令-录屏
    script 是一个神奇命令，script 能够将终端的会话过程录制下来，然后使用 scriptreplay 就可以将其录制的结果播放给他人观看。
    script 的好处就在于你在终端中的所有操作、敲过的命令和打印出的结果它都可以原原本本地进行录制。可以应用于教学、演示、审计。 
    一般来说，script 和 scriptreplay 在 Linux 发行版中都有默认安装。 
    #script -t 2>demo.time -a demo.his  //开始录像，ctrl+d或者exit结束 
    #scriptreplay demo.time demo.his    //回放 
    
    两个配置文件被当做script命令的参数。这两个文件可以随便命名，这里用demo.time和demo.his。
    其中
    demo.time用于存储时序信息，描述每一个指令在何时运行；
    demo.his用于存储命令信息输出。
    -t 选项用于将时序数据导入stderr。
    2>用于stderr重定向到demo.time。 
    参数:
    -t 指明输出录制的时间数据 
    -f 如果需要在输出到日志文件的同时，也可以查看日志文件的内容，可以使用 -f 参数。
    PS:可以用于教学,两个命令行接-f可以实时演示 
    -a 输出录制的文件，在现有内容上追加新的内容 
    -q  可以使script命令以静默模式运行  利用script记录某人行为 
    非常实用的例子：
    演示技巧：不同会话之间实时演示
    session1:mkfifo /tmp/scriptfifo    //建立管道
    session1:script -f /tmp/scriptfifo   //录入管道而不是文件。

    session2:cat /tmp/scriptfifo         //在另一个会话中一直读取管道中内容，也就是达到演示效果了，
},
{
    使用reptyr在screen中接管执行中进程
    当你开启了一个占用很长时间的进程，比如wget一个大文件，但是没有在screen等这种环境里打开，
    又不想占着一个窗口一直等待或者担心ssh中断导致进程退出，就可以使用reptyr了，使用方法也很简单，
    开启一个screen，在screen中执行

    reptyr 进程pid    //即可完成接管，原来所在的终端程序变成后台，还可以重新接管回去。
},
{
    如何恢复nohup会话（session）
        


},
{
    linux mkfs.ntfs 格式化慢
    原因是格式化过程除了写入分区表外，还要遍历每个卷，清零和坏扇区检查。
    解决办法：
    mkfs.ntfs -f  /dev/sdXX
    -f、–-fast或 –q、–-quick 执行快速格式化。这将跳过卷清零和坏扇区检查。
    –L、–-label	设置文件系统的卷标签。
    –n、–-no-action	mkntfs不实际创建文件系统，但显示它创建文件系统时将执行的工作。
    -c	以字节为单位指定簇的大小。
    –p、–-partition	指定分区开始扇区
    -f/--force	强制执行mkntfs
},
{
    linux分区_解决Linux下挂载的NTFS分区（Windows分区）只读问题
    关键字：ntfs只读，ntfs readonly
    先卸载分区
    #sudo umount /dev/sda1
    然后利用ntfsfix命令修复对应的分区
    #sudo ntfsfix /dev/sda1
    重新挂载
    #sudo ntfs-3g -o remove_hiberfile /dev/sda1 /mnt/

},
{
    cp 命令添加进度条
    如何使用 Github 上的开源项目 advcpmv 来实现 Linux 中的 「cp」 和 「mv」 命令的进度条。
    由于 cp 和 mv 命令都是属于 coreutils 工具包下的，因此我们的主要操作就是在编译 coreutils的时候加入补丁从而实现进度条功能。
    注意：尽量不要使用root 用户操作。

    可以查看作者的安装脚本：curl -LO https://raw.githubusercontent.com/jarun/advcpmv/master/install.sh
    用作者的脚本安装：install.sh  0.8 8.30
    
    我改造作者的安装脚本myinstall.sh在：fengming.d/linux_tools/advcpmv.tar.gz
    自己手动下载安装步骤如下：
    step1:下载coreutils，下载对应的版本
        http://ftp.gnu.org/gnu/coreutils/coreutils-8.30.tar.xz
        http://ftp.gnu.org/gnu/coreutils/coreutils-8.32.tar.xz
        http://ftp.gnu.org/gnu/coreutils/coreutils-9.0.tar.xz
        http://ftp.gnu.org/gnu/coreutils/coreutils-9.1.tar.xz
        如：
        curl -LO http://ftp.gnu.org/gnu/coreutils/coreutils-8.30.tar.xz
        解压:
        tar -xJf coreutils-8.30.tar.xz

    step2:下载 github 上的补丁
        https://raw.githubusercontent.com/jarun/advcpmv/master/advcpmv-0.8-8.30.patch
        https://raw.githubusercontent.com/jarun/advcpmv/master/advcpmv-0.8-8.32.patch
        https://raw.githubusercontent.com/jarun/advcpmv/master/advcpmv-0.8-9.0.patch
        https://raw.githubusercontent.com/jarun/advcpmv/master/advcpmv-0.8-9.1.patch

        如：
        curl -LO https://raw.githubusercontent.com/jarun/advcpmv/master/advcpmv-0.8-8.30.patch
    
    step3:打补丁
        cd coreutils-8.30
        patch -p1 -i ../advcpmv-0.8-8.30.patch

    stept4:配置和编译
        ./configure
        make
    step5:安装 
        将编译生成的src/cp 和 src/mv 放置在/usr/local/bin/目录中。
        不要删除或复制系统原来的命令，只要PATH中/usr/local/bin在/bin/前面即可，在/usr/local/bin找到cp或mv后就不去/bin目录中寻找了。

    附件：
    当下载补丁时，https://raw.githubusercontent.com URL有可能访问不了，是因为域名解析的问题，可以用网页查看该域名对应的IP，（域名查看：https://www.ip138.com/）
    然后直接修改/etc/hosts文件即可。
},
{
    判断Linux是否运行在虚拟机中
    方法一、dmidecode命令
    用 dmidecode 来判断Linux是否运行在虚拟环境：
    在物理机上：
    sudo dmidecode -s system-product-name
    Default string
    在虚拟机上：
    sudo dmidecode -s system-product-name
    VMware, Inc.
    但是它有个缺陷，就是不支持容器的检查。在容器中运行 dmidecode 会提示错误信息 /dev/mem: No such file or directory 
    若你把 /dev 挂载进容器，则又会被识别为物理急。
    
    方法二、systemd-detect-virt
    原来 systemd 已经提供了一个命令来帮你完成这项任务了，那就是 systemd-detect-virt：

    在物理机上：
    systemd-detect-virt
    none
    在虚拟机上：
    systemd-detect-virt
    vmware
    在容器上:
    systemd-detect-virt
    ?
    方法三：检查 /sys 目录：
    在物理机上：
    cat /sys/devices/virtual/dmi/id/product_name
    Default string
    在虚拟机上：
    cat /sys/devices/virtual/dmi/id/product_name
    VMware Virtual Platform
},
{
    使用foremost恢复已删除文件
    foremost是一款根据文件头，尾和内部结构来尝试从镜像文件（或者磁盘）中恢复文件的工具。
    foremost默认可以扫描出 jpg, gif, png, bmp, avi, exe, mpg, mp4, wav, riff, wmv, mov, pdf, ole, doc, zip, rar, html, cpp 文件。

    但是通过配置它的配置文件(默认为 /etc/foremost.conf),你还可以为它增加新的支持类型。 

    例子：
    

},
{
    linux释放内存--手动释放swap和buffer和cache


},
{
    linux分区扩容一：
    基础知识：
    主分区--主分区也被称为主磁盘分区，是磁盘分区的一中类型。一个硬盘最多可创建4个主分区。
    逻辑分区和扩展分区--因为主分区最多可以创建4个，我们需要使用扩展分区打破4的限制。
        在磁盘上可以创建多个逻辑分区而创建的这些逻辑分区都被称为扩展分区，你可以用主分区和逻辑分区中储存数据，
        但是不能用扩展分区储存，因为扩展分区是我们对逻辑分区的总称，只是一中种称呼。
    

},
{
    linux分区扩容方法二：（1，将剩余空间创建新分区，然后加入现有的逻辑卷组中。2，或）

    
},
{
    Linux文件系统只读 解决方案
    Linux系统Read-only file system，文件系统只读排查解决方案：

    文件系统只读机制：
    当文件系统自身的校验机制发现文件系统存在问题时，为避免文件系统受到进一步的损坏，系统会把文件系统设置为只读。

    造成的原因：
    一般情况是由于系统发现磁盘硬件（Riad卡，硬盘）故障或文件系统中文件被损坏后而采取的保护机制导致的。
    为了保护数据不破坏分区中已有内容，Linux在挂载文件系统时会以read-only只读方式加载。

    目前已知的造成硬盘分区只读的可能原因有：
        文件系统错误
        磁盘坏道
        RAID卡故障
        inode资源耗尽
        IO繁忙
        硬盘背板故障
        硬盘线缆故障
        HBA卡故障
        内核相关硬件驱动bug
        FW固件类问题
    另：系统没有正常关机，也会导致磁盘出现文件系统错误；

    排查处理：

    先重启一下（一般重启都能好，好不了就看下面的）
    1、cat /proc/mounts  确认是哪个分区只读(ro状态的)
        dmesg  |grep error  看报错信息，是I/O错误，还是文件系统错误
        cat /var/log/messages  看是否有错误信息
    2、mount -o remount,rw  挂载点
        尝试重新挂载一下，如果不行，往下
    3、df  -T  查看文件系统版本是ext2/3/4，使用对应的命令：
        fsck.ext2/3/4   -y  设备名 (修复文件系统，取消交互)
        fsck.ext2/3/4  -n  设备名 （扫描文件系统，不执行操作）

},
{
    Linux：如何获取Linux发行版的内核头文件
    搜索：
    apt search linux-headers-$(uname -r)
    下载安装：
    apt install linux-headers-$(uname -r)
    或者其他版本
},
{
    debian查看GPU信息
    要在 Debian 上查看 GPU 信息，你可以使用以下方法：

    1. 使用 `lspci` 命令来列出系统上的 PCI 设备信息。在终端中运行以下命令：

    ```
    lspci | grep -i vga
    ```

    这将显示与图形处理器相关的 PCI 设备信息，包括 GPU 型号和制造商等。

    2. 使用 `lshw` 命令来获取系统硬件信息。在终端中运行以下命令：

    ```
    sudo lshw -C display
    ```

    这将显示与显示器相关的硬件信息，包括 GPU 型号、驱动程序和配置等。

    3. 使用 `nvidia-smi` 命令来查看 NVIDIA GPU 的详细信息。如果你的系统中安装了 NVIDIA 驱动程序，可以在终端中运行以下命令：

    ```
    nvidia-smi
    ```

    这将显示与 NVIDIA GPU 相关的详细信息，包括 GPU 型号、驱动程序版本、温度、内存使用情况等。

    4. 如果你使用的是 AMD GPU，可以使用 `radeontop` 命令来监视 AMD GPU 的使用情况。在终端中运行以下命令：

    ```
    sudo apt-get install radeontop
    radeontop
    ```

    这将显示 AMD GPU 的使用情况，包括 GPU 使用率、温度、频率等。

    通过上述命令，你应该能够获取到关于 GPU 的基本信息和状态。请注意，具体命令和输出可能因系统配置和硬件而有所不同。
    如果你的系统中没有安装相应的工具或驱动程序，你可能需要根据你的 GPU 型号和制造商查找适用的工具和驱动程序，
    并按照官方文档提供的说明进行安装和配置。

},
{
    如何让docker使用Intel GPU做加速

    要让 Docker 使用 Intel GPU 进行加速，你需要执行以下步骤：

    1. 确保你的系统满足以下条件：
    - 安装了适用于 Intel GPU 的驱动程序，并确保驱动程序已正确安装和配置。
    - 安装了 Docker Engine，并且版本在 19.03 或更高。

    2. 确认 Intel GPU 驱动程序是否已正确加载。在终端中运行以下命令：

    ```
    lsmod | grep i915
    ```

    如果输出中显示了 `i915`，则表示 Intel GPU 驱动程序已正确加载。

    3. 创建一个 Docker 容器，并在启动容器时使用 `--device` 参数来映射 Intel GPU 设备。例如：

    ```
    docker run --device=/dev/dri:/dev/dri -it ubuntu bash
    ```

    上述命令将创建一个基于 Ubuntu 镜像的容器，并将主机上的 `/dev/dri` 目录映射到容器内的相同路径。

    4. 在容器内部，你可以运行需要 GPU 加速的应用程序或任务。Docker 会自动将 Intel GPU 资源映射到容器中，并让应用程序能够使用 GPU。

    请注意，Intel GPU 加速的可用性和配置可能因操作系统、GPU 驱动程序版本和 Docker 版本而异。
    确保按照官方文档提供的说明进行安装和配置，并检查你的系统是否满足 Intel GPU 加速的要求。

    另外，还要注意，某些应用程序可能需要额外的配置和设置才能在 Docker 容器中正确使用 Intel GPU 加速。
    你可能需要查阅相应应用程序的文档，以了解如何在 Docker 容器中配置和使用 Intel GPU 加速。
    
},
{
    遇到问题：
    r8169 0000:03:00.0 enp3s0: rtl_rxtx_empty_cond == 0 (loop: 42, delay: 100).

    安装网卡驱动
    apt install firmware-realtek
    如何没有找到firmware-realtek，那么在/etc/apt/sources.list 添加non-free
    安装驱动，然后重启。
    modprobe -r r8169
    modprobe r8169
},
{
    linux挂载和卸载网络硬盘
    （1）samba配置
    cat /etc/samba/smb.conf
    [media_dir]
    comment=debian home
    path = /media
    browseable = yes
    valid users =root lshm
    writable = yes
    guest ok=yes

    (2)挂载samba
    mount -t cifs -o username=root,password=samba,vers=2.0 //192.168.254.5/media_dir  /root/samba1

    (3)卸载samba
    umount /root/samba1

    （1）配置NFS：
    cat /etc/default/nfs-kernel-server
    /srv/nfs *(rw,sync,no_root_squash)
    
    (2)挂载NFS
    mount -t nfs -o nolock 192.168.254.5:/srv/nfs /mnt/nfs
    
    (3)卸载NFS
    umount /mnt/nfs
},
{
    挂载iso光盘文件方法
    mount -o loop -t iso9660 file.iso /media/cdrom0
    
},
{
    查看当前连接的显示器和其相关信息
    xrandr
    Screen 0: minimum 320 x 200, current 1920 x 1080, maximum 16384 x 16384
    HDMI-1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 598mm x 336mm
    1920x1080     60.00*+  50.00    59.94
    1680x1050     59.88
    1600x900      60.00
    ...

},
{
    linux如何查看当前系统是否有连接的显示器
    要查看当前系统是否连接有显示器，您可以检查 `/sys/class/drm` 目录下的内容。
    这个目录包含了有关显示设备和显示连接的信息。
    ```
    ls /sys/class/drm
    ```
    示例输出可能如下所示：

    ```
    card0  card0-DP-1  card0-HDMI-A-1  card0-HDMI-A-2  card0-HDMI-A-3  card0-VGA-1  renderD128  version
    ```

    如果输出中至少有一个以 `card` 开头的文件或子目录，那么系统连接了至少一个显示器。例如，`card0` 表示系统上的一个显示设备。

    如果输出为空，表示当前系统没有连接显示器。
    以下是一些常见文件和子目录的解释：
    cardX: 这些是显示设备的表示，其中 X 是一个数字，表示不同的显示设备。例如，card0 表示第一个显示设备。
    cardX-DP-X: 这些是连接到显示设备的 DisplayPort (DP) 接口的显示器。
    cardX-HDMI-X: 这些是连接到显示设备的 HDMI 接口的显示器。
    cardX-VGA-X: 这些是连接到显示设备的 VGA 接口的显示器。
    renderDXXX: 这些是渲染设备的表示，其中 XXX 是一个数字，表示不同的渲染设备。
    version: 这个文件包含有关 DRM（Direct Rendering Manager）子系统的版本信息。
},
{


}