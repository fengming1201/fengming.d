


{
    项目名称：（时间：）

    项目描述：
4G+IPC组合产品在一些缺乏网络场景中很有市场需要，为此我司推出多款4G搭配IPC的产品，以满足市场需求。
4G模块管理库的目标是实现多种4G模块（如simcom、域格、移远、有方、阿勒卡等）可以自由搭配不同IPC平台（如fh8632、fh8626等）,从而推出不同组合的4G产品。
一期实验、测试，输出4G管理库的实现方案的设计文档。
二期编程，驱动和库软件代码实现，并演示成果。
三期应用4G管理库，推出4G+IPC产品量产上架。

    项目职责：
全责负责4G管理库设计和实现。
不同厂家的4G模块在驱动、AT命令、拨号流程等方面存在客观的差异，因此需要设计一种框架，实现方便适配不同硬件，
为上层应用提供统一的接口成为该库设计的一大难点。
1，修改驱动，甚至重新编写，用统一方式组织和管理4G驱动。
2，采用了串口环形队列设计，保证数据收发不丢失。
3，针对AT命令差异，设计了AT命令抽象层，对上统一接口，对下可以不同实现。
4，针对模块的状态（如注册、拨号等）监控，设计了状态机，实现4G模块的自主管理。
5、为上层可以感知4G的状态，设计了消息队列，可以异步通知上层。

    项目业绩：
多款4G cat1和cat4模块搭配IPC的产品有fh8632，fh8626，fh8856等4G产品已经量产上架，有的已经出口欧洲市场；
4G模块管理库提供的便捷适配机制，拨号流程自主管理等功能达到了设计目标。
该库的实现涉及诸多技术难点，其中有linux驱动、串口通信、状态机设计、消息队列，命令抽象层设计等。
也给了我框架设计能力和编程能力有较大的提升。
}

{
    项目名称：（时间：）
新IPC硬件平台移植和开发：海思HI3516

    项目描述：
我司计划推出HI3516新IPC，由我负责移植hi3516新硬件到我司的IPC平台。
项目目标是移植hi3516成为我司的新一款IPC，并实现产品量产投市场。
前期市场调研，硬件选型等需求已经由产品部定义，我主要负责新硬件适配我司IPC软件框架即可。
一期SDK和demo编译运行。
二期改造和适配，uboot裁剪、Linux内核裁剪和驱动移植，busybox裁剪，到此可以运行业务调试程序啦。
三期flash布局，升级程序移植，ipc框架硬件抽象层hal实现，SDK视频、声音移植，到此IPC客户端出图啦。
四期包括人脸检测， 移动侦测， 人行检测等 AI 功能的移植。
五期试产和测试。

    项目职责：
全责负责hi3516整个系统的移植工作，配合硬件部对新平台的硬件测试。
我司IPC软件平台很成熟，添加新ipc硬件相对容易，只需要实现底层系统的移植和对接接口的实现，即可完成新硬件的适配
难点在于要熟悉linux内核裁剪，uboot裁剪和填补缺少的驱动等流程，具体有
1，SDK demo交叉编译、下载等流程。
2，uboot裁剪，减少代码体积，以及添加缺少的外设驱动。
3，Linux内核裁剪，开通需要的或去除不用的内核功能，减少代码体积，修改启动脚本进入IPC统一入口脚本。
4，裁剪busybox，进一步缩小体积。
5，移植驱动，实现抽象层hal接口，包括GPIO，ADC，SDK提供的视频声音的驱动。
6，配置IPC框架的配置文件，适配新平台的硬件配置，如sensor，flash型号,gpio编号，灵敏度值等，

    项目业绩：
新平台IPC hi3516产品比预期晚交付一个月后，仍实现实现小批量量产上架售卖，同年年底因海思芯片断供而转向新平台。
就我个人而且，此次新硬件移植，给了我一次比较全面的产品研发经历，从底层驱动，到操作系统，再到应用接口对接，使我对整个系统工程的有了更深的理解。
在产品角度上更能理解好的软件框架对产品迭代更新的重要性。

}

{
    项目名称：（时间：）
新IPC硬件平台移植和开发：富瀚fh8626
    项目描述：   
由于芯片断供事件，急需开发和支持新的IPC平台替补。
项目目标是快速移植新款硬件平台，快速投产替补缺芯产品。
项目时间短，故而加人模式，我作为两个开发者之一，主要负责fh8626底层系统移植和升级程序移植部分；抽象层接口实现、SDK音视频、AI等移植交由另外一人负责。
因项目紧急，但我们各自负责的工作内容承前启后，不能同时进行开发，于是我们大胆引入qemu模拟器协助开发，
一期SDK和demo编译运行，qemu模拟arm嵌入式环境搭建。
二期改造和适配，uboot裁剪、Linux内核裁剪，busybox裁剪，启动脚本。
三期flash布局，升级程序移植。


    项目职责：
参与fh8626新平台移植，主要负责底层系统的移植和适配。
1，期间参与IPC平台的硬件抽象层改造，并提出支持qemu接口方案。
2，搭建qemu模拟ARM Linux平台，业务代码通过抽象层后实现与硬件无关的运行调试环境，给项目得以并行开发。
同时为后来构建独立业务层运行调试环境打下基础。
3，在移植uboot时遇到了版本过低不匹配问题，最后不得不花时间移植最新的uboot版本。
4，Linux内核裁剪，SDK驱动移植比较顺利。

    项目业绩：
引入新的开发模式尝试，业务层分离模式，不受硬件运行环境的限制，在模拟器中运行调试业务逻辑，极大加快了开发的进度。
也为后来的自动化测试项目打下基础。
学习到应用模拟器协助开发的经验，

}

{
    项目名称：（时间：）
reviewboard docker化推广

    项目描述：
reviewboard在嵌入式部门得到积极的效果，于是其他部门也想构建自己的代码评审服务，但由于reviewboard安装过程依赖太多，不易成功，
于是提出基于docker搭建reviewboard服务，方便其他部门部署使用和维护。
一期运行debian镜像，在容器中安装reviewboard并直接创建相应数据库，以及汉化的配置，使之可用。
二期打包docker镜像到本地，在其他部分服务器直接部署使用。

    项目职责：
全责负责reviewboard docker化。
就是将不易安装成功的reviewboard安装在docker镜像里，实现一次安装，多地部署的目标。
痛点是将docker首次应用到实际开发中，为开发技术水平提升一个新的台阶。

    项目业绩：
一次开发，多地部署，正式docker的优势，简化开发流程，缩减开发时间成本。
实际成果是多个部门都用上了reviewboard。

}

{
    项目名称：（时间：）
基于docker构建统一的嵌入式交叉编译环境。
    项目描述：
得益于docker带来工作效率的提高，部门决定进一步docker化开发流程各个环节。
目标是嵌入式开发流程中尽量docker化，避免重复安装或重复造轮子的案例。安装交叉编译环境便是其中之一。

有了基于docker的交叉编译环境，多人协作开发时便不用再从头安装工具链等开发环境的搭建，外出去工厂部署时也能快速携带调试环境。

    项目职责：
1，全责负责输出基于docker构建统一的嵌入式交叉编译环境方案设计文档。
2，率先实现一例基于docker构建统一的嵌入式交叉编译环境的现场演示，解决其中的遇到的问题和难点。
3，输出交叉编译环境docker的制作过程说明文档，为后来其他新硬件平台提供样例。
4，将现有的硬件平台交叉编译环境docker化，并构建公司的docker本地镜像仓库。

    项目业绩：
docker化也有缺点，配置相同的CPU核数，在docker中编译比物理机的慢一些。
但优点也很明显，docker化的部署的便携和效率的提高不言而喻。
1，多人协同开发不用再为安装编译环境的烦恼，一次安装多地部署。
2，可以一机编译所有的硬件平台而互不干扰。

}

{
    项目名称：（时间：）
基于docker构建qemu应用程序运行平台。

    项目描述：
在快速开发fh8626项目的尝试，看到业务应用程序通过抽象层的分离后与硬件平台无关，可以单独运行在qemu模拟器中，
这样业务代码的调试完全可以脱离硬件平台的束缚，那么添加一款新的IPC硬件，就只需要实现底层系统的移植和抽象层接口具体实现即可。
目标是借助qemu软件实现业务应用程序无关硬件运行环境限制，可独立运行调试等开发。
一期可行性方案，fh8626快速开发已经使用，网上其他人也同样实现。
二期硬件抽象层接口的qemu方案实现，抽象层接口改造有难度，使得业务层应用感知不到差异，如同在虚拟机中一般。
三期docker化，不太准确。

    项目职责：
linux下安装qemu非常容易，程序下载至qemu模拟器流程也不难，难点在于我们的业务需要一个完整的外设等部件才能正常运行，
因此我们的硬件抽象层的设计能否实现硬件无关就成为该项目达到预期目标的关键，也是难点所在。
1，主要负责qemu镜像构建和程序下载运行流程的构建，输出流程说明文档。
2，参与抽象层接口的改造，特别是qemu方案。
3，真实硬件通过SDK提供的驱动和接口，获取图像声音等数据流，那么我们的思路是将一段现成是视频流送给抽象层中的获取数据流接口，如此，
业务如同从sensor获取一般，无感差异，这部分由部门我们老大实现。
4，至于gpio,adc等硬件，qemu自身就能提供仿真，对接抽象层接口即可，这部分由我实现。

    项目业绩：
业务层代码属于公共的代码，不依赖硬件就可以单独运行在模拟器中，涉及业务逻辑的调试脱离了硬件约束，
极大提高了开发效率，简化了新硬件的移植工作，同时也为IPC软件框架提供新的机制。
尽管抽象层改造却也只是满足了跑业务程序主要部分的需要，但如4G,蓝牙等模块是无法实现的。

}
{
    项目名称：（时间：）
参与低功耗系统软件框架的设计。

    项目描述：
低功耗IoT设备一直是市场热点，特别是一些特殊应用场景如电池摄像机、门铃，门窗感应器等。
我司规划推出一系列低功耗产品，满足客户需求。
框架的设计目标是低功耗、低延迟，

实际上是对原有的IPC软件框架进行改造，扩展其框架使之可以支持低功耗模式，


}

{
    项目名称：（时间：）
低功耗产品Hi3861L+fh8626的开发和维护

    项目描述：（1.项目背景。2.项目目标。3.项目概述。）
我司刚初步完成低功耗软件框架，需要应用在产品中进行测试和优化。为此选择低功耗芯片Hi3861L组合fh8626电池摄像机外加PIR，
来实现首个功耗产品的试水。
该电池摄像机的目标是需要实现一些基本性能指标（其中有休眠功耗:1mA以内、首帧出图时间：300-400ms出图，远程唤醒时间：4s左右）。
该项目采用双SOC芯片结构，低功耗Hi3861L wifi芯片采用liteOS作为系统，用于链路保活、PIR控制、唤醒和断电休眠等状态控制，
而另一fh8626选择RTThread作为系统，负责视频快速出图、录像等复杂的操作，将视频流数据通过板间通信协议发给Hi3861L，由它发往服务器。


    项目职责：（1.项目中担任的角色。2.项目有哪些痛点，难点。3.解决问题的方法。）

作为三个参与人之一，负责Hi3861L侧外围设备驱动编写，包括PIR驱动，电池检测驱动以及LED等。
负责实现板间通信和数据同步（异构系统最大问题是数据同步，但海思的hichannal不满足我们的需要，所以需要）

    项目业绩：（1.目标达成情况。2.我的贡献。3.我的收获。）



}

{
    项目名称：（时间：）
低功耗框架移植到hi3861+fh8852新的硬件平台

    项目描述：（1.项目背景。2.项目目标。3.项目概述。）

    项目职责：（1.项目中担任的角色。2.项目有哪些痛点，难点。3.解决问题的方法。）
    项目业绩：（1.目标达成情况。2.我的贡献。3.我的收获。）

}
{
    项目名称：（时间：）
参与低功耗电池门铃前期开发
项目描述：（1.项目背景。2.项目目标。3.项目概述。）

项目职责：（1.项目中担任的角色。2.项目有哪些痛点，难点。3.解决问题的方法。）
项目业绩：（1.目标达成情况。2.我的贡献。3.我的收获。）

中途被安排到新项目4g低功耗项目

}
{
    项目名称：（时间：）
负责低功耗框架与4G融合

项目描述：（1.项目背景。2.项目目标。3.项目概述。）
项目职责：（1.项目中担任的角色。2.项目有哪些痛点，难点。3.解决问题的方法。）
项目业绩：（1.目标达成情况。2.我的贡献。3.我的收获。）
}
{
1.负责公司代码评审平台reviewboard搭建，以及撰写评审制度文档和维护文档。
2.负责设计和实现4G模块管理库，与fh8632、fh8626组成4G+IPC等产品并实现量产上架。
3.独立完成海思Hi3516芯片的平台移植，小批量上架后停产。
4.参与快速开发富瀚fh8626芯片的平台移植，wifi版和4G版均已量产上架。
5.负责搭建基于docker的公司统一交叉编译平台，为快速开发新硬件提供基础。
6.负责搭建基于qemu的应用程序运行平台，极大缩短新硬件平台开发时间。
7.参与电池低功耗系统框架的设计，独立设计板间通信协议和数据同步机制。
8.参与公司首个低功耗产品Hi3861L+fh8626的开发和维护，产品已量产上架。
9.负责将低功耗框架移植到hi3861+fh8852新的硬件平台，推出低功耗电池IPC，试产中。
10.参与低功耗电池门铃，试产中。
11.负责低功耗框架与4G融合，为低功耗4G设备提供基础，目前仍在设计开发阶段。
}

技能慎用词：
熟悉
掌握
了解






