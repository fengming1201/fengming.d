SSHD_CONFIG(5)                                                            BSD File Formats Manual                                                            SSHD_CONFIG(5)

NAME
     sshd_config — OpenSSH daemon configuration file

DESCRIPTION
     sshd（8）从/etc/ssh/sshd_config（或在命令行上用-f指定的文件）读取配置数据。该文件包含关键字参数对，每行一个。对于每个关键字，将使用第一个获得的值。以“#”开头的行和空行被解释为注释。参数可以选择性地用双引号（“）闭合，以表示包含空格的参数。

     注意，Debian openssh服务器包在/etc/ssh/sshd_config中设置了几个标准选项，这些选项不是sshd（8）中的默认选项：
           •   Include /etc/ssh/sshd_config.d/*.conf
           •   ChallengeResponseAuthentication no
           •   X11Forwarding yes
           •   PrintMotd no
           •   AcceptEnv LANG LC_*
           •   Subsystem sftp /usr/lib/openssh/sftp-server
           •   UsePAM yes

     /etc/ssh/shd_config.d/*.conf文件包含在配置文件的开头，因此在那里设置的选项将覆盖/etc/ssh/sshd_config中的选项。

     AcceptEnv
             Specifies what environment variables sent by the client will be copied into the session's environ(7).  See SendEnv and SetEnv in ssh_config(5) for how to con‐
             figure the client.  The TERM environment variable is always accepted whenever the client requests a pseudo-terminal as it is required by the protocol.  Vari‐
             ables are specified by name, which may contain the wildcard characters ‘*’ and ‘?’.  Multiple environment variables may be separated by whitespace or spread
             across multiple AcceptEnv directives.  Be warned that some environment variables could be used to bypass restricted user environments.  For this reason, care
             should be taken in the use of this directive.  The default is not to accept any environment variables.

     AddressFamily
             指定sshd（8）应使用的地址族。有效参数为any（默认值）、inet（仅使用IPv4）或inet6（仅使用IPv6）。

     AllowAgentForwarding
             指定是否允许ssh代理（1）转发。默认值为yes。请注意，禁用代理转发并不能提高安全性，除非用户也被拒绝访问shell，因为他们总是可以安装自己的转发器。

     AllowGroups
             这个关键字后面可以跟一个用空格分隔的组名模式列表。如果指定，则仅允许主组或辅助组列表与其中一种模式匹配的用户登录。只有组名称才有效；无法识别数字组ID。默认情况下，允许所有组登录。允许/拒绝组指令按以下顺序处理：DenyGroups、AllowGroups。

             See PATTERNS in ssh_config(5) for more information on patterns.

     AllowStreamLocalForwarding
             指定是否允许StreamLocal（Unix域套接字）转发。可用选项为yes（默认值）或all以允许StreamLocal转发，no以阻止所有StreamLocal转发、local以仅允许本地（从ssh（1）的角度来看）转发或remote以只允许远程转发。请注意，禁用StreamLocal转发并不能提高安全性，除非用户也被拒绝访问shell，因为他们总是可以安装自己的转发器。

     AllowTcpForwarding
             Specifies whether TCP forwarding is permitted.  The available options are yes (the default) or all to allow TCP forwarding, no to prevent all TCP forwarding,
             local to allow local (from the perspective of ssh(1)) forwarding only or remote to allow remote forwarding only.  Note that disabling TCP forwarding does not
             improve security unless users are also denied shell access, as they can always install their own forwarders.

     AllowUsers
             This keyword can be followed by a list of user name patterns, separated by spaces.  If specified, login is allowed only for user names that match one of the
             patterns.  Only user names are valid; a numerical user ID is not recognized.  By default, login is allowed for all users.  If the pattern takes the form
             USER@HOST then USER and HOST are separately checked, restricting logins to particular users from particular hosts.  HOST criteria may additionally contain ad‐
             dresses to match in CIDR address/masklen format.  The allow/deny users directives are processed in the following order: DenyUsers, AllowUsers.

             See PATTERNS in ssh_config(5) for more information on patterns.

     AuthenticationMethods
             Specifies the authentication methods that must be successfully completed for a user to be granted access.  This option must be followed by one or more lists
             of comma-separated authentication method names, or by the single string any to indicate the default behaviour of accepting any single authentication method.
             If the default is overridden, then successful authentication requires completion of every method in at least one of these lists.

             For example, "publickey,password publickey,keyboard-interactive" would require the user to complete public key authentication, followed by either password or
             keyboard interactive authentication.  Only methods that are next in one or more lists are offered at each stage, so for this example it would not be possible
             to attempt password or keyboard-interactive authentication before public key.

             For keyboard interactive authentication it is also possible to restrict authentication to a specific device by appending a colon followed by the device iden‐
             tifier bsdauth or pam.  depending on the server configuration.  For example, "keyboard-interactive:bsdauth" would restrict keyboard interactive authentication
             to the bsdauth device.

             If the publickey method is listed more than once, sshd(8) verifies that keys that have been used successfully are not reused for subsequent authentications.
             For example, "publickey,publickey" requires successful authentication using two different public keys.

             Note that each authentication method listed should also be explicitly enabled in the configuration.

             The available authentication methods are: "gssapi-with-mic", "hostbased", "keyboard-interactive", "none" (used for access to password-less accounts when
             PermitEmptyPasswords is enabled), "password" and "publickey".

     AuthorizedKeysCommand
             Specifies a program to be used to look up the user's public keys.  The program must be owned by root, not writable by group or others and specified by an ab‐
             solute path.  Arguments to AuthorizedKeysCommand accept the tokens described in the TOKENS section.  If no arguments are specified then the username of the
             target user is used.

             The program should produce on standard output zero or more lines of authorized_keys output (see AUTHORIZED_KEYS in sshd(8)).  AuthorizedKeysCommand is tried
             after the usual AuthorizedKeysFile files and will not be executed if a matching key is found there.  By default, no AuthorizedKeysCommand is run.

     AuthorizedKeysCommandUser
             Specifies the user under whose account the AuthorizedKeysCommand is run.  It is recommended to use a dedicated user that has no other role on the host than
             running authorized keys commands.  If AuthorizedKeysCommand is specified but AuthorizedKeysCommandUser is not, then sshd(8) will refuse to start.

     AuthorizedKeysFile
             Specifies the file that contains the public keys used for user authentication.  The format is described in the AUTHORIZED_KEYS FILE FORMAT section of sshd(8).
             Arguments to AuthorizedKeysFile accept the tokens described in the TOKENS section.  After expansion, AuthorizedKeysFile is taken to be an absolute path or one
             relative to the user's home directory.  Multiple files may be listed, separated by whitespace.  Alternately this option may be set to none to skip checking
             for user keys in files.  The default is ".ssh/authorized_keys .ssh/authorized_keys2".

     AuthorizedPrincipalsCommand
             Specifies a program to be used to generate the list of allowed certificate principals as per AuthorizedPrincipalsFile.  The program must be owned by root, not
             writable by group or others and specified by an absolute path.  Arguments to AuthorizedPrincipalsCommand accept the tokens described in the TOKENS section.
             If no arguments are specified then the username of the target user is used.

             The program should produce on standard output zero or more lines of AuthorizedPrincipalsFile output.  If either AuthorizedPrincipalsCommand or
             AuthorizedPrincipalsFile is specified, then certificates offered by the client for authentication must contain a principal that is listed.  By default, no
             AuthorizedPrincipalsCommand is run.

     AuthorizedPrincipalsCommandUser
             Specifies the user under whose account the AuthorizedPrincipalsCommand is run.  It is recommended to use a dedicated user that has no other role on the host
             than running authorized principals commands.  If AuthorizedPrincipalsCommand is specified but AuthorizedPrincipalsCommandUser is not, then sshd(8) will refuse
             to start.

     AuthorizedPrincipalsFile
             Specifies a file that lists principal names that are accepted for certificate authentication.  When using certificates signed by a key listed in
             TrustedUserCAKeys, this file lists names, one of which must appear in the certificate for it to be accepted for authentication.  Names are listed one per line
             preceded by key options (as described in AUTHORIZED_KEYS FILE FORMAT in sshd(8)).  Empty lines and comments starting with ‘#’ are ignored.

             Arguments to AuthorizedPrincipalsFile accept the tokens described in the TOKENS section.  After expansion, AuthorizedPrincipalsFile is taken to be an absolute
             path or one relative to the user's home directory.  The default is none, i.e. not to use a principals file – in this case, the username of the user must ap‐
             pear in a certificate's principals list for it to be accepted.

             Note that AuthorizedPrincipalsFile is only used when authentication proceeds using a CA listed in TrustedUserCAKeys and is not consulted for certification au‐
             thorities trusted via ~/.ssh/authorized_keys, though the principals= key option offers a similar facility (see sshd(8) for details).

     Banner  The contents of the specified file are sent to the remote user before authentication is allowed.  If the argument is none then no banner is displayed.  By de‐
             fault, no banner is displayed.

     CASignatureAlgorithms
             Specifies which algorithms are allowed for signing of certificates by certificate authorities (CAs).  The default is:

                   ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,
                   ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa

             Certificates signed using other algorithms will not be accepted for public key or host-based authentication.

     ChallengeResponseAuthentication
             Specifies whether challenge-response authentication is allowed (e.g. via PAM).  The default is yes.

     ChrootDirectory
             Specifies the pathname of a directory to chroot(2) to after authentication.  At session startup sshd(8) checks that all components of the pathname are root-
             owned directories which are not writable by any other user or group.  After the chroot, sshd(8) changes the working directory to the user's home directory.
             Arguments to ChrootDirectory accept the tokens described in the TOKENS section.

             The ChrootDirectory must contain the necessary files and directories to support the user's session.  For an interactive session this requires at least a
             shell, typically sh(1), and basic /dev nodes such as null(4), zero(4), stdin(4), stdout(4), stderr(4), and tty(4) devices.  For file transfer sessions using
             SFTP no additional configuration of the environment is necessary if the in-process sftp-server is used, though sessions which use logging may require /dev/log
             inside the chroot directory on some operating systems (see sftp-server(8) for details).

             For safety, it is very important that the directory hierarchy be prevented from modification by other processes on the system (especially those outside the
             jail).  Misconfiguration can lead to unsafe environments which sshd(8) cannot detect.

             The default is none, indicating not to chroot(2).

     Ciphers
             Specifies the ciphers allowed.  Multiple ciphers must be comma-separated.  If the specified list begins with a ‘+’ character, then the specified ciphers will
             be appended to the default set instead of replacing them.  If the specified list begins with a ‘-’ character, then the specified ciphers (including wildcards)
             will be removed from the default set instead of replacing them.  If the specified list begins with a ‘^’ character, then the specified ciphers will be placed
             at the head of the default set.

             The supported ciphers are:

                   3des-cbc
                   aes128-cbc
                   aes192-cbc
                   aes256-cbc
                   aes128-ctr
                   aes192-ctr
                   aes256-ctr
                   aes128-gcm@openssh.com
                   aes256-gcm@openssh.com
                   chacha20-poly1305@openssh.com

             The default is:

                   chacha20-poly1305@openssh.com,
                   aes128-ctr,aes192-ctr,aes256-ctr,
                   aes128-gcm@openssh.com,aes256-gcm@openssh.com

             The list of available ciphers may also be obtained using "ssh -Q cipher".

     ClientAliveCountMax
             Sets the number of client alive messages which may be sent without sshd(8) receiving any messages back from the client.  If this threshold is reached while
             client alive messages are being sent, sshd will disconnect the client, terminating the session.  It is important to note that the use of client alive messages
             is very different from TCPKeepAlive.  The client alive messages are sent through the encrypted channel and therefore will not be spoofable.  The TCP keepalive
             option enabled by TCPKeepAlive is spoofable.  The client alive mechanism is valuable when the client or server depend on knowing when a connection has become
             unresponsive.

             The default value is 3.  If ClientAliveInterval is set to 15, and ClientAliveCountMax is left at the default, unresponsive SSH clients will be disconnected
             after approximately 45 seconds.  Setting a zero ClientAliveCountMax disables connection termination.

     ClientAliveInterval
             Sets a timeout interval in seconds after which if no data has been received from the client, sshd(8) will send a message through the encrypted channel to re‐
             quest a response from the client.  The default is 0, indicating that these messages will not be sent to the client.

     Compression
             Specifies whether compression is enabled after the user has authenticated successfully.  The argument must be yes, delayed (a legacy synonym for yes) or no.
             The default is yes.

     DebianBanner
             Specifies whether the distribution-specified extra version suffix is included during initial protocol handshake.  The default is yes.

     DenyGroups
             This keyword can be followed by a list of group name patterns, separated by spaces.  Login is disallowed for users whose primary group or supplementary group
             list matches one of the patterns.  Only group names are valid; a numerical group ID is not recognized.  By default, login is allowed for all groups.  The al‐
             low/deny groups directives are processed in the following order: DenyGroups, AllowGroups.

             See PATTERNS in ssh_config(5) for more information on patterns.

     DenyUsers
             This keyword can be followed by a list of user name patterns, separated by spaces.  Login is disallowed for user names that match one of the patterns.  Only
             user names are valid; a numerical user ID is not recognized.  By default, login is allowed for all users.  If the pattern takes the form USER@HOST then USER
             and HOST are separately checked, restricting logins to particular users from particular hosts.  HOST criteria may additionally contain addresses to match in
             CIDR address/masklen format.  The allow/deny users directives are processed in the following order: DenyUsers, AllowUsers.

             See PATTERNS in ssh_config(5) for more information on patterns.

     DisableForwarding
             Disables all forwarding features, including X11, ssh-agent(1), TCP and StreamLocal.  This option overrides all other forwarding-related options and may sim‐
             plify restricted configurations.

     ExposeAuthInfo
             Writes a temporary file containing a list of authentication methods and public credentials (e.g. keys) used to authenticate the user.  The location of the
             file is exposed to the user session through the SSH_USER_AUTH environment variable.  The default is no.

     FingerprintHash
             Specifies the hash algorithm used when logging key fingerprints.  Valid options are: md5 and sha256.  The default is sha256.

     ForceCommand
             Forces the execution of the command specified by ForceCommand, ignoring any command supplied by the client and ~/.ssh/rc if present.  The command is invoked
             by using the user's login shell with the -c option.  This applies to shell, command, or subsystem execution.  It is most useful inside a Match block.  The
             command originally supplied by the client is available in the SSH_ORIGINAL_COMMAND environment variable.  Specifying a command of internal-sftp will force the
             use of an in-process SFTP server that requires no support files when used with ChrootDirectory.  The default is none.

     GatewayPorts
             Specifies whether remote hosts are allowed to connect to ports forwarded for the client.  By default, sshd(8) binds remote port forwardings to the loopback
             address.  This prevents other remote hosts from connecting to forwarded ports.  GatewayPorts can be used to specify that sshd should allow remote port for‐
             wardings to bind to non-loopback addresses, thus allowing other hosts to connect.  The argument may be no to force remote port forwardings to be available to
             the local host only, yes to force remote port forwardings to bind to the wildcard address, or clientspecified to allow the client to select the address to
             which the forwarding is bound.  The default is no.

     GSSAPIAuthentication
             Specifies whether user authentication based on GSSAPI is allowed.  The default is no.

     GSSAPICleanupCredentials
             Specifies whether to automatically destroy the user's credentials cache on logout.  The default is yes.

     GSSAPIKeyExchange
             Specifies whether key exchange based on GSSAPI is allowed. GSSAPI key exchange doesn't rely on ssh keys to verify host identity.  The default is no.

     GSSAPIStrictAcceptorCheck
             Determines whether to be strict about the identity of the GSSAPI acceptor a client authenticates against.  If set to yes then the client must authenticate
             against the host service on the current hostname.  If set to no then the client may authenticate against any service key stored in the machine's default
             store.  This facility is provided to assist with operation on multi homed machines.  The default is yes.

     GSSAPIStoreCredentialsOnRekey
             Controls whether the user's GSSAPI credentials should be updated following a successful connection rekeying. This option can be used to accepted renewed or
             updated credentials from a compatible client. The default is “no”.

             For this to work GSSAPIKeyExchange needs to be enabled in the server and also used by the client.

     GSSAPIKexAlgorithms
             The list of key exchange algorithms that are accepted by GSSAPI key exchange. Possible values are

                gss-gex-sha1-,
                gss-group1-sha1-,
                gss-group14-sha1-,
                gss-group14-sha256-,
                gss-group16-sha512-,
                gss-nistp256-sha256-,
                gss-curve25519-sha256-

             The default is “gss-group14-sha256-,gss-group16-sha512-,gss-nistp256-sha256-,gss-curve25519-sha256-,gss-gex-sha1-,gss-group14-sha1-”.  This option only ap‐
             plies to connections using GSSAPI.

     HostbasedAcceptedKeyTypes
             Specifies the key types that will be accepted for hostbased authentication as a list of comma-separated patterns.  Alternately if the specified list begins
             with a ‘+’ character, then the specified key types will be appended to the default set instead of replacing them.  If the specified list begins with a ‘-’
             character, then the specified key types (including wildcards) will be removed from the default set instead of replacing them.  If the specified list begins
             with a ‘^’ character, then the specified key types will be placed at the head of the default set.  The default for this option is:

                ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ecdsa-sha2-nistp384-cert-v01@openssh.com,
                ecdsa-sha2-nistp521-cert-v01@openssh.com,
                sk-ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ssh-ed25519-cert-v01@openssh.com,
                sk-ssh-ed25519-cert-v01@openssh.com,
                rsa-sha2-512-cert-v01@openssh.com,
                rsa-sha2-256-cert-v01@openssh.com,
                ssh-rsa-cert-v01@openssh.com,
                ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,
                sk-ecdsa-sha2-nistp256@openssh.com,
                ssh-ed25519,sk-ssh-ed25519@openssh.com,
                rsa-sha2-512,rsa-sha2-256,ssh-rsa

             The list of available key types may also be obtained using "ssh -Q HostbasedAcceptedKeyTypes".

     HostbasedAuthentication
             Specifies whether rhosts or /etc/hosts.equiv authentication together with successful public key client host authentication is allowed (host-based authentica‐
             tion).  The default is no.

     HostbasedUsesNameFromPacketOnly
             Specifies whether or not the server will attempt to perform a reverse name lookup when matching the name in the ~/.shosts, ~/.rhosts, and /etc/hosts.equiv
             files during HostbasedAuthentication.  A setting of yes means that sshd(8) uses the name supplied by the client rather than attempting to resolve the name
             from the TCP connection itself.  The default is no.

     HostCertificate
             Specifies a file containing a public host certificate.  The certificate's public key must match a private host key already specified by HostKey.  The default
             behaviour of sshd(8) is not to load any certificates.

     HostKey
             Specifies a file containing a private host key used by SSH.  The defaults are /etc/ssh/ssh_host_ecdsa_key, /etc/ssh/ssh_host_ed25519_key and
             /etc/ssh/ssh_host_rsa_key.

             Note that sshd(8) will refuse to use a file if it is group/world-accessible and that the HostKeyAlgorithms option restricts which of the keys are actually
             used by sshd(8).

             It is possible to have multiple host key files.  It is also possible to specify public host key files instead.  In this case operations on the private key
             will be delegated to an ssh-agent(1).

     HostKeyAgent
             Identifies the UNIX-domain socket used to communicate with an agent that has access to the private host keys.  If the string "SSH_AUTH_SOCK" is specified, the
             location of the socket will be read from the SSH_AUTH_SOCK environment variable.

     HostKeyAlgorithms
             Specifies the host key algorithms that the server offers.  The default for this option is:

                ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ecdsa-sha2-nistp384-cert-v01@openssh.com,
                ecdsa-sha2-nistp521-cert-v01@openssh.com,
                sk-ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ssh-ed25519-cert-v01@openssh.com,
                sk-ssh-ed25519-cert-v01@openssh.com,
                rsa-sha2-512-cert-v01@openssh.com,
                rsa-sha2-256-cert-v01@openssh.com,
                ssh-rsa-cert-v01@openssh.com,
                ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,
                sk-ecdsa-sha2-nistp256@openssh.com,
                ssh-ed25519,sk-ssh-ed25519@openssh.com,
                rsa-sha2-512,rsa-sha2-256,ssh-rsa

             The list of available key types may also be obtained using "ssh -Q HostKeyAlgorithms".

     IgnoreRhosts
             Specifies whether to ignore per-user .rhosts and .shosts files during HostbasedAuthentication.  The system-wide /etc/hosts.equiv and /etc/ssh/shosts.equiv are
             still used regardless of this setting.

             Accepted values are yes (the default) to ignore all per-user files, shosts-only to allow the use of .shosts but to ignore .rhosts or no to allow both .shosts
             and rhosts.

     IgnoreUserKnownHosts
             Specifies whether sshd(8) should ignore the user's ~/.ssh/known_hosts during HostbasedAuthentication and use only the system-wide known hosts file
             /etc/ssh/known_hosts.  The default is “no”.

     Include
             Include the specified configuration file(s).  Multiple pathnames may be specified and each pathname may contain glob(7) wildcards that will be expanded and
             processed in lexical order.  Files without absolute paths are assumed to be in /etc/ssh.  An Include directive may appear inside a Match block to perform con‐
             ditional inclusion.

     IPQoS   Specifies the IPv4 type-of-service or DSCP class for the connection.  Accepted values are af11, af12, af13, af21, af22, af23, af31, af32, af33, af41, af42,
             af43, cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7, ef, le, lowdelay, throughput, reliability, a numeric value, or none to use the operating system default.  This
             option may take one or two arguments, separated by whitespace.  If one argument is specified, it is used as the packet class unconditionally.  If two values
             are specified, the first is automatically selected for interactive sessions and the second for non-interactive sessions.  The default is lowdelay for interac‐
             tive sessions and throughput for non-interactive sessions.

     KbdInteractiveAuthentication
             Specifies whether to allow keyboard-interactive authentication.  The argument to this keyword must be yes or no.  The default is to use whatever value
             ChallengeResponseAuthentication is set to (by default yes).

     KerberosAuthentication
             Specifies whether the password provided by the user for PasswordAuthentication will be validated through the Kerberos KDC.  To use this option, the server
             needs a Kerberos servtab which allows the verification of the KDC's identity.  The default is no.

     KerberosGetAFSToken
             If AFS is active and the user has a Kerberos 5 TGT, attempt to acquire an AFS token before accessing the user's home directory.  The default is no.

     KerberosOrLocalPasswd
             If password authentication through Kerberos fails then the password will be validated via any additional local mechanism such as /etc/passwd.  The default is
             yes.

     KerberosTicketCleanup
             Specifies whether to automatically destroy the user's ticket cache file on logout.  The default is yes.

     KexAlgorithms
             Specifies the available KEX (Key Exchange) algorithms.  Multiple algorithms must be comma-separated.  Alternately if the specified list begins with a ‘+’
             character, then the specified methods will be appended to the default set instead of replacing them.  If the specified list begins with a ‘-’ character, then
             the specified methods (including wildcards) will be removed from the default set instead of replacing them.  If the specified list begins with a ‘^’ charac‐
             ter, then the specified methods will be placed at the head of the default set.  The supported algorithms are:

                   curve25519-sha256
                   curve25519-sha256@libssh.org
                   diffie-hellman-group1-sha1
                   diffie-hellman-group14-sha1
                   diffie-hellman-group14-sha256
                   diffie-hellman-group16-sha512
                   diffie-hellman-group18-sha512
                   diffie-hellman-group-exchange-sha1
                   diffie-hellman-group-exchange-sha256
                   ecdh-sha2-nistp256
                   ecdh-sha2-nistp384
                   ecdh-sha2-nistp521
                   sntrup4591761x25519-sha512@tinyssh.org

             The default is:

                   curve25519-sha256,curve25519-sha256@libssh.org,
                   ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,
                   diffie-hellman-group-exchange-sha256,
                   diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,
                   diffie-hellman-group14-sha256

             The list of available key exchange algorithms may also be obtained using "ssh -Q KexAlgorithms".

     ListenAddress
             Specifies the local addresses sshd(8) should listen on.  The following forms may be used:

                   ListenAddress hostname|address [rdomain domain]
                   ListenAddress hostname:port [rdomain domain]
                   ListenAddress IPv4_address:port [rdomain domain]
                   ListenAddress [hostname|address]:port [rdomain domain]

             The optional rdomain qualifier requests sshd(8) listen in an explicit routing domain.  If port is not specified, sshd will listen on the address and all Port
             options specified.  The default is to listen on all local addresses on the current default routing domain.  Multiple ListenAddress options are permitted.  For
             more information on routing domains, see rdomain(4).

     LoginGraceTime
             如果用户未成功登录，则服务器在此之后断开连接。如果值为0，则没有时间限制。默认值为120秒。

     LogLevel
             给出记录来自sshd（8）的消息时使用的详细级别。可能的值有：QUIET、FATAL、ERROR、INFO、VERBOSE、DEBUG、DEBUG1、DEBUG2和DEBUG3。默认值为INFO。DEBUG和DEBUG1是等效的。DEBUG2和DEBUG3分别指定更高级别的调试输出。使用DEBUG级别进行日志记录会侵犯用户的隐私，因此不建议使用。

     MACs    Specifies the available MAC (message authentication code) algorithms.  The MAC algorithm is used for data integrity protection.  Multiple algorithms must be
             comma-separated.  If the specified list begins with a ‘+’ character, then the specified algorithms will be appended to the default set instead of replacing
             them.  If the specified list begins with a ‘-’ character, then the specified algorithms (including wildcards) will be removed from the default set instead of
             replacing them.  If the specified list begins with a ‘^’ character, then the specified algorithms will be placed at the head of the default set.

             The algorithms that contain "-etm" calculate the MAC after encryption (encrypt-then-mac).  These are considered safer and their use recommended.  The sup‐
             ported MACs are:

                   hmac-md5
                   hmac-md5-96
                   hmac-sha1
                   hmac-sha1-96
                   hmac-sha2-256
                   hmac-sha2-512
                   umac-64@openssh.com
                   umac-128@openssh.com
                   hmac-md5-etm@openssh.com
                   hmac-md5-96-etm@openssh.com
                   hmac-sha1-etm@openssh.com
                   hmac-sha1-96-etm@openssh.com
                   hmac-sha2-256-etm@openssh.com
                   hmac-sha2-512-etm@openssh.com
                   umac-64-etm@openssh.com
                   umac-128-etm@openssh.com

             The default is:

                   umac-64-etm@openssh.com,umac-128-etm@openssh.com,
                   hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,
                   hmac-sha1-etm@openssh.com,
                   umac-64@openssh.com,umac-128@openssh.com,
                   hmac-sha2-256,hmac-sha2-512,hmac-sha1

             The list of available MAC algorithms may also be obtained using "ssh -Q mac".

     Match   Introduces a conditional block.  If all of the criteria on the Match line are satisfied, the keywords on the following lines override those set in the global
             section of the config file, until either another Match line or the end of the file.  If a keyword appears in multiple Match blocks that are satisfied, only
             the first instance of the keyword is applied.

             The arguments to Match are one or more criteria-pattern pairs or the single token All which matches all criteria.  The available criteria are User, Group,
             Host, LocalAddress, LocalPort, RDomain, and Address (with RDomain representing the rdomain(4) on which the connection was received).

             The match patterns may consist of single entries or comma-separated lists and may use the wildcard and negation operators described in the PATTERNS section of
             ssh_config(5).

             The patterns in an Address criteria may additionally contain addresses to match in CIDR address/masklen format, such as 192.0.2.0/24 or 2001:db8::/32.  Note
             that the mask length provided must be consistent with the address - it is an error to specify a mask length that is too long for the address or one with bits
             set in this host portion of the address.  For example, 192.0.2.0/33 and 192.0.2.0/8, respectively.

             Only a subset of keywords may be used on the lines following a Match keyword.  Available keywords are AcceptEnv, AllowAgentForwarding, AllowGroups,
             AllowStreamLocalForwarding, AllowTcpForwarding, AllowUsers, AuthenticationMethods, AuthorizedKeysCommand, AuthorizedKeysCommandUser, AuthorizedKeysFile,
             AuthorizedPrincipalsCommand, AuthorizedPrincipalsCommandUser, AuthorizedPrincipalsFile, Banner, ChrootDirectory, ClientAliveCountMax, ClientAliveInterval,
             DenyGroups, DenyUsers, ForceCommand, GatewayPorts, GSSAPIAuthentication, HostbasedAcceptedKeyTypes, HostbasedAuthentication, HostbasedUsesNameFromPacketOnly,
             IgnoreRhosts, Include, IPQoS, KbdInteractiveAuthentication, KerberosAuthentication, LogLevel, MaxAuthTries, MaxSessions, PasswordAuthentication,
             PermitEmptyPasswords, PermitListen, PermitOpen, PermitRootLogin, PermitTTY, PermitTunnel, PermitUserRC, PubkeyAcceptedKeyTypes, PubkeyAuthentication,
             RekeyLimit, RevokedKeys, RDomain, SetEnv, StreamLocalBindMask, StreamLocalBindUnlink, TrustedUserCAKeys, X11DisplayOffset, X11Forwarding and X11UseLocalhost.

     MaxAuthTries
             指定每个连接允许的最大身份验证尝试次数。一旦故障数量达到该值的一半，就会记录其他故障。默认值为6。

     MaxSessions
             指定每个网络连接允许的最大打开外壳程序、登录或子系统（如sftp）会话数。支持连接多路复用的客户端可以建立多个会话。将MaxSessions设置为1将有效地禁用会话多路复用，而将其设置为0将阻止所有shell、登录和子系统会话，同时仍允许转发。默认值为10。

     MaxStartups
             指定到SSH守护程序的未经身份验证的并发连接的最大数目。在身份验证成功或连接的LoginRaceTime到期之前，将丢弃其他连接。默认值为10:30:100。

             Alternatively, random early drop can be enabled by specifying the three colon separated values start:rate:full (e.g. "10:30:60").  sshd(8) will refuse connec‐
             tion attempts with a probability of rate/100 (30%) if there are currently start (10) unauthenticated connections.  The probability increases linearly and all
             connection attempts are refused if the number of unauthenticated connections reaches full (60).

     PasswordAuthentication
             指定是否允许密码身份验证。默认值为yes。

     PermitEmptyPasswords
             当允许密码身份验证时，它指定服务器是否允许登录到具有空密码字符串的帐户。默认为no。

     PermitListen
             指定远程TCP端口转发可以侦听的地址/端口。侦听规范必须是以下形式之一：

                   PermitListen port
                   PermitListen host:port

             Multiple permissions may be specified by separating them with whitespace.  An argument of any can be used to remove all restrictions and permit any listen re‐
             quests.  An argument of none can be used to prohibit all listen requests.  The host name may contain wildcards as described in the PATTERNS section in
             ssh_config(5).  The wildcard ‘*’ can also be used in place of a port number to allow all ports.  By default all port forwarding listen requests are permitted.
             Note that the GatewayPorts option may further restrict which addresses may be listened on.  Note also that ssh(1) will request a listen host of “localhost” if
             no listen host was specifically requested, and this name is treated differently to explicit localhost addresses of “127.0.0.1” and “::1”.

     PermitOpen
             指定允许TCP端口转发到的目标。转发规范必须是以下形式之一：

                   PermitOpen host:port
                   PermitOpen IPv4_addr:port
                   PermitOpen [IPv6_addr]:port

             Multiple forwards may be specified by separating them with whitespace.  An argument of any can be used to remove all restrictions and permit any forwarding
             requests.  An argument of none can be used to prohibit all forwarding requests.  The wildcard ‘*’ can be used for host or port to allow all hosts or ports re‐
             spectively.  Otherwise, no pattern matching or address lookups are performed on supplied names.  By default all port forwarding requests are permitted.

     PermitRootLogin
             指定root用户是否可以使用ssh（1）登录。参数必须是yes、禁止密码、仅强制命令或no。默认值为prohibit-password。

             如果此选项设置为prohibit-password（或其不推荐使用的别名，without-password），则将禁用root用户的密码和键盘交互式身份验证。

             如果此选项仅设置为强制命令，则将允许使用公钥身份验证的root登录，但前提是已指定命令选项（即使通常不允许root登录，这也可能有助于进行远程备份）。对root用户禁用所有其他身份验证方法。

             如果此选项设置为no，则不允许root用户登录。

     PermitTTY
             指定是否允许pty（4）分配。默认值为yes。

     PermitTunnel
             指定是否允许tun（4）设备转发。参数必须是yes、点对点（第3层）、以太网（第2层）或no。指定yes允许点对点和以太网。默认为no。

             独立于此设置，所选tun（4）设备的权限必须允许用户访问。

     PermitUserEnvironment
             Specifies whether ~/.ssh/environment and environment= options in ~/.ssh/authorized_keys are processed by sshd(8).  Valid options are yes, no or a pattern-list
             specifying which environment variable names to accept (for example "LANG,LC_*").  The default is no.  Enabling environment processing may enable users to by‐
             pass access restrictions in some configurations using mechanisms such as LD_PRELOAD.

     PermitUserRC
             指定是否执行任何~/.ssh/rc文件。默认值为yes。

     PidFile
             指定包含SSH守护进程的进程ID的文件，或者none指定不写入进程ID。默认值为/run/shd.pid。

     Port    指定sshd（8）侦听的端口号。默认值为22。允许有多个此类型的选项。另请参见侦听地址。

     PrintLastLog
             指定用户交互登录时，sshd（8）是否应打印最后一次用户登录的日期和时间。默认值为yes。

     PrintMotd
             指定用户交互登录时，sshd（8）是否应打印/etc/motd。（在某些系统上，它也由shell、/etc/profile或等效文件打印。）默认值为yes。

     PubkeyAcceptedKeyTypes
             Specifies the key types that will be accepted for public key authentication as a list of comma-separated patterns.  Alternately if the specified list begins
             with a ‘+’ character, then the specified key types will be appended to the default set instead of replacing them.  If the specified list begins with a ‘-’
             character, then the specified key types (including wildcards) will be removed from the default set instead of replacing them.  If the specified list begins
             with a ‘^’ character, then the specified key types will be placed at the head of the default set.  The default for this option is:

                ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ecdsa-sha2-nistp384-cert-v01@openssh.com,
                ecdsa-sha2-nistp521-cert-v01@openssh.com,
                sk-ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ssh-ed25519-cert-v01@openssh.com,
                sk-ssh-ed25519-cert-v01@openssh.com,
                rsa-sha2-512-cert-v01@openssh.com,
                rsa-sha2-256-cert-v01@openssh.com,
                ssh-rsa-cert-v01@openssh.com,
                ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,
                sk-ecdsa-sha2-nistp256@openssh.com,
                ssh-ed25519,sk-ssh-ed25519@openssh.com,
                rsa-sha2-512,rsa-sha2-256,ssh-rsa

             可用密钥类型的列表也可以使用“ssh-Q PubkeyAcceptedKeyTypes”获得。

     PubkeyAuthOptions
             设置一个或多个公钥身份验证选项。支持的关键字为：none（默认值；表示未启用其他选项）、touch required和verify required。

             The touch-required option causes public key authentication using a FIDO authenticator algorithm (i.e. ecdsa-sk or ed25519-sk) to always require the signature
             to attest that a physically present user explicitly confirmed the authentication (usually by touching the authenticator).  By default, sshd(8) requires user
             presence unless overridden with an authorized_keys option.  The touch-required flag disables this override.

             The verify-required option requires a FIDO key signature attest that the user was verified, e.g. via a PIN.

             Neither the touch-required or verify-required options have any effect for other, non-FIDO, public key types.

     PubkeyAuthentication
             指定是否允许公钥身份验证。默认值为yes。

     RekeyLimit
             Specifies the maximum amount of data that may be transmitted before the session key is renegotiated, optionally followed a maximum amount of time that may
             pass before the session key is renegotiated.  The first argument is specified in bytes and may have a suffix of ‘K’, ‘M’, or ‘G’ to indicate Kilobytes,
             Megabytes, or Gigabytes, respectively.  The default is between ‘1G’ and ‘4G’, depending on the cipher.  The optional second value is specified in seconds and
             may use any of the units documented in the TIME FORMATS section.  The default value for RekeyLimit is default none, which means that rekeying is performed af‐
             ter the cipher's default amount of data has been sent or received and no time based rekeying is done.

     RevokedKeys
             Specifies revoked public keys file, or none to not use one.  Keys listed in this file will be refused for public key authentication.  Note that if this file
             is not readable, then public key authentication will be refused for all users.  Keys may be specified as a text file, listing one public key per line, or as
             an OpenSSH Key Revocation List (KRL) as generated by ssh-keygen(1).  For more information on KRLs, see the KEY REVOCATION LISTS section in ssh-keygen(1).

     RDomain
             指定身份验证完成后应用的显式路由域。用户会话以及任何转发或侦听的IP套接字都将绑定到此rdmain（4）。如果路由域设置为%D，则将应用接收传入连接的域。

     SecurityKeyProvider
             指定加载FIDO验证器托管密钥时将使用的库的路径，覆盖使用内置USB HID支持的默认值。

     SetEnv  Specifies one or more environment variables to set in child sessions started by sshd(8) as “NAME=VALUE”.  The environment value may be quoted (e.g. if it con‐
             tains whitespace characters).  Environment variables set by SetEnv override the default environment and any variables specified by the user via AcceptEnv or
             PermitUserEnvironment.

     StreamLocalBindMask
             Sets the octal file creation mode mask (umask) used when creating a Unix-domain socket file for local or remote port forwarding.  This option is only used for
             port forwarding to a Unix-domain socket file.

             The default value is 0177, which creates a Unix-domain socket file that is readable and writable only by the owner.  Note that not all operating systems honor
             the file mode on Unix-domain socket files.

     StreamLocalBindUnlink
             Specifies whether to remove an existing Unix-domain socket file for local or remote port forwarding before creating a new one.  If the socket file already ex‐
             ists and StreamLocalBindUnlink is not enabled, sshd will be unable to forward the port to the Unix-domain socket file.  This option is only used for port for‐
             warding to a Unix-domain socket file.

             The argument must be yes or no.  The default is no.

     StrictModes
             Specifies whether sshd(8) should check file modes and ownership of the user's files and home directory before accepting login.  This is normally desirable be‐
             cause novices sometimes accidentally leave their directory or files world-writable.  The default is yes.  Note that this does not apply to ChrootDirectory,
             whose permissions and ownership are checked unconditionally.

     Subsystem
             Configures an external subsystem (e.g. file transfer daemon).  Arguments should be a subsystem name and a command (with optional arguments) to execute upon
             subsystem request.

             The command sftp-server implements the SFTP file transfer subsystem.

             Alternately the name internal-sftp implements an in-process SFTP server.  This may simplify configurations using ChrootDirectory to force a different filesys‐
             tem root on clients.

             By default no subsystems are defined.

     SyslogFacility
             给出记录来自sshd（8）的消息时使用的工具代码。可能的值为：DAEMON、USER、AUTH、LOCAL0、LOCAL1、LOCAL2、LOCAL3、LOCAL4、LOCAL5、LOCAL6、LOCAL7。默认值为AUTH。

     TCPKeepAlive
             Specifies whether the system should send TCP keepalive messages to the other side.  If they are sent, death of the connection or crash of one of the machines
             will be properly noticed.  However, this means that connections will die if the route is down temporarily, and some people find it annoying.  On the other
             hand, if TCP keepalives are not sent, sessions may hang indefinitely on the server, leaving "ghost" users and consuming server resources.

             The default is yes (to send TCP keepalive messages), and the server will notice if the network goes down or the client host crashes.  This avoids infinitely
             hanging sessions.

             To disable TCP keepalive messages, the value should be set to no.

             This option was formerly called KeepAlive.

     TrustedUserCAKeys
             Specifies a file containing public keys of certificate authorities that are trusted to sign user certificates for authentication, or none to not use one.
             Keys are listed one per line; empty lines and comments starting with ‘#’ are allowed.  If a certificate is presented for authentication and has its signing CA
             key listed in this file, then it may be used for authentication for any user listed in the certificate's principals list.  Note that certificates that lack a
             list of principals will not be permitted for authentication using TrustedUserCAKeys.  For more details on certificates, see the CERTIFICATES section in
             ssh-keygen(1).

     UseDNS  Specifies whether sshd(8) should look up the remote host name, and to check that the resolved host name for the remote IP address maps back to the very same
             IP address.

             If this option is set to no (the default) then only addresses and not host names may be used in ~/.ssh/authorized_keys from and sshd_config Match Host direc‐
             tives.

     UsePAM  Enables the Pluggable Authentication Module interface.  If set to yes this will enable PAM authentication using ChallengeResponseAuthentication and
             PasswordAuthentication in addition to PAM account and session module processing for all authentication types.

             Because PAM challenge-response authentication usually serves an equivalent role to password authentication, you should disable either PasswordAuthentication
             or ChallengeResponseAuthentication.

             如果启用了UsePAM，您将无法以非root用户身份运行sshd（8）。默认为否。

     VersionAddendum
             （可选）指定附加文本，以附加到服务器在连接时发送的SSH协议标题中。默认值为none。

     X11DisplayOffset
             指定可用于sshd（8）的X11转发的第一个显示编号。这可以防止sshd干扰真正的X11服务器。默认值为10。

     X11Forwarding
             Specifies whether X11 forwarding is permitted.  The argument must be yes or no.  The default is no.

             When X11 forwarding is enabled, there may be additional exposure to the server and to client displays if the sshd(8) proxy display is configured to listen on
             the wildcard address (see X11UseLocalhost), though this is not the default.  Additionally, the authentication spoofing and authentication data verification
             and substitution occur on the client side.  The security risk of using X11 forwarding is that the client's X11 display server may be exposed to attack when
             the SSH client requests forwarding (see the warnings for ForwardX11 in ssh_config(5)).  A system administrator may have a stance in which they want to protect
             clients that may expose themselves to attack by unwittingly requesting X11 forwarding, which can warrant a no setting.

             Note that disabling X11 forwarding does not prevent users from forwarding X11 traffic, as users can always install their own forwarders.

     X11UseLocalhost
             Specifies whether sshd(8) should bind the X11 forwarding server to the loopback address or to the wildcard address.  By default, sshd binds the forwarding
             server to the loopback address and sets the hostname part of the DISPLAY environment variable to localhost.  This prevents remote hosts from connecting to the
             proxy display.  However, some older X11 clients may not function with this configuration.  X11UseLocalhost may be set to no to specify that the forwarding
             server should be bound to the wildcard address.  The argument must be yes or no.  The default is yes.

     XAuthLocation
             指定xauth（1）程序的完整路径名，如果不使用，则指定none。默认值为/usr/bin/xauth。

TIME FORMATS
     指定时间的sshd（8）命令行参数和配置文件选项可以使用以下形式的序列来表示：time[qualifier]，其中时间是一个正整数值，qualifier是以下其中之一：

           ⟨none⟩  seconds
           s | S   seconds
           m | M   minutes
           h | H   hours
           d | D   days
           w | W   weeks

     将序列中的每个成员相加，以计算总时间值。

     时间格式示例：

           600     600 seconds (10 minutes)
           10m     10 minutes
           1h30m   1 hour 30 minutes (90 minutes)

TOKENS
     某些关键字的参数可以使用在运行时扩展的tokens：

           %%    A literal ‘%’.
           %D    The routing domain in which the incoming connection was received.
           %F    The fingerprint of the CA key.
           %f    The fingerprint of the key or certificate.
           %h    The home directory of the user.
           %i    The key ID in the certificate.
           %K    The base64-encoded CA key.
           %k    The base64-encoded key or certificate for authentication.
           %s    The serial number of the certificate.
           %T    The type of the CA key.
           %t    The key or certificate type.
           %U    The numeric user ID of the target user.
           %u    The username.

     AuthorizedKeysCommand accepts the tokens %%, %f, %h, %k, %t, %U, and %u.

     AuthorizedKeysFile accepts the tokens %%, %h, %U, and %u.

     AuthorizedPrincipalsCommand accepts the tokens %%, %F, %f, %h, %i, %K, %k, %s, %T, %t, %U, and %u.

     AuthorizedPrincipalsFile accepts the tokens %%, %h, %U, and %u.

     ChrootDirectory accepts the tokens %%, %h, %U, and %u.

     RoutingDomain accepts the token %D.

FILES
     /etc/ssh/sshd_config
             Contains configuration data for sshd(8).  This file should be writable by root only, but it is recommended (though not necessary) that it be world-readable.

SEE ALSO
     sftp-server(8), sshd(8)

AUTHORS
     OpenSSH is a derivative of the original and free ssh 1.2.12 release by Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo de Raadt and Dug Song
     removed many bugs, re-added newer features and created OpenSSH.  Markus Friedl contributed the support for SSH protocol versions 1.5 and 2.0.  Niels Provos and Markus
     Friedl contributed support for privilege separation.

BSD                                                                           August 27, 2020                                                                           BSD
