function
--------

开始记录函数以供稍后作为命令调用。

 function(<name> [<arg1> ...])
   <commands>
 endfunction()

定义名为 ``<name>`` 的函数，该函数接受名为 ``<arg1>`` 等的参数。函数定义中的 ``<commands>`` 会被记录；它们直到函数被调用时才执行。

按传统，``endfunction()`` 命令接受可选的 ``<name>`` 参数。如果使用，它必须是开头 ``function`` 命令参数的逐字重复。

函数打开新作用域：有关详细信息，请参阅 ``set(var PARENT_SCOPE)``。

有关函数内策略的行为，请参阅 ``cmake_policy()`` 命令文档。

有关 CMake 函数和宏之间的差异，请参阅 ``macro()`` 命令文档。

调用
^^^^

函数调用不区分大小写。定义为

 function(foo)
   <commands>
 endfunction()

的函数可以通过以下方式调用

 foo()
 Foo()
 FOO()
 cmake_language(CALL foo)

等等。然而，强烈建议坚持使用函数定义中选择的大小写。通常函数使用全小写名称。

``cmake_language(CALL ...)`` 命令也可用于调用该函数。

参数
^^^^^

当函数被调用时，记录的 ``<commands>`` 首先通过用传递的参数替换形式参数（``${arg1}`` 等）进行修改，然后作为正常命令调用。

除了引用形式参数外，还可以引用 ``ARGC`` 变量，该变量将设置为传递给函数的参数数量，以及 ``ARGV0``、``ARGV1``、``ARGV2`` 等，
它们将具有传入的实际参数值。这有助于创建具有可选参数的函数。

此外，``ARGV`` 保存给函数的所有参数列表，``ARGN`` 保存最后一个预期参数之后的参数列表。
引用超出 ``ARGC`` 的 ``ARGV#`` 参数具有未定义行为。检查 ``ARGC`` 是否大于 ``#`` 是确保 ``ARGV#`` 作为额外参数传递给函数的唯一方法。