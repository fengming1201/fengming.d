target_compile_options
----------------------

为target添加编译选项。

 target_compile_options(<target> [BEFORE]
   <INTERFACE|PUBLIC|PRIVATE> [items1...]
   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

将选项添加到``COMPILE_OPTIONS``或``INTERFACE_COMPILE_OPTIONS``目标属性。
这些选项用于编译给定的``<target>``，该目标必须由诸如``add_executable()``或
``add_library()``之类的命令创建，且不能是:ref:`ALIAS target <Alias Targets>`。

参数
^^^^^

如果指定了``BEFORE``，内容将被前置到属性中，而不是追加。

需要``INTERFACE``、``PUBLIC``和``PRIVATE``关键字来指定后续参数的作用域。
``PRIVATE``和``PUBLIC``项将填充``<target>``的``COMPILE_OPTIONS``属性。
``PUBLIC``和``INTERFACE``项将填充``<target>``的``INTERFACE_COMPILE_OPTIONS``属性。
(:ref:`IMPORTED targets <Imported Targets>`仅支持``INTERFACE``项。)
后续参数指定编译选项。对同一``<target>``的重复调用将按调用顺序追加项。

``target_compile_options``的参数可以使用语法为``$<...>``的"生成器表达式"。
请参见``cmake-generator-expressions(7)``手册以了解可用表达式。
有关定义构建系统属性的更多信息，请参见``cmake-buildsystem(7)``手册。

用于目标的最终编译或链接选项集是通过累积当前目标及其依赖项的使用要求来构建的。
该选项集会被去重以避免重复。虽然这对单个选项有益，但去重步骤可能会破坏选项组。
例如，``-D A -D B``变为``-D A B``。可以使用类shell的引号加上``SHELL:``前缀来指定选项组。
``SHELL:``前缀会被删除，其余选项字符串使用``separate_arguments()``的``UNIX_COMMAND``模式进行解析。
例如，``"SHELL:-D A" "SHELL:-D B"``变为``-D A -D B``。

另请参见
^^^^^^^^

此命令可用于添加任何选项。但是，对于添加预处理器定义和包含目录，
建议使用更具体的命令``target_compile_definitions()``和``target_include_directories()``。

对于目录范围的设置，有命令``add_compile_options()``。

对于特定于文件的设置，有源文件属性``COMPILE_OPTIONS``。