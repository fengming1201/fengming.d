add_executable
--------------

使用指定的源文件向项目添加可执行文件。

普通可执行文件
^^^^^^^^^^^^^^^^^^

 add_executable(<名称> [WIN32] [MACOSX_BUNDLE]
                [EXCLUDE_FROM_ALL]
                [源文件1] [源文件2 ...])

添加一个名为 ``<名称>`` 的可执行目标，由命令调用中列出的源文件构建。（如果源文件稍后使用 ``target_sources()`` 添加，这里可以省略。）
``<名称>`` 对应于逻辑目标名称，必须在项目中全局唯一。构建的可执行文件的实际文件名基于本地平台的约定构建（如 ``<名称>.exe`` 或仅 ``<名称>``）。

默认情况下，可执行文件将在与调用命令的源树目录对应的构建树目录中创建。
有关更改此位置的信息，请参阅 ``RUNTIME_OUTPUT_DIRECTORY`` 目标属性的文档。
有关更改最终文件名中 ``<名称>`` 部分的信息，请参阅 ``OUTPUT_NAME`` 目标属性的文档。

如果给出 ``WIN32``，将在创建的目标上设置 ``WIN32_EXECUTABLE`` 属性。有关该目标属性的详细信息，请参阅其文档。

如果给出 ``MACOSX_BUNDLE``，将在创建的目标上设置相应的属性。有关 ``MACOSX_BUNDLE`` 目标属性的详细信息，请参阅其文档。

如果给出 ``EXCLUDE_FROM_ALL``，将在创建的目标上设置相应的属性。有关 ``EXCLUDE_FROM_ALL`` 目标属性的详细信息，请参阅其文档。

``add_executable`` 的源参数可以使用语法为 ``$<...>`` 的"生成器表达式"。
有关可用表达式，请参阅 ``cmake-generator-expressions(7)`` 手册。有关定义构建系统属性的更多信息，请参阅 ``cmake-buildsystem(7)`` 手册。

另请参阅 ``HEADER_FILE_ONLY``，了解如果某些源文件经过预处理，而您希望原始源文件在 IDE 中可访问时该怎么做。

导入的可执行文件
^^^^^^^^^^^^^^^^^^^^

 add_executable(<名称> IMPORTED [GLOBAL])

:ref:`导入的可执行目标 <Imported Targets>` 引用位于项目外部的可执行文件。
不会生成构建它的规则，且 ``IMPORTED`` 目标属性为 ``True``。目标名称具有创建它的目录及其子目录的作用域，但 ``GLOBAL`` 选项扩展了可见性。
它可以像项目中构建的任何目标一样被引用。``IMPORTED`` 可执行文件对于从 ``add_custom_command()`` 等命令中方便引用很有用。
有关导入可执行文件的详细信息通过设置以 ``IMPORTED_`` 开头的属性指定。
最重要的此类属性是 ``IMPORTED_LOCATION``（及其按配置版本 ``IMPORTED_LOCATION_<CONFIG>``），它指定磁盘上主可执行文件的位置。
有关更多信息，请参阅 ``IMPORTED_*`` 属性的文档。

别名可执行文件
^^^^^^^^^^^^^^^^^

 add_executable(<名称> ALIAS <目标>)

创建 :ref:`别名目标 <Alias Targets>`，使得 ``<名称>`` 可以在后续命令中用于引用 ``<目标>``。``<名称>`` 不会作为 make 目标出现在生成的构建系统中。``<目标>`` 不能是 ``ALIAS``。

对非 ``GLOBAL`` :ref:`导入目标 <Imported Targets>` 的 ``ALIAS`` 具有创建别名的目录及其子目录的作用域。``ALIAS_GLOBAL`` 目标属性可用于检查别名是否为全局。

``ALIAS`` 目标可以用作从中读取属性的目标、自定义命令和自定义目标的可执行文件。
  它们也可以用常规 ``if(TARGET)`` 子命令测试是否存在。``<名称>`` 不能用于修改 ``<目标>`` 的属性，也就是说，它不能用作 ``set_property()``、
``set_target_properties()``、``target_link_libraries()`` 等的操作数。``ALIAS`` 目标不能被安装或导出。