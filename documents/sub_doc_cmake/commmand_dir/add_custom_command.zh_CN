add_custom_command
------------------

向生成的构建系统添加自定义构建规则。

add_custom_command有两个主要签名。

生成文件
^^^^^^^^

第一个签名用于添加自定义命令来生成输出：

 add_custom_command(OUTPUT output1 [output2 ...]
                    COMMAND command1 [ARGS] [args1...]
                    [COMMAND command2 [ARGS] [args2...] ...]
                    [MAIN_DEPENDENCY depend]
                    [DEPENDS [depends...]]
                    [BYPRODUCTS [files...]]
                    [IMPLICIT_DEPENDS <lang1> depend1
                                     [<lang2> depend2] ...]
                    [WORKING_DIRECTORY dir]
                    [COMMENT comment]
                    [DEPFILE depfile]
                    [JOB_POOL job_pool]
                    [VERBATIM] [APPEND] [USES_TERMINAL]
                    [COMMAND_EXPAND_LISTS])

这定义了一个命令来生成指定的OUTPUT文件。在同一个目录(CMakeLists.txt文件)中创建的任何目标，
只要将自定义命令的任何输出指定为源文件，都会获得在构建时使用该命令生成文件的规则。
不要将输出列在可能并行构建的多个独立目标中，否则两个规则实例可能会冲突(相反，使用add_custom_target()命令来驱动命令，并使其他目标依赖于该目标)。

在makefile术语中，这创建了一个如下形式的新目标：

 OUTPUT: MAIN_DEPENDENCY DEPENDS
         COMMAND

选项有：

``APPEND``
  将COMMAND和DEPENDS选项值附加到第一个指定输出的自定义命令。必须已经存在对此命令的先前调用，且输出相同。
  当给定APPEND时，目前会忽略COMMENT、MAIN_DEPENDENCY和WORKING_DIRECTORY选项，但将来可能会使用。

``BYPRODUCTS``
  指定命令预期产生的文件，但其修改时间可能比依赖项更新或更旧。如果副产品名称是相对路径，
  它将被解释为相对于当前源目录对应的构建树目录。每个副产品文件将自动标记GENERATED源文件属性。

  明确指定副产品受到Ninja生成器的支持，用于告诉ninja构建工具如何在缺少副产品时重新生成它们。
  当其他构建规则(例如自定义命令)依赖于副产品时也很有用。Ninja要求对任何生成文件(其他规则依赖于该文件)都有构建规则，
  即使有顺序依赖项，也要确保副产品将在其依赖项构建之前可用。

  Makefile生成器将在make clean期间删除BYPRODUCTS和其他GENERATED文件。

``COMMAND``
  指定在构建时要执行的命令行。如果指定了多个COMMAND，它们将按顺序执行，但不一定组合到有状态的shell或批处理脚本中。
  (要运行完整脚本，请使用configure_file()命令或file(GENERATE)命令创建它，然后指定COMMAND来启动它。)可选的ARGS参数是为了向后兼容，将被忽略。

  如果COMMAND指定了可执行目标名称(由add_executable()命令创建)，如果满足以下任一条件，它将自动被构建时创建的可执行文件位置替换：

  * 目标未被交叉编译(即CMAKE_CROSSCOMPILING变量未设置为true)。
  * 目标正在被交叉编译且提供了模拟器(即其CROSSCOMPILING_EMULATOR目标属性已设置)。
    在这种情况下，CROSSCOMPILING_EMULATOR的内容将在目标可执行文件位置之前添加到命令中。

  如果以上条件都不满足，则假定命令名称是构建时在PATH上找到的程序。

  COMMAND的参数可以使用生成器表达式。使用TARGET_FILE生成器表达式在命令行中稍后引用目标位置(即作为命令参数而不是要执行的命令)。

  每当目标用作要执行的命令或在生成器表达式中作为命令参数提及时，将自动添加目标级依赖项，以便提及的目标将在使用此自定义命令的任何目标之前构建。
  然而，这不会添加文件级依赖项，该依赖项会导致每当可执行文件重新编译时自定义命令重新运行。使用DEPENDS选项列出目标名称以添加此类文件级依赖项。

``COMMENT``
  在构建时执行命令之前显示给定的消息。

``DEPENDS``
  指定命令所依赖的文件。每个参数按如下方式转换为依赖项：

  1. 如果参数是目标名称(由add_custom_target()、add_executable()或add_library()命令创建)，
  则创建目标级依赖项以确保目标在使用此自定义命令的任何目标之前构建。此外，如果目标是可执行文件或库，
  则创建文件级依赖项以在目标重新编译时导致自定义命令重新运行。

  2. 如果参数是绝对路径，则在该路径上创建文件级依赖项。

  3. 如果参数是已添加到目标或已设置源文件属性的源文件名称，则在该源文件上创建文件级依赖项。

  4. 如果参数是相对路径且存在于当前源目录中，则在当前源目录中的该文件上创建文件级依赖项。

  5. 否则，在相对于当前二进制目录的路径上创建文件级依赖项。

  如果任何依赖项是同一目录(CMakeLists.txt文件)中另一个自定义命令的OUTPUT，CMake会自动将另一个自定义命令带入构建此命令的目标中。
  如果任何依赖项被列为同一目录中目标或其构建事件的BYPRODUCTS，则会添加目标级依赖项以确保副产品将可用。

  如果未指定DEPENDS，则每当OUTPUT缺失时命令将运行；如果命令实际上未创建OUTPUT，则规则将始终运行。

  DEPENDS的参数可以使用生成器表达式。

``COMMAND_EXPAND_LISTS``
  COMMAND参数中的列表将被扩展，包括那些使用生成器表达式创建的列表，允许诸如${CC} "-I$<JOIN:$<TARGET_PROPERTY:foo,INCLUDE_DIRECTORIES>,;-I>" foo.cc之类的COMMAND参数被正确扩展。

``IMPLICIT_DEPENDS``
  请求扫描输入文件的隐式依赖项。给定的语言指定应使用的编程语言的相应依赖项扫描器。目前仅支持C和CXX语言扫描器。
  必须为IMPLICIT_DEPENDS列表中的每个文件指定语言。从扫描中发现的依赖项在构建时添加到自定义命令的依赖项中。
  注意，IMPLICIT_DEPENDS选项目前仅受Makefile生成器支持，其他生成器将忽略它。

``JOB_POOL``
  为Ninja生成器指定pool。与USES_TERMINAL不兼容，后者暗示console池。使用未由JOB_POOLS定义的池会导致ninja在构建时出错。

``MAIN_DEPENDENCY``
  指定命令的主要输入源文件。这被视为与给DEPENDS选项的任何值相同，但也向Visual Studio生成器建议在哪里挂接自定义命令。
  每个源文件最多只能有一个命令指定其为主要依赖项。编译命令(即库或可执行文件的编译命令)算作隐式主要依赖项，会被自定义命令规范静默覆盖。

``OUTPUT``
  指定命令预期产生的输出文件。如果输出名称是相对路径，它将被解释为相对于当前源目录对应的构建树目录。
  每个输出文件将自动标记GENERATED源文件属性。如果自定义命令的输出实际上未作为文件在磁盘上创建，则应使用SYMBOLIC源文件属性标记。

``USES_TERMINAL``
  如果可能，命令将被给予对终端的直接访问。使用Ninja生成器时，这会将命令放入console pool。

``VERBATIM``
  命令的所有参数都将为构建工具正确转义，以便被调用的命令接收每个参数不变。注意，在add_custom_command看到参数之前，
  CMake语言处理器仍使用一级转义。建议使用VERBATIM，因为它启用正确行为。当未给定VERBATIM时，行为是平台特定的，因为没有工具特定特殊字符的保护。

``WORKING_DIRECTORY``
  使用给定的当前工作目录执行命令。如果是相对路径，它将被解释为相对于当前源目录对应的构建树目录。

  WORKING_DIRECTORY的参数可以使用生成器表达式。

``DEPFILE``
  为Ninja生成器指定.d依赖文件。.d文件保存通常由自定义命令本身发出的依赖项。将DEPFILE与Ninja以外的生成器一起使用是错误的。

构建事件
^^^^^^^^

第二个签名将自定义命令添加到目标(如库或可执行文件)。这有助于在构建目标之前或之后执行操作。
该命令成为目标的一部分，仅当目标本身构建时才会执行。如果目标已经构建，命令将不会执行。

 add_custom_command(TARGET <target>
                    PRE_BUILD | PRE_LINK | POST_BUILD
                    COMMAND command1 [ARGS] [args1...]
                    [COMMAND command2 [ARGS] [args2...] ...]
                    [BYPRODUCTS [files...]]
                    [WORKING_DIRECTORY dir]
                    [COMMENT comment]
                    [VERBATIM] [USES_TERMINAL]
                    [COMMAND_EXPAND_LISTS])

这定义了一个将与构建指定<target>相关联的新命令。<target>必须在当前目录中定义；其他目录中定义的目标可能不被指定。

命令何时发生由以下哪个指定决定：

``PRE_BUILD``
  在Visual Studio生成器上，在目标内执行任何其他规则之前运行。在其他生成器上，在PRE_LINK命令之前立即运行。

``PRE_LINK``
  在源文件已编译但在链接二进制文件或运行静态库的库管理器或归档工具之前运行。这不适用于由add_custom_target()命令创建的目标。

``POST_BUILD``
  在目标内所有其他规则执行之后运行。

.. 注意::
  由于生成器表达式可以在自定义命令中使用，因此可以定义对某些配置求值为空字符串的COMMAND行或整个自定义命令。
  对于Visual Studio 2010(及更新版本)生成器，这些命令行或自定义命令将针对特定配置被省略，不会添加"空字符串命令"。

  这允许为每个配置添加单独的构建事件。