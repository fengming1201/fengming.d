add_link_options
----------------

为当前目录及之后添加的可执行文件、共享库或模块库目标的链接步骤添加选项。

 add_link_options(<option> ...)

此命令可用于添加任何链接选项，但存在替代命令来添加库（``target_link_libraries()`` 或
``link_libraries()``）。请参阅 ``directory`` 和
``target`` ``LINK_OPTIONS`` 属性的文档。

.. 注意::

  此命令不能用于为静态库目标添加选项，
  因为它们不使用链接器。要添加归档器或 MSVC 库管理器标志，
  请参阅 ``STATIC_LIBRARY_OPTIONS`` 目标属性。

``add_link_options`` 的参数可以使用语法为 ``$<...>`` 的"生成器表达式"。
请参阅 ``cmake-generator-expressions(7)`` 手册了解可用表达式。有关定义构建系统属性的更多信息，请参阅 ``cmake-buildsystem(7)`` 手册。

当涉及设备链接步骤时，该步骤由
``CUDA_SEPARABLE_COMPILATION`` 和
``CUDA_RESOLVE_DEVICE_SYMBOLS`` 属性以及策略 ``CMP0105`` 控制，
原始选项将被传递给主机和设备链接步骤（设备链接时包装在
``-Xcompiler`` 或等效选项中）。使用
``$<DEVICE_LINK:...>`` 生成器表达式包装的选项将仅用于设备链接步骤。使用 ``$<HOST_LINK:...>``
生成器表达式包装的选项将仅用于主机链接步骤。

用于目标的最终编译或链接选项集是通过累积来自当前目标及其依赖项的使用需求来构建的。选项集会去重以避免重复。
虽然这对单个选项有益，但去重步骤可能会破坏选项组。
例如，``-D A -D B`` 会变成 ``-D A B``。可以使用类似 shell 的引号加上 ``SHELL:`` 前缀来指定选项组。
``SHELL:`` 前缀会被删除，其余选项字符串会使用 ``separate_arguments()`` 的 ``UNIX_COMMAND`` 模式进行解析。
例如，``"SHELL:-D A" "SHELL:-D B"`` 会变成 ``-D A -D B``。

要将选项传递给链接器工具，每个编译器驱动程序都有自己的语法。
可以使用 ``LINKER:`` 前缀和 ``,`` 分隔符来以可移植的方式指定要传递给链接器工具的选项。``LINKER:`` 会被适当的驱动程序选项替换，``,`` 会被适当的驱动程序分隔符替换。
驱动程序前缀和驱动程序分隔符由 ``CMAKE_<LANG>_LINKER_WRAPPER_FLAG`` 和
``CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP`` 变量的值给出。

例如，``"LINKER:-z,defs"`` 对于 ``Clang`` 会变成 ``-Xlinker -z -Xlinker defs``，对于 ``GNU GCC`` 会变成 ``-Wl,-z,defs``。

``LINKER:`` 前缀可以作为 ``SHELL:`` 前缀表达式的一部分指定。

``LINKER:`` 前缀支持作为替代语法，使用 ``SHELL:`` 前缀和空格作为分隔符来指定参数。前面的示例就变成 ``"LINKER:SHELL:-z defs"``。

.. 注意::

  在 ``LINKER:`` 前缀开头以外的任何地方指定 ``SHELL:`` 前缀是不受支持的。