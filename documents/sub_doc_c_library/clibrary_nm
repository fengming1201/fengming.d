对于每个符号，nm表示：
符号值，以选项选择的基数为单位（见下文），或默认情况下为十六进制。

符号类型。至少使用以下类型；其他的也取决于对象文件的格式。如果小写，则该符号通常为局部符号；
如果为大写，则符号为全局（外部）符号。然而，有一些小写符号显示为特殊的全局符号（“u”、“v”和“w”）。

"A" 符号的值是绝对的，不会因进一步链接而更改。

"B"
"b" 该符号位于BSS数据部分。此部分通常包含零个初始化或未初始化的数据，尽管具体行为取决于系统。

"C" 这个符号很常见。公共符号是未初始化的数据。链接时，多个常用符号可能会以相同的名称出现。如果在任何地方定义了符号，则公共符号将被视为未定义的引用。

"D"
"d" 该符号位于初始化的数据部分。

"G"
"g" 该符号位于小对象的初始化数据部分中。某些对象文件格式允许更有效地访问小型数据对象，例如全局int变量，而不是大型全局数组。

"i" 对于PE格式文件，这表示符号位于特定于DLL实现的部分中。对于ELF格式的文件，这表示符号是一个间接函数。这是对ELF符号类型标准集的GNU扩展。
    它指示一个符号，如果重新定位引用了该符号，则该符号不会计算为其地址，而是必须在运行时调用。然后，运行时执行将返回要在重新定位中使用的值。

"I" 该符号是对另一个符号的间接引用。

"N" 该符号是调试符号。

"n" 该符号位于只读数据部分。

"p" 该符号位于堆叠展开部分。

"R"
"r" 该符号位于只读数据段中。

"S"
"s" 该符号位于小对象的未初始化或零初始化数据段中。

"T"
"t" 符号位于文本（代码）部分。

"U" 该符号未定义。

"u" 该符号是一个独特的全局符号。这是对ELF符号绑定标准集的GNU扩展。对于这样的符号，动态链接器将确保在整个过程中只有一个使用此名称和类型的符号。

"V"
"v" 这个符号是一个弱物体。当弱定义符号与正常定义符号链接时，正常定义符号将被正确使用。当链接了一个未定义的弱符号，
    但该符号未定义时，该弱符号的值将变为零，且没有错误。在某些系统上，大写表示已指定默认值。

"W"
"w" 该符号是一个弱符号，尚未被专门标记为弱对象符号。当弱定义符号与正常定义符号链接时，正常定义符号将被正确使用。
	  当一个弱的未定义符号被链接而该符号未被定义时，该符号的值将以系统特定的方式确定，不会出错。在某些系统上，大写表示已指定默认值。

"-" 该符号是.out对象文件中的插入符号。在这种情况下，打印的下一个值是插入其他字段、插入desc字段和插入类型。Stabs符号用于保存调试信息。

"?" 符号类型未知，或对象文件格式特定。

符号名称。如果符号具有与其相关联的版本信息，则也会显示版本信息。如果版本化的符号未定义或对链接器隐藏，
则版本字符串将显示为符号名称的后缀，前面加一个@字符。例如foo@VER_1.如果该版本是解析对符号的未转换引用时要使用的默认版本，
则它将显示为前缀为两个@字符的后缀。例如foo@@VER_2。
==============================================================================================================
在 `nm` 命令显示的符号列表中，不同的符号类型表示了不同的含义。下面是对一些常见的符号类型的解释：

1.  `T`：表示文本段（Text）中的符号，通常是函数的定义。这些符号表示在目标文件或静态库中定义的函数。
2.  `t`：表示文本段（Text）中的局部符号，通常是局部函数的定义。

3.  `U`：表示未定义符号，表示在目标文件或静态库中引用的外部符号，但在当前文件中没有定义。这些符号需要在链接时与其他目标文件或库进行解析。
4.  `C`：表示常量段（Constant）中的符号，通常是常量数据。

5.  `R`：表示只读数据段（Read-only Data）中的全局符号，通常是只读的全局变量或常量数据。
6.  `r`：表示只读数据段（Read-only Data）中的符号，通常是只读的全局变量或常量数据。

7.  `B`：表示 BSS 段（Block Started by Symbol）中的全局符号，通常是未初始化的全局变量。
8.  `b`：表示 BSS 段（Block Started by Symbol）中的符号，通常是未初始化的全局变量。

9.  `D`：表示数据段（Data）中的全局符号，通常是已初始化的全局变量。
10. `d`：表示数据段（Data）中的局部符号，通常是局部变量。
