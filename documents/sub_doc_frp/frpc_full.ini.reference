# cat frpc_full.ini 
# [common] 是整体部分
[common]
# IPv6 的文字地址或主机名必须括在方括号中，如“[：：1]：80”、“[ipv6-host]：http”或“[ipv6-host%zone]：80”
# 对于单个“server_addr”字段，不需要方括号，例如“server_addr = ：：”。
server_addr = 0.0.0.0
server_port = 7000

# STUN服务器帮助穿透NAT孔。
# nat_hole_stun_server = stun.easyvoip.com:3478

# 拨号到服务器等待连接完成的最长时间。默认值为 10 秒。
# dial_server_timeout = 10

# dial_server_keepalive指定 FRPC 和 FRP 之间活动网络连接的保持活动状态探测器之间的间隔。
# 如果为负，则禁用保持活动状态探测器。
# dial_server_keepalive = 7200

# 如果要通过 HTTP 代理或 Socks5 代理或 NTLM 代理连接 FRP，可以在此处或全局环境变量中设置http_proxy
# 它仅在协议为 TCP 时有效
# http_proxy = http://user:passwd@192.168.1.128:8080
# http_proxy = socks5://user:passwd@192.168.1.128:1080
# http_proxy = ntlm://user:passwd@192.168.1.128:2080

# 控制台或实际日志文件路径，如 ./frpc.log
log_file = ./frpc.log

# 跟踪、调试、信息、警告、错误
log_level = info

log_max_days = 3

# log_file为控制台时禁用日志颜色，默认值为 false
disable_log_color = false

# 对于身份验证，应与您的相同 frps.ini
# authenticate_heartbeats指定是否在发送到 FRPS 的检测信号中包含身份验证令牌。默认情况下，此值为 false。
authenticate_heartbeats = false

# authenticate_new_work_conns指定是否在发送到 FRPS 的新工作连接中包含身份验证令牌。默认情况下，此值为 false。
authenticate_new_work_conns = false

# 身份验证令牌
token = 12345678

authentication_method = 

# oidc_client_id指定在身份验证方法 == “oidc” 时用于在 OIDC 身份验证中获取令牌的客户端 ID。
# 默认情况下，此值为 “”。
oidc_client_id =

# oidc_client_secret指定在身份验证方法 == “oidc” 时用于在 OIDC 身份验证中获取令牌的客户端密钥。
# 默认情况下，此值为 “”。
oidc_client_secret =

# oidc_audience指定 OIDC 身份验证中令牌的受众（如果身份验证方法 == “oidc”。默认情况下，此值为 “”。
oidc_audience =

# oidc_scope指定令牌在 OIDC 身份验证中的权限，如果身份验证方法 == “oidc”。默认情况下，此值为 “”。
oidc_scope =

# oidc_token_endpoint_url指定实现 OIDC 令牌端点的 URL。
# 它将用于获取 OIDC 令牌，如果身份验证方法 == “oidc”。默认情况下，此值为 “”。
oidc_token_endpoint_url =

# oidc_additional_xxx指定要发送到 OIDC 令牌终端节点的其他参数。
# 例如，如果要指定“受众”参数，可以按如下方式设置。
# FRP 会将“受众=”“var1=”添加到附加参数中。
# oidc_additional_audience = https://dev.auth.com/api/v2/
# oidc_additional_var1 = foobar

# 设置管理员地址以通过HTTP API控制FRPC的操作，例如重新加载
admin_addr = 127.0.0.1
admin_port = 7400
admin_user = admin
admin_pwd = admin
# 管理员资产目录。默认情况下，这些资源与 frpc 捆绑在一起。
# assets_dir = ./static

# 将提前建立连接，默认值为零
pool_count = 5

# 如果使用TCP流复用，则默认值为true，它必须与FRP相同
# tcp_mux = true

# 指定 TCP 多路复用的保持活动间隔。
# only valid if tcp_mux is true.
# tcp_mux_keepalive_interval = 60

# 您的代理名称将更改为 {user}.{proxy}
user = your_name

# 确定首次登录时是否退出程序失败，否则连续重新登录FRPS
# 默认值为 true
login_fail_exit = true

# 用于连接到服务器的通信协议
# 现在支持 TCP、KCP、QUIC、WebSocket 和 WSS，默认为 TCP
protocol = tcp

# 连接服务器时设置客户端绑定IP，默认为空。
# 仅当协议 = TCP 或 WebSocket 时，才会使用该值。
connect_server_local_ip = 0.0.0.0

# QUIC 协议选项
# quic_keepalive_period = 10
# quic_max_idle_timeout = 30
# quic_max_incoming_streams = 100000

# 如果tls_enable为真，frpc 将通过 TLS 连接 frps。
# 从 v0.50.0 开始，默认值已更改为 true，并且默认情况下启用 tls。
tls_enable = true

# tls_cert_file = client.crt
# tls_key_file = client.key
# tls_trusted_ca_file = ca.crt
# tls_server_name = example.com

# 指定一个DNS服务器，因此FRPC将使用它而不是默认的
# dns_server = 8.8.8.8

# 要开始的代理名称，用“，”分隔
# 默认值为空，表示所有代理
# start = ssh,dns

# 心跳配置，不建议修改默认值
# heartbeat_interval的默认值为 10，heartbeat_timeout为 90。设置负值以禁用它。
# heartbeat_interval = 30
# heartbeat_timeout = 90

# 客户端的其他元信息
meta_var1 = 123
meta_var2 = 234

# 指定 UDP 数据包大小，单位为字节。如果未设置，则默认值为 1500。
# 客户端和服务器之间的此参数应相同。
# 它会影响 udp 和 sudp 代理。
udp_packet_size = 1500

# 包括代理的其他配置文件。
# includes = ./confd/*.ini

# 如果disable_custom_tls_first_byte设置为 false，则启用 tls 时，frpc 将使用第一个自定义字节与 frps 建立连接。
# 从 v0.50.0 开始，默认值已更改为 true，并且默认情况下禁用第一个自定义字节。
disable_custom_tls_first_byte = true

# 在管理侦听器中启用 golang pprof 处理程序。
# Admin port must be set first.
pprof_enable = false

# “ssh”是唯一的代理名称
# 如果 [common] 部分中的用户不为空，则会更改为 {user}。{proxy}，例如“your_name.ssh”
[ssh]
# tcp | udp | http | https | stcp | xtcp, 默认值为 TCP
type = tcp
local_ip = 127.0.0.1
local_port = 22
# 限制此代理的带宽，单位为 KB 和 MB
bandwidth_limit = 1MB
# 限制带宽的位置，可以是“客户端”或“服务器”，默认为“客户端”
bandwidth_limit_mode = client
# 真或假，如果为真，FRPS和FRPC之间的消息将被加密，默认值为假
use_encryption = false
# 如果为 true，则消息将被压缩
use_compression = false
# remote port listen by frps
remote_port = 6001
# FRP 将为同一组中的代理对连接进行负载平衡
group = test_group
# 组应具有相同的组键
group_key = 123456
# 为后端服务启用健康检查，现在支持“TCP”和“HTTP”
# FRPC 将连接本地服务的端口以检测其运行状况
health_check_type = tcp
# 健康检查连接超时
health_check_timeout_s = 3
# 如果连续失败3次，代理将从FRP中删除
health_check_max_failed = 3
# 每 10 秒将进行一次健康检查
health_check_interval_s = 10
# 每个代理的其他元信息
meta_var1 = 123
meta_var2 = 234

[ssh_random]
type = tcp
local_ip = 127.0.0.1
local_port = 22
# 如果remote_port为 0，FRPS 将为您分配一个随机端口
remote_port = 0

# 如果要公开多个端口，请在部分名称中添加“range：”前缀
# FRPC将生成多个代理，例如“tcp_port_6010”，“tcp_port_6011”等。
[range:tcp_port]
type = tcp
local_ip = 127.0.0.1
local_port = 6010-6020,6022,6024-6028
remote_port = 6010-6020,6022,6024-6028
use_encryption = false
use_compression = false

[dns]
type = udp
local_ip = 114.114.114.114
local_port = 53
remote_port = 6002
use_encryption = false
use_compression = false

[range:udp_port]
type = udp
local_ip = 127.0.0.1
local_port = 6010-6020
remote_port = 6010-6020
use_encryption = false
use_compression = false

# 将您的域名解析为 [server_addr]，以便您可以使用
# http://web01.yourdomain.com 浏览 web01，
#http://web02.yourdomain.com 浏览 web02
[web01]
type = http
local_ip = 127.0.0.1
local_port = 80
use_encryption = false
use_compression = true
# HTTP 用户名和密码是 HTTP 协议的安全认证
# 如果未设置，则无需认证即可访问此custom_domains
http_user = admin
http_pwd = admin
# 如果 FRPS 的域 frps.com，则可以通过 URL 访问 [Web01] 代理 http://web01.frps.com
subdomain = web01
custom_domains = web01.yourdomain.com
#位置仅适用于 HTTP 类型
locations = /,/pic
# 如果 HTTP 基本自动用户是 ABC，则将请求路由到此服务
# route_by_http_user = abc
host_header_rewrite = example.com
# 前缀为“header_”的参数将用于更新 HTTP 请求标头
header_X-From-Where = frp
health_check_type = http
# frpc 将向本地 http 服务发送 GET http 请求“/status”
# HTTP 服务在返回 2xx HTTP 响应代码时处于活动状态
health_check_url = /status
health_check_interval_s = 10
health_check_max_failed = 3
health_check_timeout_s = 3

[web02]
type = https
local_ip = 127.0.0.1
local_port = 8000
use_encryption = false
use_compression = false
subdomain = web02
custom_domains = web02.yourdomain.com
# 如果不为空，FRPC 将使用代理协议将连接信息传输到本地服务
# v1 or v2 or empty
proxy_protocol_version = v2

[plugin_unix_domain_socket]
type = tcp
remote_port = 6003
# 如果定义了插件，则local_ip和local_port是无用的
# 插件将处理从FRP获得的连接
plugin = unix_domain_socket
# 插件需要的前缀为“plugin_”的参数
plugin_unix_path = /var/run/docker.sock

[plugin_http_proxy]
type = tcp
remote_port = 6004
plugin = http_proxy
plugin_http_user = abc
plugin_http_passwd = abc

[plugin_socks5]
type = tcp
remote_port = 6005
plugin = socks5
plugin_user = abc
plugin_passwd = abc

[plugin_static_file]
type = tcp
remote_port = 6006
plugin = static_file
plugin_local_path = /var/www/blog
plugin_strip_prefix = static
plugin_http_user = abc
plugin_http_passwd = abc

[plugin_https2http]
type = https
custom_domains = test.yourdomain.com
plugin = https2http
plugin_local_addr = 127.0.0.1:80
plugin_crt_path = ./server.crt
plugin_key_path = ./server.key
plugin_host_header_rewrite = 127.0.0.1
plugin_header_X-From-Where = frp

[plugin_https2https]
type = https
custom_domains = test.yourdomain.com
plugin = https2https
plugin_local_addr = 127.0.0.1:443
plugin_crt_path = ./server.crt
plugin_key_path = ./server.key
plugin_host_header_rewrite = 127.0.0.1
plugin_header_X-From-Where = frp

[plugin_http2https]
type = http
custom_domains = test.yourdomain.com
plugin = http2https
plugin_local_addr = 127.0.0.1:443
plugin_host_header_rewrite = 127.0.0.1
plugin_header_X-From-Where = frp

[secret_tcp]
# 如果类型是秘密 tcp，则remote_port是无用的
# 想要连接本地端口的人应该部署另一个带有 stcp 代理的 frpc，角色是访问者
type = stcp
# SK用于对访客进行身份验证
sk = abcdefg
local_ip = 127.0.0.1
local_port = 22
use_encryption = false
use_compression = false
# 如果不为空，则只有指定用户的访问者才能连接。
# 否则，来自同一用户的访问者可以连接。“*”表示允许所有用户。
allow_users = *

# FRPC 的用户在 STCP 服务器和 STCP 访问者中应相同
[secret_tcp_visitor]
# FRPC 角色访问者 -> FRP -> FRPC 角色服务器
role = visitor
type = stcp
# 要访问的服务器名称
server_name = secret_tcp
sk = abcdefg
# 将此地址连接到访客 STCP 服务器
bind_addr = 127.0.0.1
# bind_port可以小于 0，则表示不绑定到端口，仅接收来自其他访问者重定向的连接。（SUDP 现在不支持此功能）
bind_port = 9000
use_encryption = false
use_compression = false

[p2p_tcp]
type = xtcp
sk = abcdefg
local_ip = 127.0.0.1
local_port = 22
use_encryption = false
use_compression = false
# 如果不为空，则只有指定用户的访问者才能连接。
# 否则，来自同一用户的访问者可以连接。“*”表示允许所有用户。
allow_users = user1, user2

[p2p_tcp_visitor]
role = visitor
type = xtcp
# 如果未设置服务器用户，则默认为当前用户
server_user = user1
server_name = p2p_tcp
sk = abcdefg
bind_addr = 127.0.0.1
# bind_port可以小于 0，则表示不绑定到端口，仅接收来自其他访问者重定向的连接。（SUDP 现在不支持此功能）
bind_port = 9001
use_encryption = false
use_compression = false
# 当需要自动隧道持久性时，将其设置为 true
keep_tunnel_open = false
# 当keep_tunnel_open设置为 true 时有效，每小时尝试突破的次数
max_retries_an_hour = 8
min_retry_interval = 90
# fallback_to = stcp_visitor
# fallback_timeout_ms = 500

[tcpmuxhttpconnect]
type = tcpmux
multiplexer = httpconnect
local_ip = 127.0.0.1
local_port = 10701
custom_domains = tunnel1
# route_by_http_user = user1
