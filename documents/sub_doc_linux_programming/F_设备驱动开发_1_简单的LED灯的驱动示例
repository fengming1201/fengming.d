#include <linux/module.h>
#include <linux/init.h>
#include <linux/fs.h>
#include <linux/uaccess.h>
#include <linux/gpio.h>
#include <linux/cdev.h>

#define LED_GPIO_PIN 18  // 假设 LED 连接到 GPIO 18

static dev_t dev;
static struct cdev led_cdev;

static int led_open(struct inode *inode, struct file *filp)
{
    gpio_request(LED_GPIO_PIN, "led");  // 请求 GPIO
    gpio_direction_output(LED_GPIO_PIN, 0);  // 将 GPIO 设置为输出模式，并关闭 LED

    return 0;
}

static int led_release(struct inode *inode, struct file *filp)
{
    gpio_free(LED_GPIO_PIN);  // 释放 GPIO

    return 0;
}

static ssize_t led_write(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos)
{
    char value;

    if (copy_from_user(&value, buf, sizeof(char)) != 0)
        return -EFAULT;

    gpio_set_value(LED_GPIO_PIN, (value != '0'));  // 根据用户传入的值设置 LED 的状态

    return sizeof(char);
}

static struct file_operations led_fops = {
    .open = led_open,
    .release = led_release,
    .write = led_write,
};

static int __init led_driver_init(void)
{
    int ret;

    // 分配字符设备号
    ret = alloc_chrdev_region(&dev, 0, 1, "led");
    if (ret < 0) {
        printk(KERN_ALERT "Failed to allocate device number\n");
        return ret;
    }

    // 初始化字符设备
    cdev_init(&led_cdev, &led_fops);
    led_cdev.owner = THIS_MODULE;

    // 添加字符设备到内核
    ret = cdev_add(&led_cdev, dev, 1);
    if (ret < 0) {
        printk(KERN_ALERT "Failed to add character device\n");
        unregister_chrdev_region(dev, 1);
        return ret;
    }

    printk(KERN_INFO "LED driver loaded\n");

    return 0;
}

static void __exit led_driver_exit(void)
{
    // 移除字符设备
    cdev_del(&led_cdev);

    // 释放字符设备号
    unregister_chrdev_region(dev, 1);

    printk(KERN_INFO "LED driver unloaded\n");
}

module_init(led_driver_init);
module_exit(led_driver_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("Simple LED driver");
