下面是一个简单的使用C语言实现的线程池示例：

```c
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define THREAD_POOL_SIZE 5

typedef struct {
    void (*task)(void* arg);
    void* arg;
} Task;

typedef struct {
    pthread_mutex_t lock;
    pthread_cond_t cond;
    pthread_t* threads;
    Task* tasks;
    int thread_count;
    int task_count;
    int head;
    int tail;
    int shutdown;
} ThreadPool;

void* worker(void* arg) {
    ThreadPool* pool = (ThreadPool*)arg;
    
    while (1) {
        pthread_mutex_lock(&(pool->lock));
        
        // 等待任务
        while (pool->task_count == 0 && !pool->shutdown) {
            pthread_cond_wait(&(pool->cond), &(pool->lock));
        }
        
        // 关闭线程池
        if (pool->shutdown) {
            pthread_mutex_unlock(&(pool->lock));
            pthread_exit(NULL);
        }
        
        // 执行任务
        Task task = pool->tasks[pool->head];
        pool->head = (pool->head + 1) % THREAD_POOL_SIZE;
        pool->task_count--;
        
        pthread_mutex_unlock(&(pool->lock));
        
        (*(task.task))(task.arg);
    }
    
    pthread_exit(NULL);
}

void thread_pool_init(ThreadPool* pool) {
    pool->threads = (pthread_t*)malloc(THREAD_POOL_SIZE * sizeof(pthread_t));
    pool->tasks = (Task*)malloc(THREAD_POOL_SIZE * sizeof(Task));
    pool->thread_count = THREAD_POOL_SIZE;
    pool->task_count = 0;
    pool->head = 0;
    pool->tail = 0;
    pool->shutdown = 0;
    
    pthread_mutex_init(&(pool->lock), NULL);
    pthread_cond_init(&(pool->cond), NULL);
    
    for (int i = 0; i < THREAD_POOL_SIZE; i++) {
        pthread_create(&(pool->threads[i]), NULL, worker, (void*)pool);
    }
}

void thread_pool_submit(ThreadPool* pool, void (*task)(void* arg), void* arg) {
    pthread_mutex_lock(&(pool->lock));
    
    // 添加任务到任务队列
    pool->tasks[pool->tail].task = task;
    pool->tasks[pool->tail].arg = arg;
    pool->tail = (pool->tail + 1) % THREAD_POOL_SIZE;
    pool->task_count++;
    
    pthread_cond_signal(&(pool->cond));
    pthread_mutex_unlock(&(pool->lock));
}

void thread_pool_shutdown(ThreadPool* pool) {
    pthread_mutex_lock(&(pool->lock));
    pool->shutdown = 1;
    pthread_mutex_unlock(&(pool->lock));
    
    pthread_cond_broadcast(&(pool->cond));
    
    for (int i = 0; i < THREAD_POOL_SIZE; i++) {
        pthread_join(pool->threads[i], NULL);
    }
    
    free(pool->threads);
    free(pool->tasks);
    
    pthread_mutex_destroy(&(pool->lock));
    pthread_cond_destroy(&(pool->cond));
}

// 示例任务函数
void print_message(void* arg) {
    char* message = (char*)arg;
    printf("线程ID：%lu，消息：%s\n", pthread_self(), message);
}

int main() {
    ThreadPool pool;
    thread_pool_init(&pool);
    
    // 提交任务到线程池
    thread_pool_submit(&pool, print_message, "Hello, Thread Pool!");
    thread_pool_submit(&pool, print_message, "This is a task.");
    thread_pool_submit(&pool, print_message, "Goodbye, Thread Pool!");
    
    // 关闭线程池
    thread_pool_shutdown(&pool);
    
    return 0;
}
```

这个示例实现了一个简单的线程池，包括以下几个关键步骤：

1. 定义了 `Task` 结构体，用于存储任务的函数指针和参数。

2. 定义了 `ThreadPool` 结构体，包含了线程池的相关信息，如互斥锁、条件变量、线程数组、任务数组等。

3. 实现了 `worker` 函数作为线程的执行函数，线程在循环中等待任务，执行任务，并根据需要退出。

4. 实现了 `thread_pool_init` 函数用于初始化线程池，包括创建线程、初始化互斥锁和条件变量等。

5. 实现了 `thread_pool_submit` 函数用于提交任务到线程池，将任务添加到任务队列，并唤醒等待的线程。

6. 实现了 `thread_pool_shutdown` 函数用于关闭线程池，设置关闭标志，唤醒所有线程，并等待线程结束。

7. 提供了一个示例任务函数 `print_message`，用于打印消息。

在 `main` 函数中，首先初始化线程池，然后提交任务