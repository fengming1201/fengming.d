#***************************************#
#author:fengming
#date:Tue 10 Jan 2023 04:56:27 PM CST
#***************************************#
HELP_FUNC=fm-help_example
function fm-add_fjk_device_qr_code
{
	local flag=NO
	local default_passwd=admin
	local id_head="ID:"
	local user=
	local passwd_head="password:"
	local passwd=

	if [ $# -eq 1  ]
	then 
		tmp=$(echo $1 | grep "^1jfieg" )
		echo $tmp
		if [  x${tmp} = x  ]
		then
			${HELP_FUNC}  add_device_qr_code
			return 1
		else
			echo "tmp=$tmp"
			user=$1
			passwd=${default_passwd}
			flag=OK
		fi
	elif [ $# -eq 2  ]
	then
		tmp=$(echo $1 | grep "^1jfieg" )
		if [ x$tmp = x  ]
		then
			tmp=$(echo $2 | grep "^1jfieg" )
			if [ x$tmp = x  ]
			then
				${HELP_FUNC}  add_device_qr_code
				return 1
			else
				user=$2
				passwd=$1
				flag=OK
			fi
		else
			user=$1
			passwd=$2
			flag=OK
		fi

	else
		${HELP_FUNC}  add_device_qr_code
		return 1
	fi

	if [ -z $(which qrencode) ]
	then
		echo "please install qrencode first"
		echo "apt install qrencode"
		return 1
	fi		
	if [ $flag == "OK"  ]
	then
		qrencode -o  - -t UTF8 ${id_head}${user}${passwd_head}${passwd}
		echo "ID=${user}"
		echo "pass=${passwd}"
	fi
	return 0
}




function fjk_sign_tool
{
	local tool_path=${HOME}/XBox/XBox
	local app=bin/node
	local arg=generate_sign.js

	if [ $# -ne 1 ];then echo "parameter wrong!";echo "$FUNCNAME file";return 1;fi
	local file="$1"

	if [ ! -f "${file}" ];then echo "file:"${file}" not found";return 2;fi
	if [ ! -x ${tool_path}/${app} ];then echo "${tool_path}/${app} not exec permission";return 3;fi
	
	echo "${tool_path}/${app} ${tool_path}/${arg} ${file}"
	${tool_path}/${app} ${tool_path}/${arg} "${file}"

	if [ -e "pack.sig.${file}" ]
	then
		echo "generate sign success"
		echo "--->${file}"
		echo "--->pack.sig.${file}"
		return 0
	else
		echo "generate sign fail"
		return 4
	fi
}
function fm-fjk_sign_tool
{
	#check arg
	if [ $# -lt 1 ]
	then
		echo "parameter wrong!!"
		echo "$FUNCNAME filename / dirname"
		return 1
	fi
	
	local arg_list=$@
	for file in "${arg_list}"
	do
		if [ -f ${file} ]
		then
			fjk_sign_tool "${file}"
		elif [ -d ${file} ]
		then
			for filelist in $(find ${file} -type f -printf "%P\n")
			do
				fjk_sign_tool "${filelist}"
			done
		else
			echo "Unkown file type"
		fi
	done
	
	echo "done ......."
	return 0
}

function fm-svn_revert_all
{

	if ! which svn > /dev/null
	then
		return 1
	fi
	# svn revert --recursive .
	local change_file_list=$(svn st | grep ^[MCAD\!] | awk '{print $2}' | tac)
	local no_record_file_list=$(svn st | grep ^? | awk '{print $2}')

	for file in $change_file_list
	do 
		svn revert $file
	done

	for file in $no_record_file_list
	do
		if [ -d $file  ]
		then
			rm -rv $file
		else
			rm -v $file
		fi
	done

	echo "svn revert all files done"

	return 0
}

function fm-svngrep
{
	local app=grep
	local default_opt='--exclude=*.map  --exclude=*.o  --exclude=*.a  --exclude=*.bin  --exclude=*.bak  --exclude=*.out'
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;

	$app ${default_opt} $*
	return 0
}

function fm-svnls
{
	local app=svn
	local default_opt='st | grep -v ^?'
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;

	$app ${default_opt} $*
	return 0
}

function fm-svnst
{
	local app=svn
	local default_opt="st | grep -v ^?"
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;

	$app ${default_opt} $*
	return 0
}











