#***************************************#
#author:fengming
#date:Tue 10 Jan 2023 04:56:27 PM CST
#***************************************#
function fm-picture_viewer
{
	local app=gpicview
	local default_opt=

	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;
	
	if [ x"$SSH_CLIENT" = x ]
	then
		$app ${default_opt} "$*"
	else
		local opt="N"
		read -p "Are you sure display to remote screen？ [y/N]"  opt
		if [ "x${opt}" = "x"  ];then opt="N";fi
		if [ "x${opt}" = "xy"  ] || [ "x${opt}" = "xY"  ] || [ "x${opt}" = "xyes"  ] || [ "x${opt}" = "xYES"  ]
		then
			DISPLAY=:0 $app ${default_opt} "$*"
		fi
	fi
	return 0
}


function fm-video_player
{
	local app=mpv
	#local default_opt=¨--player-operation-mode=pseudo-gui¨
	local default_opt=

	if [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "$FUNCNAME  a.mp4"
		echo "$FUNCNAME  rtmp://your-streaming-server:port/live/your-stream-key" 
		return 1
	fi
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;

	if [ x"$SSH_CLIENT" = x ]
	then
		$app ${default_opt} "$*"
	else
		local opt="N"
		read -p "Are you sure display to remote screen？ [y/N]"  opt
		if [ "x${opt}" = "x"  ];then opt="N";fi
		if [ "x${opt}" = "xy"  ] || [ "x${opt}" = "xY"  ] || [ "x${opt}" = "xyes"  ] || [ "x${opt}" = "xYES"  ]
		then
			DISPLAY=:0 $app ${default_opt} "$*"
		fi
	fi
	return 0
}

function fm-video_mult_player
{
	local app=gridplayer
	#local default_opt=¨--player-operation-mode=pseudo-gui¨
	local default_opt=

	if [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "$FUNCNAME  a.mp4"
		echo "$FUNCNAME  rtmp://your-streaming-server:port/live/your-stream-key" 
		return 1
	fi
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;

	if [ x"$SSH_CLIENT" = x ]
	then
		$app ${default_opt} "$*"
	else
		local opt="N"
		read -p "Are you sure display to remote screen？ [y/N]"  opt
		if [ "x${opt}" = "x"  ];then opt="N";fi
		if [ "x${opt}" = "xy"  ] || [ "x${opt}" = "xY"  ] || [ "x${opt}" = "xyes"  ] || [ "x${opt}" = "xYES"  ]
		then
			DISPLAY=:0 $app ${default_opt} "$*"
		fi
	fi
	return 0
}

function fm-ffmpeg_push_video_stream
{
	local push_tool=ffmpeg
	local loop_times=1
	local server_ip=localhost
	local server_port=1935

	if [ $# -lt 4 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME  loop_times  IP port video_file_lsit"
		echo "e.g:$FUNCNAME 10 116.62.103.60 1935 1.mp4 2.flv ..."
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi
	loop_times=$1
	server_ip=$2
	server_port=$3
	if ! expr "${loop_times}" : '^[0-9]\+$' >/dev/null
	then
		echo "para:${loop_times} is not number"
		echo "$FUNCNAME  loop_times  video_file_lsit"
		return 3
	fi
	if ! expr "${server_port}" : '^[0-9]\+$' >/dev/null
	then
		echo "para:${server_port} is not number"
		echo "$FUNCNAME  loop_times  IP port  video_file_lsit"
		return 3
	fi	
	shift 3
	while [ ${loop_times} -gt 0 ]
	do
		for file in "$@"
		do
			echo "${push_tool} -re -i "$file" -c copy -f flv rtmp://${server_ip}:${server_port}/live/movie1234"
			${push_tool} -re -i "$file" -c copy -f flv rtmp://${server_ip}:${server_port}/live/movie1234
		done
		loop_times=$(expr ${loop_times} - 1)
	done
	
	return 0
}
function fm-ffmpeg_push_video_stream_to_mymedia_server
{
	local push_tool=ffmpeg

	local server_ip=101.200.135.149
	local server_port=1935

	if [ $# -lt 2 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME  loop_times  video_file_lsit"
		echo "e.g:$FUNCNAME 10 1.mp4 2.flv ..."
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi
	local loop_times=$1
	if ! expr "${loop_times}" : '^[0-9]\+$' >/dev/null
	then
		echo "first para is not number"
		echo "$FUNCNAME  loop_times  video_file_lsit"
		return 3
	fi	
	shift 1
	while [ ${loop_times} -gt 0 ]
	do
		for file in "$@"
		do
			echo "${push_tool} -re -i "$file" -c copy -f flv rtmp://${server_ip}:${server_port}/live/movie1234"
			${push_tool} -re -i "$file" -c copy -f flv rtmp://${server_ip}:${server_port}/live/movie1234
		done
		loop_times=$(expr ${loop_times} - 1)
	done

	return 0
}
function fm-ffmpeg_save_video_stream_2file_from_camera
{
	local push_tool=ffmpeg
	local device=/dev/video
	local file=output.mp4
	if [ $# -ne 2 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME dev filename"
		echo "e.g:$FUNCNAME /dev/video0 output.mp4"
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi
	device=$1
	file=$2
	if [ ! -f ${device} ];then echo "device:${} not found!!";return 3;fi

	echo "${push_tool} -f v4l2 -i ${device} -c:v libx264 -preset veryfast -tune zerolatency ${file}"
	${push_tool} -f v4l2 -i ${device} -c:v libx264 -preset veryfast -tune zerolatency ${file}

	return 0
}
function fm-ffmpeg_push_video_stream_from_camera
{
	local push_tool=ffmpeg
	local server_ip=localhost
	local server_port=1935
	local device=/dev/video0
	if [ $# -lt 3 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME dev IP  port"
		echo "e.g:$FUNCNAME /dev/video0 116.62.103.60 1935"
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi
	device=$1
	server_ip=$2
	server_port=$3
	if [ ! -f ${device} ];then echo "device:${} not found!!";return 3;fi
	if ! expr "${server_port}" : '^[0-9]\+$' >/dev/null
	then
		echo "para:${server_port} is not number"
		echo "$FUNCNAME  loop_times  IP port  video_file_lsit"
		return 3
	fi	
	
	echo "${push_tool} -f v4l2 -i ${device} -c:v libx264 -preset veryfast -tune zerolatency -f flv rtmp://${server_ip}:${server_port}/live/movie1234"
	${push_tool} -f v4l2 -i ${device} -c:v libx264 -preset veryfast -tune zerolatency -f flv rtmp://${server_ip}:${server_port}/live/movie1234

	return 0
}
function fm-ffmpeg_record_screen_2file
{
	local push_tool=ffmpeg
	local screenID=":0.0"
	local resol="480x320"
	local filename=./output.mp4
	if [ $# -ne 3 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME screenID   resolution  filename"
		echo "e.g:$FUNCNAME :0.0  480x320  output.mp4"
		echo "屏幕分辨率(resolution):"
		echo "320x240   --常见于较早的移动电话和小型设备。"
    	echo "480x320   --常见于早期智能手机和某些小型平板电脑。"
    	echo "800x480   --常见于某些低成本智能手机和平板电脑。"
    	echo "1024x600  --常见于某些小型平板电脑和便携式设备。"
		echp "1280x720  --高清（HD）分辨率，也称为 720p。"
    	echo "1280x800  --常见于较小的平板电脑和便携式设备。"
		echo "1366x768  --广泛用于笔记本电脑和小型显示器的分辨率。"
		echo "1600x900  --常见于较大的笔记本电脑和中等尺寸显示器的分辨率。"
		echo "2560x1440 --2K 分辨率，也称为 Quad HD（QHD）或 1440p。"
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi

	screen="$1"
	resol="$2"
	filename="$3"
	echo "ffmpeg -f x11grab -s ${resol} -i ${screen} -c:v libx264 -preset ultrafast ${filename}"
	ffmpeg -f x11grab -s ${resol} -i ${screen} -c:v libx264 -preset ultrafast ${filename}
	return 0
}
function fm-ffmpeg_record_screen_push_to_rtmpserver
{
	local push_tool=ffmpeg
	local screenID=":0.0"
	local resol="480x320"
	local rtmp_url=rtmp://116.62.103.60:1935/live/movie1234
	if [ $# -ne 3 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME screenID  resolution  rtps_url"
		echo "e.g:$FUNCNAME :0.0 480x320 rtmp://116.62.103.60:1935/live/movie1234"
		echo "屏幕分辨率(resolution):"
		echo "320x240   --常见于较早的移动电话和小型设备。"
    	echo "480x320   --常见于早期智能手机和某些小型平板电脑。"
    	echo "800x480   --常见于某些低成本智能手机和平板电脑。"
    	echo "1024x600  --常见于某些小型平板电脑和便携式设备。"
		echp "1280x720  --高清（HD）分辨率，也称为 720p。"
    	echo "1280x800  --常见于较小的平板电脑和便携式设备。"
		echo "1366x768  --广泛用于笔记本电脑和小型显示器的分辨率。"
		echo "1600x900  --常见于较大的笔记本电脑和中等尺寸显示器的分辨率。"
		echo "2560x1440 --2K 分辨率，也称为 Quad HD（QHD）或 1440p。"
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi

	screen="$1"
	resol="$2"
	rtmp_url="$3"

	echo "ffmpeg -f x11grab -s ${resol} -i ${screen} -c:v libx264 -preset ultrafast ${rtmp_url}"
	ffmpeg -f x11grab -s ${resol} -i ${screen} -c:v libx264 -preset ultrafast ${rtmp_url}
	return 0
}
function fm-picture_convert_quality
{
	local app=convert
	local arg_default="-quality"

	if [ $# -ne 3 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "SYNOPSIS:"
		echo "$FUNCNAME  input  output  quality"
		echo "e.g.$FUNCNAME  mypic.jpg  newmyjpg.jpg  80"
		return 1
	fi
	local input=$1
	local output=$2
	local qual=$3

	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo "${app} not found!";echo "apt install imagemagick";return 1;fi

	${app}   ${input}  ${arg_default} ${qual}  ${output}
	
	return 0
}
function fm-picture_convert_resize
{
	local app=convert
	local arg_default="-resize"

	if [ $# -ne 3 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "SYNOPSIS:"
		echo "$FUNCNAME  input  output  resize"
		echo "e.g.$FUNCNAME  mypic.jpg  newmyjpg.jpg  800x600"
		echo "resize format: "
		echo "800   --只指定宽度，而不指定高度,高度会根据原始图像的纵横比自动调整。" 
		echo "x600  --只指定高度，而不指定宽度,宽度会根据原始图像的纵横比自动调整。"
		echo "800x600 | 1024x1024 --指定宽度和高度。"
		echo "50% --使用百分比值来相对于原始图像的尺寸进行调整,50% 表示将图像调整为原始尺寸的一半。"
		echo "1024x1024>  --使用 > 符号来指定图像的最长边的大小,同时保持纵横比。"
		return 1
	fi
	local input=$1
	local output=$2
	local resize=$3
	if [ ! -f ${input} ];then echo "file:${input} not exist";return 2;fi
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo "${app} not found!";echo "apt install imagemagick";return 3;fi

	${app}   ${input}  ${arg_default} ${resize}  ${output}
	
	return 0
}
