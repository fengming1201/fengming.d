#***************************************#
#author:fengming
#date:Tue 10 Jan 2023 04:56:27 PM CST
#***************************************#
function fm-picture_viewer
{
	local app=gpicview
	local default_opt=

	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;
	
	if [ x"$SSH_CLIENT" = x ]
	then
		$app ${default_opt} "$*"
	else
		local opt="N"
		read -p "Are you sure display to remote screen？ [y/N]"  opt
		if [ "x${opt}" = "x"  ];then opt="N";fi
		if [ "x${opt}" = "xy"  ] || [ "x${opt}" = "xY"  ] || [ "x${opt}" = "xyes"  ] || [ "x${opt}" = "xYES"  ]
		then
			DISPLAY=:0 $app ${default_opt} "$*"
		fi
	fi
	return 0
}


function fm-video_player
{
	local app=mpv
	local default_opt=

	if [ $# -ne 1 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "$FUNCNAME  a.mp4   or"
		echo "$FUNCNAME  rtmp://your-streaming-server:port/live/your-stream-key" 
		return 1
	fi
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;

	if [ x"$SSH_CLIENT" = x ]
	then
		$app ${default_opt} "$*"
	else
		local opt="N"
		read -p "Are you sure display to remote screen？ [y/N]"  opt
		if [ "x${opt}" = "x"  ];then opt="N";fi
		if [ "x${opt}" = "xy"  ] || [ "x${opt}" = "xY"  ] || [ "x${opt}" = "xyes"  ] || [ "x${opt}" = "xYES"  ]
		then
			DISPLAY=:0 $app ${default_opt} --fs "$*"
		fi
	fi
	return 0
}

function fm-video_mult_player
{
	local app=gridplayer
	#local default_opt=¨--player-operation-mode=pseudo-gui¨
	local default_opt=

	if [ $# -lt 1 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "$FUNCNAME  a.mp4 b.mp4 c.mp4  ...."
		return 1
	fi
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;

	if [ x"$SSH_CLIENT" = x ]
	then
		$app ${default_opt} "$*"
	else
		local opt="N"
		read -p "Are you sure display to remote screen？ [y/N]"  opt
		if [ "x${opt}" = "x"  ];then opt="N";fi
		if [ "x${opt}" = "xy"  ] || [ "x${opt}" = "xY"  ] || [ "x${opt}" = "xyes"  ] || [ "x${opt}" = "xYES"  ]
		then
			DISPLAY=:0 $app ${default_opt} "$*"
		fi
	fi
	return 0
}

#Linux Sound volume control
function fm-linux_sound_volume_control
{
	local app=alsamixer
	local default_opt=
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "CN:"
		echo "" 
		return 1
	fi
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 2;fi;

	${app}
	return 0
}
function fm-linux_brightness_control
{
	local app=xrandr
	local default_opt=
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 2;fi;
	
	if [ $# -lt 1 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "CN:"
		echo "$FUNCNAME  monitor  brightness(0-1)" 
		echo "$FUNCNAME  HDMI-2  0.5"
		${app} -q | grep -w connected
		return 1
	fi
	local monitor=$1
	local brightness=$2
	local  monitor_name=""
	#check 
	local monitor_list=$(${app} -q | grep -w connected | awk '{print$1}')
	for name in ${monitor_list}
	do
		if [ ${name} = ${monitor} ]
		then
			monitor_name=${name}
		fi
	done
	if [ "x${monitor_name}" = "x" ];then echo "monitor name not found!";return 3;fi

	echo "${app} --output ${monitor_name} --brightness ${brightness}"
	${app} --output ${monitor_name} --brightness ${brightness}

	return 0
}

function fm-ffmpeg_videofile_stream_push_2rtmpserver
{
	local push_tool=ffmpeg
	local loop_times=1
	local rtmp_url=localhost

	if [ $# -lt 3 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME  loop_times  rtmp_url video_file_lsit"
		echo "e.g:$FUNCNAME 10 rtmp://116.62.103.60:1935/live/test 1.mp4 2.flv ..."
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi
	loop_times=$1
	rtmp_url=$2

	if ! expr "${loop_times}" : '^[0-9]\+$' >/dev/null
	then
		echo "para:${loop_times} is not number"
		echo "$FUNCNAME  loop_times  video_file_lsit"
		return 3
	fi

	shift 3
	while [ ${loop_times} -gt 0 ]
	do
		for file in "$@"
		do
			echo "${push_tool} -re -i "$file" -c copy -f flv ${rtmp_url}"
			${push_tool} -re -i "$file" -c copy -f flv ${rtmp_url}
		done
		loop_times=$(expr ${loop_times} - 1)
	done
	
	return 0
}
function fm-ffmpeg_videofile_merge_stream_push_2rtmpserver
{
	local push_tool=ffmpeg
	local play_times=1
	local rtmp_url=localhost

	if [ $# -lt 3 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME  rtmp_url   play_times   video_file_list"
		echo "e.g:$FUNCNAME rtmp://116.62.103.60:1935/live/test  10  1.mp4 2.flv ..."
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi
    rtmp_url=$1
	play_times=$2
	if ! expr "${play_times}" : '^[0-9]\+$' >/dev/null
	then
		echo "para:${play_times} is not number"
		echo "$FUNCNAME  play_times  video_file_lsit"
		return 3
	fi

	shift 2
	local video_list=()
	local video_count=0
	#check file exist status
	for file in "$@"
	do
		if [ -f "${file}" ]
		then 
            video_list+=("${file}")
		else
			echo "file:${file} not exist!"
		fi
	done
	video_count=${#video_list[@]}

	while [ ${play_times} -gt 0 ] && [ ${video_count} -gt 0 ]
	do
		case ${video_count} in
			1) 
			${push_tool} -re -i "${video_list[0]}" -c copy -f flv ${rtmp_url}
			;;
			2) 
            ${push_tool} -i ${video_list[0]} -i ${video_list[1]} \
            -filter_complex "[0:v]scale=640:480,pad=640:480:0:0[left];[1:v]scale=640:480,pad=640:480:0:0[right];[left][right]hstack[outv];[0:a][1:a]amerge=inputs=2[outa]" \
            -map "[outv]" -map "[outa]" \
            -c:v libx264 -c:a aac \
            -preset veryfast -tune zerolatency \
            -f flv ${rtmp_url}
			;;
			3) 
			${push_tool} -i ${video_list[0]} -i ${video_list[1]} -i ${video_list[2]} \
            -filter_complex "[0:v]scale=426:240,pad=426:240:0:0[left];[1:v]scale=426:240,pad=426:240:0:0[center];[2:v]scale=426:240,pad=426:240:0:0[right];[left][center][right]hstack=3[outv];[0:a][1:a][2:a]amerge=inputs=3[outa]" \
            -map "[outv]" -map "[outa]" \
            -c:v libx264 -c:a aac \
            -preset veryfast -tune zerolatency \
            -f flv ${rtmp_url}
			;;
			4) 
			${push_tool} -i ${video_list[0]} -i ${video_list[1]} -i ${video_list[2]} -i ${video_list[3]} \
            -filter_complex "[0:v]scale=320:240,pad=320:240:0:0[a];[1:v]scale=320:240,pad=320:240:0:0[b];[2:v]scale=320:240,pad=320:240:0:0[c];[3:v]scale=320:240,pad=320:240:0:0[d];[a][b]hstack[top];[c][d]hstack[bottom];[top][bottom]vstack[outv];[0:a][1:a][2:a][3:a]amerge=inputs=4[outa]" \
            -map "[outv]" -map "[outa]" \
            -c:v libx264 -c:a aac \
            -preset veryfast -tune zerolatency \
            -f flv ${rtmp_url}
			;;						
			*) defult 
			echo "unknow  video counts!"
			return 4
			;;
		esac
		play_times=$(expr ${play_times} - 1)
	done
	
	return 0
}
function fm-ffmpeg_videofile_stream_push_2my_mediaserver
{
	local push_tool=ffmpeg

	local server_ip=101.200.135.149
	local server_port=1935

	if [ $# -lt 2 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME  loop_times  video_file_lsit"
		echo "e.g:$FUNCNAME 10 1.mp4 2.flv ..."
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi
	local loop_times=$1
	if ! expr "${loop_times}" : '^[0-9]\+$' >/dev/null
	then
		echo "first para is not number"
		echo "$FUNCNAME  loop_times  video_file_lsit"
		return 3
	fi	
	shift 1
	while [ ${loop_times} -gt 0 ]
	do
		for file in "$@"
		do
			echo "${push_tool} -re -i "$file" -c copy -f flv rtmp://${server_ip}:${server_port}/live/movie1234"
			${push_tool} -re -i "$file" -c copy -f flv rtmp://${server_ip}:${server_port}/live/movie1234
		done
		loop_times=$(expr ${loop_times} - 1)
	done

	return 0
}
function fm-ffmpeg_camera_video_stream_save_2file
{
	local push_tool=ffmpeg
	local check_tool=v4l2-ctl
	local device=/dev/video
	local file=output.mp4
	local resol="480x320"
	if [ $# -ne 2 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME  dev  resolution  filename"
		echo "e.g:$FUNCNAME /dev/video0  480x320  output.mp4"
		echo "屏幕分辨率(resolution):"
		which ${check_tool} > /dev/null
		if [ $? -eq 0 ]
		then
			${check_tool} --list-formats-ext | grep -w "Size:" | awk '{print"resolution: "$3}'
		else
			echo "${check_tool} not found!!"
			echo "please install first:apt install  v4l-utils"
			echo "320x240   --常见于较早的移动电话和小型设备。"
			echo "480x320   --常见于早期智能手机和某些小型平板电脑。"
			echo "800x480   --常见于某些低成本智能手机和平板电脑。"
			echo "1024x600  --常见于某些小型平板电脑和便携式设备。"
			echp "1280x720  --高清（HD）分辨率，也称为 720p。"
			echo "1280x800  --常见于较小的平板电脑和便携式设备。"
		fi
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi
	device=$1
	resol=$2
	file=$3
	if [ ! -e ${device} ];then echo "device:${} not found!!";return 3;fi
	if false
	then
		echo "${push_tool} -f v4l2 -i ${device} -c:v libx264 -preset veryfast -tune zerolatency ${file}"
		${push_tool} -f v4l2 -i ${device} -c:v libx264 -preset veryfast -tune zerolatency ${file}
	else
		echo "${push_tool} -f v4l2 -s ${resol} -i ${device} ${file}"
		${push_tool} -f v4l2 -s ${resol} -i ${device} ${file}
	fi
	
	return 0
}
function fm-ffmpeg_camera_video_stream_push_2mpvplayer
{
	local push_tool=ffmpeg
	local player=mpv
	local default_opt="--fs"
	local check_tool=v4l2-ctl
	local device=/dev/video
	local resol="480x320"

	if [ $# -ne 2 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME  dev  resolution"
		echo "e.g:$FUNCNAME  /dev/video0   480x320"
	    echo "屏幕分辨率(resolution):"
		which ${check_tool} > /dev/null
		if [ $? -eq 0 ]
		then
			${check_tool} --list-formats-ext | grep -w "Size:" | awk '{print"resolution: "$3}'
		else
			echo "${check_tool} not found!!"
			echo "please install first:apt install  v4l-utils"
			echo "320x240   --常见于较早的移动电话和小型设备。"
			echo "480x320   --常见于早期智能手机和某些小型平板电脑。"
			echo "800x480   --常见于某些低成本智能手机和平板电脑。"
			echo "1024x600  --常见于某些小型平板电脑和便携式设备。"
			echp "1280x720  --高清（HD）分辨率，也称为 720p。"
			echo "1280x800  --常见于较小的平板电脑和便携式设备。"
		fi
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi
	which ${player} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${player} not found,please install it first"
		echo "apt install ${player}"
		return 3
	fi
	device=$1
	resol=$2
	if [ ! -e ${device} ];then echo "device:${} not found!!";return 4;fi
	if [ x"$SSH_CLIENT" = x ]
	then
		echo "${push_tool} -f v4l2 -s ${resol} -i ${device} -c:v libx264 -preset ultrafast -tune zerolatency -f mpegts - | ${player} -"
		${push_tool} -f v4l2 -s ${resol} -i ${device} -c:v libx264 -preset ultrafast -tune zerolatency -f mpegts - | mpv -
	else
		echo "${push_tool} -f v4l2 -s ${resol} -i ${device} -c:v libx264 -preset ultrafast -tune zerolatency -f mpegts - | DISPLAY=:0 ${player} -"
		${push_tool} -f v4l2 -s ${resol} -i ${device} -c:v libx264 -preset ultrafast -tune zerolatency -f mpegts - | DISPLAY=:0 mpv -
	fi
	return 0
}
function fm-ffmpeg_camera_video_stream_push_2rtmpserver
{
	local push_tool=ffmpeg
	local check_tool=v4l2-ctl
	local rtmp_url=localhost
	local device=/dev/video0
	local resol="480x320"
	if [ $# -lt 3 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME dev resolution rtmp_url"
		echo "e.g:$FUNCNAME /dev/video0 1366x768 rtmp://116.62.103.60:1935/live/test"
		echo "屏幕分辨率(resolution):"
		which ${check_tool} > /dev/null
		if [ $? -eq 0 ]
		then
			${check_tool} --list-formats-ext | grep -w "Size:" | awk '{print"resolution: "$3}'
		else
			echo "${check_tool} not found!!"
			echo "please install first:apt install  v4l-utils"
			echo "320x240   --常见于较早的移动电话和小型设备。"
			echo "480x320   --常见于早期智能手机和某些小型平板电脑。"
			echo "800x480   --常见于某些低成本智能手机和平板电脑。"
			echo "1024x600  --常见于某些小型平板电脑和便携式设备。"
			echp "1280x720  --高清（HD）分辨率，也称为 720p。"
			echo "1280x800  --常见于较小的平板电脑和便携式设备。"
		fi
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi
	device=$1
	resol=$2
	rtmp_url=$3
	if [ ! -e ${device} ];then echo "device:${device} not found!!";return 3;fi

	if false
	then
		echo "${push_tool} -f v4l2 -i ${device} -c:v libx264 -preset veryfast -tune zerolatency -f flv ${rtmp_url}"
		${push_tool} -f v4l2 -i ${device} -c:v libx264 -preset veryfast -tune zerolatency -f flv ${rtmp_url}
	else
		echo "${push_tool} -f v4l2 -video_size  ${resol} -i ${device} -c:v libx264 -preset veryfast -tune zerolatency -f flv ${rtmp_url}"
		${push_tool} -f v4l2 -video_size  ${resol} -i ${device} -c:v libx264 -preset veryfast -tune zerolatency -f flv ${rtmp_url}
	fi
	#with sound
	#ffmpeg -f v4l2 -video_size  1366x768 -i /dev/video0 -f alsa -i default  -c:v libx264 -preset veryfast -tune zerolatency -c:a aac -f flv rtmp://192.168.8.107:1935/live/test1

	return 0
}
function fm-ffmpeg_screen_record_save_2file
{
	local push_tool=ffmpeg
	local screenID=":0.0"
	local resol="480x320"
	local filename=./output.mp4
	if [ $# -ne 3 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME screenID   resolution  filename"
		echo "e.g:$FUNCNAME :0.0  480x320  output.mp4"
		echo "屏幕分辨率(resolution):"
		echo "320x240   --常见于较早的移动电话和小型设备。"
    	echo "480x320   --常见于早期智能手机和某些小型平板电脑。"
    	echo "800x480   --常见于某些低成本智能手机和平板电脑。"
    	echo "1024x600  --常见于某些小型平板电脑和便携式设备。"
		echp "1280x720  --高清（HD）分辨率，也称为 720p。"
    	echo "1280x800  --常见于较小的平板电脑和便携式设备。"
		echo "1366x768  --广泛用于笔记本电脑和小型显示器的分辨率。"
		echo "1600x900  --常见于较大的笔记本电脑和中等尺寸显示器的分辨率。"
		echo "2560x1440 --2K 分辨率，也称为 Quad HD（QHD）或 1440p。"
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi

	screen="$1"
	resol="$2"
	filename="$3"
	echo "${push_tool} -f x11grab -video_size ${resol} -i ${screen} -c:v libx264 -preset ultrafast ${filename}"
	${push_tool} -f x11grab -video_size ${resol} -i ${screen} -c:v libx264 -preset ultrafast ${filename}
	return 0
}
function fm-ffmpeg_screen_record_push_2rtmpserver
{
	local push_tool=ffmpeg
	local screenID=":0.0"
	local resol="480x320"
	local rtmp_url=rtmp://116.62.103.60:1935/live/movie1234
	if [ $# -ne 3 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "ERROR:parameter wrong"
		echo "$FUNCNAME screenID  resolution  rtps_url"
		echo "e.g:$FUNCNAME :0.0 480x320 rtmp://116.62.103.60:1935/live/movie1234"
		echo "屏幕分辨率(resolution):"
		echo "320x240   --常见于较早的移动电话和小型设备。"
    	echo "480x320   --常见于早期智能手机和某些小型平板电脑。"
    	echo "800x480   --常见于某些低成本智能手机和平板电脑。"
    	echo "1024x600  --常见于某些小型平板电脑和便携式设备。"
		echp "1280x720  --高清（HD）分辨率，也称为 720p。"
    	echo "1280x800  --常见于较小的平板电脑和便携式设备。"
		echo "1366x768  --广泛用于笔记本电脑和小型显示器的分辨率。"
		echo "1600x900  --常见于较大的笔记本电脑和中等尺寸显示器的分辨率。"
		echo "2560x1440 --2K 分辨率，也称为 Quad HD（QHD）或 1440p。"
		return 1
	fi
	which ${push_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "ERROR:${push_tool} not found,please install it first"
		echo "apt install ${push_tool}"
		return 2
	fi

	screen="$1"
	resol="$2"
	rtmp_url="$3"
	if false
	then
		echo "${push_tool} -f x11grab -s ${resol} -i ${screen} -c:v libx264 -preset ultrafast ${rtmp_url}"
		${push_tool} -f x11grab -s ${resol} -i ${screen} -c:v libx264 -preset ultrafast ${rtmp_url}
	else
		echo "${push_tool} -f x11grab -s ${resol} -i ${screen} -c:v libx264 -preset ultrafast -f flv ${rtmp_url}"
		${push_tool} -f x11grab -s ${resol} -i ${screen} -c:v libx264 -preset ultrafast -f flv ${rtmp_url}
	fi
	return 0
}
function fm-picture_convert_quality
{
	local app=convert
	local arg_default="-quality"

	if [ $# -ne 3 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "SYNOPSIS:"
		echo "$FUNCNAME  input  output  quality"
		echo "e.g.$FUNCNAME  mypic.jpg  newmyjpg.jpg  80"
		return 1
	fi
	local input=$1
	local output=$2
	local qual=$3

	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo "${app} not found!";echo "apt install imagemagick";return 1;fi

	${app}   ${input}  ${arg_default} ${qual}  ${output}
	
	return 0
}
function fm-picture_convert_resize
{
	local app=convert
	local arg_default="-resize"

	if [ $# -ne 3 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "SYNOPSIS:"
		echo "$FUNCNAME  input  output  resize"
		echo "e.g.$FUNCNAME  mypic.jpg  newmyjpg.jpg  800x600"
		echo "resize format: "
		echo "800   --只指定宽度，而不指定高度,高度会根据原始图像的纵横比自动调整。" 
		echo "x600  --只指定高度，而不指定宽度,宽度会根据原始图像的纵横比自动调整。"
		echo "800x600 | 1024x1024 --指定宽度和高度。"
		echo "50% --使用百分比值来相对于原始图像的尺寸进行调整,50% 表示将图像调整为原始尺寸的一半。"
		echo "1024x1024>  --使用 > 符号来指定图像的最长边的大小,同时保持纵横比。"
		return 1
	fi
	local input=$1
	local output=$2
	local resize=$3
	if [ ! -f ${input} ];then echo "file:${input} not exist";return 2;fi
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo "${app} not found!";echo "apt install imagemagick";return 3;fi

	${app}   ${input}  ${arg_default} ${resize}  ${output}
	
	return 0
}
