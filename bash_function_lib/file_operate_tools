#***************************************#
#author:fengming
#date:Tue 10 Jan 2023 04:56:27 PM CST
#***************************************#
function fm-pdf_grep
{
	local app=pdfgrep
	local default_opt="--cache -iHnr "
    which ${app} > /dev/null
	if [ $? -ne 0 ] ; then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;
	
	$app ${default_opt} $*

	return 0
}

function fm-pdf_crack_passwd
{
	local app=pdfcrack
	local default_opt=
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;

	$app ${default_opt} $*
	return 0
}

function fm-pdf_split
{
	local app=pdftk
	local default_opt=
	#check parameter
    if [ $# -ne 1 ] || [ $1 = "-h" ] || [ $1 = "--help" ]
    then
        echo "DESCRIPTION:"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  src_file  page_num1-page_num2  outfile_name"
        return 1
    fi	
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;

	$app ${default_opt} $*
	return 0
}

function fm-pdf_merge
{
	local app=pdftk
	local default_opt=

	#check parameter
    if [ $# -ne 3 ] || [ $1 = "-h" ] || [ $1 = "--help" ]
    then
        echo "DESCRIPTION:"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  src_file  page_num1-page_num2  outfile_name"
		echo "example: ${FUNCNAME}  file.pdf  2-20  out.pdf"
        return 1
    fi


	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;

	$app ${default_opt} $*
	return 0
}

function fm-pdf_extract
{
	local app=pdftk
	local default_opt=
	#check parameter
    if [ $# -ne 3 ] || [ $1 = "-h" ] || [ $1 = "--help" ]
    then
        echo "DESCRIPTION:"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  src_file  page_num1-page_num2  outfile_name"
		echo "example: ${FUNCNAME}  file.pdf  2-20  out.pdf"
        return 1
    fi
	local src_pdf_file=$1
	local extract_range=$2
	local outfile_name=$3
	if [ ! -f ${src_pdf_file} ];then echo "ERROR:file:${src_pdf_file} not exist";return 2;fi
	
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;
	#example:pdftk a.pdf cat 1-end output b.pdf
	$app ${src_pdf_file}  cat ${extract_range} output ${outfile_name}

	return 0
}

function fm-pdf_viewer_terminal
{
	local app=evince
	local default_opt=

	#check parameter
    if [ $# -lt 1 ] || [ $1 = "-h" ] || [ $1 = "--help" ]
    then
        echo "DESCRIPTION:终端"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  filename.pdf [file1.pdf file2.pdf ...]"
        return 1
    fi
	which ${app} > /dev/null
	if [ $? -ne 0 ] ; then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;
	
	$app ${default_opt} $*

	return 0
}

function fm-pdf_viewer_gui
{
	local app=evince
	# local app=xpdf
	local default_opt=
	#check parameter
    if [ $# -lt 1 ] || [ $1 = "-h" ] || [ $1 = "--help" ]
    then
        echo "DESCRIPTION:pdf 阅读器"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  filename.pdf"
        return 1
    fi	
	which ${app} > /dev/null
	if [ $? -ne 0 ] ; then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;
	
	$app ${default_opt} $*

	return 0
}

function fm-convert_image2text_by_ocr
{
	local app=tesseract
	local default_opt="-l chi_sim"
	#check parameter
    if [ $# -ne 2 ] || [ $1 = "-h" ] || [ $1 = "--help" ]
    then
        echo "DESCRIPTION:recognition  image"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  imagename output_filename   //default use chi_sim"
		echo "example: ${FUNCNAME}  test_org.jpg    outfilename"
        return 1
    fi
	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;

	local src_image=$1
	local output_file=$2

	echo "image=${src_image}  output=${output_file}"

	${app}  ${src_image}  ${output_file} ${default_opt}

	return 0
}

function fm-grep_aviv
{ 
    local app=grep
    local default_opt="-rin --exclude=*.torrent"
    local filename=none

	#check parameter
    if [ $# -ne 1 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
    then
        echo "DESCRIPTION:"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  key-word"
        return 1
    fi	
	#check exec file state
    which ${app} > /dev/null
    if [ $? -ne 0 ]; then
        echo "ERROR:${FUNCNAME},${app} not exist!"
        return 2
    fi
	if [ $# -eq 1 ]
	then 
		
		local tmp=$(echo $1 | sed -n 's/-/00/p')
		if [ "$1" != "${tmp}" ]
		then
			filename=${tmp}
		fi
	fi

	local tmp_file=$(mktemp)
    find > ${tmp_file}
    $app ${default_opt} $*
	$app -in $* ${tmp_file}
	
	if [ "x${filename}" != "x" ]
	then
		$app ${default_opt} ${filename}
		$app -in ${filename} ${tmp_file}
	fi
	
    rm ${tmp_file}

    return 0
}
function fm-tree_aviv
{
	local app=tree
	local default_opt="-sfh"

	${app}  ${default_opt} $*

	return 0
}

function fm-rm_overwrite
{
	local app=shred
	local default_opt="-n 1 -u --random-source=/dev/urandom -v"

	#check parameter
    if [ $# -lt 1 ] || [ $1 = "-h" ] || [ $1 = "--help" ]
    then
        echo "DESCRIPTION:安全删除文件--先用随机数覆盖文件最后再删除该文件"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  [file or dir] list"	
        return 1
    fi

	which ${app} > /dev/null
	if [ $? -ne 0 ];then echo ¨ERROR:${FUNCNAME},${app} not exist!¨;return 1;fi;

	local total_file_num=
	local num=
	let total_file_num=0
	let num=0
	for param in "$@"
	do
		if [ -d ${param} ]
		then
			#first remove files under this dir
			let num=0
			for file in $(find ${param} -type f)
			do
				$app ${default_opt} ${file}
				let num=${num}+1
			done
			let total_file_num=${total_file_num}+${num}
			#final remove dir
			rm -rf ${param}
		else
			$app ${default_opt} ${param}
			let total_file_num=${total_file_num}+1
		fi
	done

	echo "total erase file counts:${total_file_num}"
	return 0
}

function fm-json_parse
{


	return 0
}
function fm-json_get_by_kay
{

	return 0
}
function fm-json_format
{


	return 0
}
function fm-upload_files_to_fileserver
{
	local fileserver_ip=139.9.186.120
	local fileserver_port=1201
	local target_path=/root/http_share/data/unclassified

	if [ $# -lt 1 ]
	then
		echo "paramter wrong!"
		echo "you can -h or --help for help"
		return 1
	fi
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "$FUNCNAME  file_list"
		echo "e.g. $FUNCNAME  file1 file2 fileN ..."
		return 2
	fi
	
	local file_list
	#check file stat
	for file in "$@"
	do
		if [ ! -f ${file} ]
		then 
			echo "WARNING:<${file}> not found,ignore it"
		else
			file_list+=("${file}")
		fi
	done
	
	if [ ${#file_list[@]} -ge 1 ]
	then
		echo "scp -P ${fileserver_port}  ${file_list[@]}   root@${fileserver_ip}:${target_path}"
		scp -P ${fileserver_port}  ${file_list[@]}   root@${fileserver_ip}:${target_path}
	fi
	echo "all done ..."
	return 0
}

function fm-dockerfile_vim_dictionary_copy2current_dir
{
	local dic_file_path=${fengming_top_dir}/documents/sub_doc_docker/Dockerfile/work_dictionary
	local target_file=.work_dictionary
	#check
	if [ ! -f ${dic_file_path} ]
	then
		echo "vim dict file:$dic_file_path not exist"
		return 1
	fi
	cp -v ${dic_file_path} ${target_file}
	return 0
}

function fm-docker_compose_vim_dictionary_copy2current_dir
{
	local dic_file_path=${fengming_top_dir}/documents/sub_doc_docker/docker-compose/work_dictionary
	local target_file=.work_dictionary
	#check
	if [ ! -f ${dic_file_path} ]
	then
		echo "vim dict file:$dic_file_path not exist"
		return 1
	fi
	cp -v ${dic_file_path} ${target_file}
	return 0
}

function fm-yml_file_check
{
	local yml_check_tool=yamllint 
	#check
	which ${yml_check_tool} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "tool:${yml_check_tool} not exist."
		echo "please install it first"
		echo "apt install yamllint"
		return 1
	fi

	for file in "$@"
	do
		if [ -f ${file} ]
		then
			${yml_check_tool} ${file}
		else
			echo "file:${file} not exist"
		fi
	done
	return 0
}
function fm-docker_compose_check
{
	
	local docker_compose_check1=docker-compose
	local target_file=docker-compose.yml
	
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "$FUNCNAME [filename],but default para is ./docker-compose.yml"
		return 1
	fi
	if [ $# -eq 1 ]
	then
		target_file=$1
	fi
	echo "================== YML Check ============================"
	fm-yml_file_check ${target_file}

	which ${docker_compose_check1} > /dev/null
	if [ $? -ne 0 ]
	then
		echo "tool:${docker_compose_check1} not exist."
		echo "please install it first"
		return 1
	fi

	echo "================= docker-compose config ================"
	${docker_compose_check1} config
	return 0
}

function fm-docker_compose_template
{
	local template_file=${fengming_top_dir}/documents/sub_doc_docker/docker-compose/docker-compose.yml.template
	local target_file=docker-compose.yml
	if [ ! -f ${template_file} ]
	then
		echo "template file:${template_file} not exist"
		return 1
	fi
	echo " "
	cat -n ${template_file}
	echo " "
	local opt="N"
	if [ -f ${target_file} ]
	then
		read -p "Overwrite Current docker-compose.yml? [y/N]"  opt
		if [ "x${opt}" = "x" ];then opt="N";fi
		if [ "x${opt}" = "xy" ] || [ "x${opt}" = "xY" ] || [ "x${opt}" = "xyes" ] || [ "x${opt}" = "xYES" ]
		then
			cp -v ${template_file} ${target_file}
		fi
	else
		read -p "Copy docker-compose.yml template to here? [Y/n]"  opt
		if [ "x${opt}" = "x" ];then opt="Y";fi
		if [ "x${opt}" = "xy" ] || [ "x${opt}" = "xY" ] || [ "x${opt}" = "xyes" ] || [ "x${opt}" = "xYES" ]
		then
			cp -v ${template_file} ${target_file}
		fi
	fi
	return 0
}

function fm-cmake_vim_dictionary_copy2current_dir
{
	local dic_file_path=${fengming_top_dir}/documents/sub_doc_cmake/work_dictionary
	local target_file=.work_dictionary
	#check
	if [ ! -f ${dic_file_path} ]
	then
		echo "vim dict file:$dic_file_path not exist"
		return 1
	fi
	cp -v ${dic_file_path} ${target_file}
	return 0
}


