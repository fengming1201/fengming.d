#***************************************#
#author:fengming
#date:Wed 19 Apr 2023 05:05:56 PM CST
#***************************************#

function fm-time_zone_update
{
	local app=ntpdate
	local setzone=timedatectl
	local zonefile=/usr/share/zoneinfo/Asia/Shanghai
	local zone_default=Asia/Shanghai
	local target_file=/etc/localtime 
	local is_root=$(id -u)
	local ret=0
	if [ ${is_root} -eq 0 ]
	then
		which ${app} > /dev/null
		ret=$?
	else
		sudo which ${app} > /dev/null
		ret=$?
	fi
	if [ ${ret} -ne 0 ]
	then
		echo "ERROR:${FUNCNAME},${app} not found"
		echo "please install ${app}"
		echo "sudo apt install ${app}"
		return 1
	fi

	which ${setzone} > /dev/null
	ret=$?
	if [ ${ret} -ne 0 ]
	then
		echo "ERROR:${FUNCNAME},${app} not found"
		echo "please install ${app}"
		return 2
	fi
	#set timezone
	if [ ${ret} -eq 0 ]
	then
	    echo "set time zone to ${zone_default}"
		if [ ${is_root} -eq 0 ]
		then
			${setzone} set-timezone  ${zone_default}
		else
			sudo ${setzone} set-timezone  ${zone_default}
		fi
	else
		echo "cp time zone file to ${target_file}"
		if [ ${is_root} -eq 0 ]
		then
			cp -vf ${zonefile} ${target_file}
		else
			sudo cp -vf ${zonefile} ${target_file}
		fi
	fi
	#update time from servers
	local time_server_array=("ntp.ntsc.ac.cn" "ntp1.aliyun.com" "ntp.fudan.edu.cn")
	for server in $(echo ${time_server_array[*]})
	do
		echo "try to connecting time server:${server}"
		if [ ${is_root} -eq 0 ]
		then
			${app} -u  ${server}
			ret=$?
		else
			sudo ${app} -u  ${server}
			ret=$?
		fi
		if [ ${ret} -eq 0 ]
		then
			break
		fi
	done
	
	return 0
}

function fm-parse_file_format
{
    #check paramter
    if [ $# -ne 1 ] || [ $1 = "-h" ] || [ $1 = "--help" ]
    then
        echo "DESCRIPTION:解析常见的文件格式，即标记各个域的名称。"
        echo "SYNOPSIS:"
        echo "         ${FUNCNAME}  filepath"
        echo "         ${FUNCNAME}  /etc/fstab"
        return 1
    fi

    #check file exist
    if [ ! -f $1 ];then echo "file:$1 not exist";return 1;fi

    local filename=$(basename $1)
    #check support list
    if [ ${filename} = "fstab" ]
    then
        echo "$1"
    elif [ ${filename} = "passwd" ]
    then
        echo "$1"
    elif [ ${filename} = "shadow" ]
    then
        echo "$1"
    elif [ ${filename} = "group" ]
    then
        echo "$1"
    elif [ ${filename} = "crontab" ]
    then
        echo "$1"
    else
        echo "no support parse this file format"
    fi


    return 0
}

function fm-diff_dir
{
    local app=diff
    local default_opt="-d"
    #check param
	if [ $# -ne 2 ]
	then
		echo "ERROR:parameter missing"
		echo "discripttion:compare two directories"
		echo "example:"
		echo "$FUNCNAME    [-h or --help]"
		echo "$FUNCNAME    dir1  dir2"
		echo "$FUNCNAME    "
		return 1
	fi
	local dir1=$1
    local dir2=$2
	#check tools
	which ${app} > /dev/null
	if [ $? -ne 0   ];then echo "${app} not found!";return 2;fi

    ${app} -u <(ls "${dir1}" | short)  <(ls "${dir2}")
    if [ $? -ne 0 ];then echo "${app} exec error!";return 3;fi

    return 0
}

function fm-script_putout
{
	local tmp_dir=/tmp
	local scriptfifo=($(ls ${tmp_dir}/scriptfifo*))
	local num=1
	local array_len=${#scriptfifo[@]}

	#find out scriptfifo file
	if [ ${array_len} -gt 0 ]
	then
		echo "0 - create new file"
		for file in ${scriptfifo[*]}
		do
			echo "${num} - ${file}"
			num=$(expr ${num} + 1)
		done
		echo "N/n - nothing to do"
		read -p "Input number to select scriptfifo file:" opt
	fi

	if [ x"${opt}" = xN ] || [ x"${opt}" = xn ];then return 0;fi

	local target_file="none"
	if [ x"${opt}" = "x0" ] || [ ${array_len} -eq 0 ]
	then
		local scriptnum=$(head -c 2 /dev/random | od -A n -t u4)
		local new_scriptfifo=${tmp_dir}/scriptfifo${scriptnum// /}
		mkfifo ${new_scriptfifo}
		echo "create new mkfifo file:${new_scriptfifo}"
		target_file=${new_scriptfifo}
	else
		target_file=${scriptfifo[$(expr $opt - 1)]}
	fi
	if [ -p ${target_file} ]
	then
		echo "cat ${target_file}"
		cat ${target_file}
	else
		echo "not found target file:${target_file}"
	fi

	return 0
}

function fm-script_putin
{
	local tmp_dir=/tmp
	local scriptfifo=($(ls ${tmp_dir}/scriptfifo*))
	local num=1
	local array_len=${#scriptfifo[@]}

	#find out scriptfifo file
	if [ ${array_len} -gt 0 ]
	then
		echo "0 - create new file"
		for file in ${scriptfifo[*]}
		do
			echo "${num} - ${file}"
			num=$(expr ${num} + 1)
		done
		echo "N/n - nothing to do"
		read -p "Input number to select scriptfifo file:" opt
	fi

	if [ x"${opt}" = xN ] || [ x"${opt}" = xn ];then return 0;fi
	local target_file="none"
	if [ x"${opt}" = "x0" ] || [ ${array_len} -eq 0 ]
	then
		local scriptnum=$(head -c 2 /dev/random | od -A n -t u4)
		local new_scriptfifo=${tmp_dir}/scriptfifo${scriptnum// /}
		mkfifo ${new_scriptfifo}
		echo "create new mkfifo file:${new_scriptfifo}"
		target_file=${new_scriptfifo}
	else
		target_file=${scriptfifo[$(expr $opt - 1)]}
	fi
	if [ -p ${target_file} ]
	then
		echo "script -f ${target_file}"
		script -f ${target_file}
	else
		echo "not found target file:${target_file}"
	fi

	return 0
}

function fm-show_CPU
{
	which lscpu > /dev/null
	if [ $? -ne 0 ];then echo "lscpu not found";return 1;fi
	lscpu
	echo "======== end lscpu =============="
	cat /proc/cpuinfo
	echo "======== end /proc/cpuinfo =============="
	which inxi > /dev/null
	if [ $? -ne 0 ];then echo "inxi not found";echo "you can \"apt install inxi\" to install it";return 1;fi
	inxi -C
	echo "======== end inxi -C =============="
	return 0
}

function fm-show_GPU
{
	

	return 0
}
function fm-show_monitor_info
{
	local tool=xrandr
	local tool2=xdpyinfo
	local hw_info=hwinfo
	local is_local=$(echo $SSH_TTY)
	local is_root=$(id -u)

	which ${tool} > /dev/null
	if [ $? -ne 0 ]
	then 
		echo "${tool} not found!!"
		return 1
	else
		if [ "x${is_local}" = "x" ]
		then
			${tool}	
		else
			DISPLAY=:0 ${tool}	
		fi
		echo "============================================"
	fi

	which ${tool2} > /dev/null
	if [ $? -ne 0 ]
	then 
		echo "${tool2} not found!!"
		return 2
	else
		if [ "x${is_local}" = "x" ]
		then
			${tool2} | grep dimensions
		else
			DISPLAY=:0 ${tool2} | grep dimensions
		fi
		echo "============================================"
	fi

	which /usr/sbin/${hw_info} > /dev/null
	if [ $? -ne 0 ]
	then 
		echo "${hw_info} not found!!"
		echo "please install first:apt install hwinfo"
		return 3
	else
		if [ ${is_root} -ne 0 ]
		then
				sudo hwinfo --monitor
		else
				hwinfo --monitor
		fi
	fi
	return 0
}
function fm-show_Network_Card
{

	return 0
}
function fm-show_RAM
{

	return 0
}
function fm-net_check_url_respone_with_wget 
{
	local tool=wget
	local default_opt="--spider"

	which ${tool} > /dev/null
	if [ $? -ne 0 ];then echo "${tool} not found,please install it first!";return 1;fi

	if [ $# -ne 1 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "CN:检测URL响应状态，也是URL是否可达。"
		echo "$FUNCNAME  URL"
		echo ".e.g:$FUNCNAME  http://ip:port"
		echo ".e.g:$FUNCNAME  www.baidu.com"
		return 2
	fi
	local  url_str=$1
	echo "${tool} ${default_opt}  ${url_str}"
	${tool} ${default_opt}  ${url_str}
	return 0
}
function fm-net_check_url_respone_with_curl 
{
	local tool=curl
	local default_opt="-I"

	which ${tool} > /dev/null
	if [ $? -ne 0 ];then echo "${tool} not found,please install it first!";return 1;fi

	if [ $# -ne 1 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "CN:检测URL响应状态，也是URL是否可达。"
		echo "$FUNCNAME  URL"
		echo ".e.g:$FUNCNAME  http://ip:port"
		echo ".e.g:$FUNCNAME  www.baidu.com"
		return 2
	fi
	local  url_str=$1
	echo "${tool} ${default_opt}  ${url_str}"
	${tool} ${default_opt}  ${url_str}
	return 0
}
function fm-net_check_port_state_with_nc
{
	local tool=nc
	local default_opt="-zv"

	which ${tool} > /dev/null
	if [ $? -ne 0 ];then echo "${tool} not found,please install it first!";return 1;fi

	if [ $# -ne 2 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "CN:检测远程主机端口号状态，也是端口号是否开放。"
		echo "$FUNCNAME  IP PORT"
		echo ".e.g:$FUNCNAME  116.62.103.60  1201"
		return 2
	fi
	local  ip=$1
	local port=$2
	echo "${tool} ${default_opt}  ${ip} ${port}"
	${tool} ${default_opt}  ${ip} ${port}
	return 0
}
function fm-net_check_port_state_with_nmap
{
	local tool=nmap
	local default_opt="-p"

	which ${tool} > /dev/null
	if [ $? -ne 0 ];then echo "${tool} not found,please install it first!";return 1;fi

	if [ $# -ne 2 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]
	then
		echo "CN:检测远程主机端口号状态，也是端口号是否开放。"
		echo "$FUNCNAME  IP  PORT"
		echo ".e.g:$FUNCNAME  116.62.103.60  1201"
		return 2
	fi
	local  ip=$1
	local port=$2
	echo "${tool} ${default_opt} ${port} ${ip}"
	${tool} ${default_opt} ${port}  ${ip} 
	return 0
}