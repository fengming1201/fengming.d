shred详细的用法如下：

-f, --force   更改权限允许写入(如有必要)
-n, --iterations=N   重写N次，默认为3次
--random-source=FILE 从指定文件读取数据,可用/dev/urandom获取随机数。
-s, --size=N  将文件粉碎为固定大小 (可使用后缀如K、M、C等)
-u, --remove   重写后截短并移除文件
-v, --verbose   显示进度
-z, --zero - add  用0覆盖数据
-help  显示帮助
-version   显示版本信息

例子：
1，用0填充并删除
#shred -u -z file

2，用随机数填充一遍，并删除
#shred -n 1 -u --random-source=/dev/urandom -v  file

用法：shred [选项]... FILE...
重复覆盖指定的文件，以使其更难恢复，即使是非常昂贵的硬件探测来恢复数据。

如果 FILE 为 -，则切碎标准输出。

长期权的强制参数对于空头期权也是强制性的。
  -f, --force    如有必要，更改权限以允许写入。
  -n, --iterations=N  覆盖 N 次而不是默认值 （3）。
      --random-source=FILE  从文件获取随机字节。可用/dev/urandom获取随机数。
  -s, --size=N   切碎这么多字节（接受 K、M、G 等后缀）。
  -u             覆盖后解除分配和删除文件。
      --remove[=HOW]  like -u but give control on HOW to delete;  See below
  -v, --verbose  显示进度。
  -x, --exact    不要将文件大小四舍五入到下一个完整块;这是非常规文件的默认值。
  -z, --zero     添加带有0的最终覆盖以隐藏切碎。
      --help     display this help and exit
      --version  output version information and exit

如果指定了 --remove （-u），则删除文件。  默认值是不删除这些文件，因为它通常在 /dev/hda 等设备文件上运行，这些文件通常不应被删除。
可选的 HOW 参数指示如何删除目录条目：
'unlink' => 使用标准取消链接调用。
'wipe' => 还首先对名称中的字节进行模糊处理。
'wipesync' => 同时将每个经过模糊处理的字节同步到磁盘。
默认模式是“擦除同步”，但请注意它可能很昂贵。

注意：请注意，切碎依赖于一个非常重要的假设：
文件系统就地覆盖数据。 这是传统的做事的方式，但许多现代文件系统设计并不能满足这一点假设。 以下是 shred 所在的文件系统示例无效，或者不能保证在所有文件系统模式下都有效：

* 日志结构或日志文件系统，例如随附的文件系统AIX 和 Solaris（以及 JFS、ReiserFS、XFS、Ext3 等）。

* 写入冗余数据的文件系统，即使某些写入也会继续失败，例如基于 RAID 的文件系统。

* 创建快照的文件系统，例如网络设备的 NFS 服务器。

* 缓存在临时位置的文件系统，例如 NFS版本 3 客户端。

* 压缩文件系统。

对于 ext3 文件系统，上述免责声明适用（因此，切碎的有效性有限）仅在数据=日志模式下，哪些日记除了元数据之外还文件数据。 在两者中数据=有序（默认）和数据=写回模式，切碎照常工作。Ext3 日记模式可以通过添加 data=something 选项来更改
到 /etc/fstab 文件中特定文件系统的挂载选项，如装载手册页（载人装载）中所述。

此外，文件系统备份和远程镜像可能包含副本无法删除的文件，并且将允许粉碎文件
以后再找。

GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
Full documentation at: <https://www.gnu.org/software/coreutils/shred>
or available locally via: info '(coreutils) shred invocation'
